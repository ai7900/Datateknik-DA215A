
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002ac  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000003a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014f1  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e06  00000000  00000000  00001981  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000089b  00000000  00000000  00002787  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000018c  00000000  00000000  00003024  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006a4  00000000  00000000  000031b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000629  00000000  00000000  00003854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003e7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ec ea       	ldi	r30, 0xAC	; 172
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 31       	cpi	r26, 0x12	; 18
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  d2:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <delay_1_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	RET
  e6:	08 95       	ret

000000e8 <delay_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	DEC R24
 100:	8a 95       	dec	r24
	CPI R24, 0			; more loops to do?
 102:	80 30       	cpi	r24, 0x00	; 0
	BRNE delay_micros	;	continue!
 104:	89 f7       	brne	.-30     	; 0xe8 <delay_micros>
	RET
 106:	08 95       	ret

00000108 <delay_ms>:
; Delay of X ms
;	LDI + RCALL = 4 cycles
;==============================================================================
.global delay_ms	
delay_ms:
	MOV R18, R24
 108:	28 2f       	mov	r18, r24

0000010a <loop_dms>:
loop_dms:
	LDI R24, 250
 10a:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 10c:	ed df       	rcall	.-38     	; 0xe8 <delay_micros>
	LDI R24, 250
 10e:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 110:	eb df       	rcall	.-42     	; 0xe8 <delay_micros>
	LDI R24, 250
 112:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 114:	e9 df       	rcall	.-46     	; 0xe8 <delay_micros>
	LDI R24, 250
 116:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 118:	e7 df       	rcall	.-50     	; 0xe8 <delay_micros>
	DEC R18
 11a:	2a 95       	dec	r18
	CPI R18, 0			; more loops to do?
 11c:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 11e:	a9 f7       	brne	.-22     	; 0x10a <loop_dms>
	RET
 120:	08 95       	ret

00000122 <delay_s>:
;==============================================================================
; Delay seconds. R24 input.
;==============================================================================
.global delay_s	
delay_s:
	MOV R19, R24
 122:	38 2f       	mov	r19, r24

00000124 <loop_s>:
loop_s:
	LDI R24, 250
 124:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 126:	f0 df       	rcall	.-32     	; 0x108 <delay_ms>
	LDI R24, 250
 128:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 12a:	ee df       	rcall	.-36     	; 0x108 <delay_ms>
	LDI R24, 250
 12c:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 12e:	ec df       	rcall	.-40     	; 0x108 <delay_ms>
	LDI R24, 250
 130:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 132:	ea df       	rcall	.-44     	; 0x108 <delay_ms>
	DEC R19
 134:	3a 95       	dec	r19
	CPI R19, 0
 136:	30 30       	cpi	r19, 0x00	; 0
	BRNE loop_s
 138:	a9 f7       	brne	.-22     	; 0x124 <loop_s>
	RET
 13a:	08 95       	ret

0000013c <hmi_init>:
 *	- init numeric keyboard
 *	- init LCD
 */
void hmi_init(void)
{
	numkey_init();
 13c:	0e 94 a3 00 	call	0x146	; 0x146 <numkey_init>
	lcd_init();
 140:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_init>
 144:	08 95       	ret

00000146 <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// PE6 (D7) as input (key pressed?)
	DDRE = 0x00;
 146:	1d b8       	out	0x0d, r1	; 13
	// PB4-PB7 (D8-D11) as outputs (MUX and decoder)
	DDRB = 0xF0;
 148:	80 ef       	ldi	r24, 0xF0	; 240
 14a:	84 b9       	out	0x04, r24	; 4
 14c:	08 95       	ret

0000014e <numkey_read>:
 * return:
 *	If a key is pressed, then a character that represents the key is returned.
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	c0 e0       	ldi	r28, 0x00	; 0
 158:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t	i;
	for (i = 0; i < sizeof(key_map); i++)
	{
		SET_BIT_LEVELS(PORTB,0x0F, i << 4); // skickar till portb
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	28 2f       	mov	r18, r24
 15e:	2f 70       	andi	r18, 0x0F	; 15
 160:	ce 01       	movw	r24, r28
 162:	82 95       	swap	r24
 164:	92 95       	swap	r25
 166:	90 7f       	andi	r25, 0xF0	; 240
 168:	98 27       	eor	r25, r24
 16a:	80 7f       	andi	r24, 0xF0	; 240
 16c:	98 27       	eor	r25, r24
 16e:	82 2b       	or	r24, r18
 170:	85 b9       	out	0x05, r24	; 5
		delay_ms(1);						// delay fÃ¶r knappstuds
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 84 00 	call	0x108	; 0x108 <delay_ms>
		if (PINE & 0b01000000)				// kolla pÃ¥ PINE,6 om == 1
 178:	66 9b       	sbis	0x0c, 6	; 12
 17a:	05 c0       	rjmp	.+10     	; 0x186 <numkey_read+0x38>
		{
			return key_map[i];
 17c:	fe 01       	movw	r30, r28
 17e:	e0 50       	subi	r30, 0x00	; 0
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	80 81       	ld	r24, Z
 184:	05 c0       	rjmp	.+10     	; 0x190 <numkey_read+0x42>
 186:	21 96       	adiw	r28, 0x01	; 1
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
	uint8_t	i;
	for (i = 0; i < sizeof(key_map); i++)
 188:	cc 30       	cpi	r28, 0x0C	; 12
 18a:	d1 05       	cpc	r29, r1
 18c:	31 f7       	brne	.-52     	; 0x15a <numkey_read+0xc>
			//}
	}
	
	
	// no key was pressed!
	return NO_KEY;
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	08 95       	ret

0000019a <main>:
	
	NÄR DET ÄR DAGS ATT TESTA HUVUDPROGRAMMET KOMMENTERAR NI UT (ELLER RADERAR)
	ER TESTKOD. GLÖM INTE ATT AVKOMMENTERA HUVUDPROGRAMMET
******************************************************************************/

	hmi_init();
 19a:	0e 94 9e 00 	call	0x13c	; 0x13c <hmi_init>

	char* test= "test";
	char testchar;
	lcd_write_str(test);
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_write_str>
	//lcd_write(INSTRUCTION,0x10);
	lcd_write(INSTRUCTION,0x04);
 1a6:	64 e0       	ldi	r22, 0x04	; 4
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
			//lcd_set_cursor_mode(CURSOR_ON);
			//delay_s(2);
			//lcd_set_cursor_mode(CURSOR_OFF);
		
		//KEYPAD TEST
			testchar = numkey_read();
 1ae:	0e 94 a7 00 	call	0x14e	; 0x14e <numkey_read>
			if (testchar != '\0')
 1b2:	88 23       	and	r24, r24
 1b4:	e1 f3       	breq	.-8      	; 0x1ae <main+0x14>
			{
				lcd_write(DATA,testchar);
 1b6:	68 2f       	mov	r22, r24
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
				delay_ms(200);
 1be:	88 ec       	ldi	r24, 0xC8	; 200
 1c0:	0e 94 84 00 	call	0x108	; 0x108 <delay_ms>
 1c4:	f4 cf       	rjmp	.-24     	; 0x1ae <main+0x14>

000001c6 <write_4bit_msb>:
*/
void lcd_set_cursor_pos(uint8_t row, uint8_t col)
{
	uint8_t cursor_pos;
	cursor_pos = 0x80 | (row << 6) | col;
	lcd_write(INSTRUCTION, cursor_pos);
 1c6:	91 b3       	in	r25, 0x11	; 17
 1c8:	9f 70       	andi	r25, 0x0F	; 15
 1ca:	80 7f       	andi	r24, 0xF0	; 240
 1cc:	89 2b       	or	r24, r25
 1ce:	81 bb       	out	0x11, r24	; 17
 1d0:	5f 9a       	sbi	0x0b, 7	; 11
 1d2:	0e 94 6d 00 	call	0xda	; 0xda <delay_1_micros>
 1d6:	5f 98       	cbi	0x0b, 7	; 11
 1d8:	08 95       	ret

000001da <lcd_write>:
 1da:	cf 93       	push	r28
 1dc:	c6 2f       	mov	r28, r22
 1de:	81 11       	cpse	r24, r1
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <lcd_write+0xc>
 1e2:	5e 98       	cbi	0x0b, 6	; 11
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <lcd_write+0xe>
 1e6:	5e 9a       	sbi	0x0b, 6	; 11
 1e8:	8c 2f       	mov	r24, r28
 1ea:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <write_4bit_msb>
 1ee:	8c 2f       	mov	r24, r28
 1f0:	82 95       	swap	r24
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <write_4bit_msb>
 1f8:	8d e2       	ldi	r24, 0x2D	; 45
 1fa:	0e 94 74 00 	call	0xe8	; 0xe8 <delay_micros>
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <lcd_clear>:
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	0e 94 84 00 	call	0x108	; 0x108 <delay_ms>
 210:	08 95       	ret

00000212 <lcd_set_cursor_mode>:
 212:	68 2f       	mov	r22, r24
 214:	6c 60       	ori	r22, 0x0C	; 12
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
 21c:	08 95       	ret

0000021e <lcd_init>:
 21e:	80 ef       	ldi	r24, 0xF0	; 240
 220:	80 bb       	out	0x10, r24	; 16
 222:	80 ec       	ldi	r24, 0xC0	; 192
 224:	8a b9       	out	0x0a, r24	; 10
 226:	84 e1       	ldi	r24, 0x14	; 20
 228:	0e 94 84 00 	call	0x108	; 0x108 <delay_ms>
 22c:	5e 98       	cbi	0x0b, 6	; 11
 22e:	80 e3       	ldi	r24, 0x30	; 48
 230:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <write_4bit_msb>
 234:	8a e0       	ldi	r24, 0x0A	; 10
 236:	0e 94 84 00 	call	0x108	; 0x108 <delay_ms>
 23a:	80 e3       	ldi	r24, 0x30	; 48
 23c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <write_4bit_msb>
 240:	8a e0       	ldi	r24, 0x0A	; 10
 242:	0e 94 84 00 	call	0x108	; 0x108 <delay_ms>
 246:	80 e3       	ldi	r24, 0x30	; 48
 248:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <write_4bit_msb>
 24c:	8a e0       	ldi	r24, 0x0A	; 10
 24e:	0e 94 84 00 	call	0x108	; 0x108 <delay_ms>
 252:	80 e2       	ldi	r24, 0x20	; 32
 254:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <write_4bit_msb>
 258:	8d e2       	ldi	r24, 0x2D	; 45
 25a:	0e 94 74 00 	call	0xe8	; 0xe8 <delay_micros>
 25e:	68 e2       	ldi	r22, 0x28	; 40
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
 266:	8c e0       	ldi	r24, 0x0C	; 12
 268:	0e 94 09 01 	call	0x212	; 0x212 <lcd_set_cursor_mode>
 26c:	0e 94 01 01 	call	0x202	; 0x202 <lcd_clear>
 270:	66 e0       	ldi	r22, 0x06	; 6
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
 278:	08 95       	ret

0000027a <lcd_write_str>:
*
* parameter:
*	p_str: pointer to the string's first character
*/
void lcd_write_str(char *p_str)
{
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
	uint8_t i =0;
	while (p_str[i] !='\0')
 280:	fc 01       	movw	r30, r24
 282:	60 81       	ld	r22, Z
 284:	66 23       	and	r22, r22
 286:	61 f0       	breq	.+24     	; 0x2a0 <lcd_write_str+0x26>
 288:	8c 01       	movw	r16, r24
 28a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd_write(DATA, p_str[i]);
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_write>
		i++;
 292:	cf 5f       	subi	r28, 0xFF	; 255
*	p_str: pointer to the string's first character
*/
void lcd_write_str(char *p_str)
{
	uint8_t i =0;
	while (p_str[i] !='\0')
 294:	f8 01       	movw	r30, r16
 296:	ec 0f       	add	r30, r28
 298:	f1 1d       	adc	r31, r1
 29a:	60 81       	ld	r22, Z
 29c:	61 11       	cpse	r22, r1
 29e:	f6 cf       	rjmp	.-20     	; 0x28c <lcd_write_str+0x12>
	{
		lcd_write(DATA, p_str[i]);
		i++;
	}
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
