
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000230  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000002f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014ab  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dd9  00000000  00000000  0000188b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000086d  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00002ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000069b  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004fa  00000000  00000000  000036d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003bd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e0 e3       	ldi	r30, 0x30	; 48
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 30       	cpi	r26, 0x00	; 0
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  d2:	0c 94 16 01 	jmp	0x22c	; 0x22c <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <delay_1_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	RET
  e6:	08 95       	ret

000000e8 <delay_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	DEC R24
 100:	8a 95       	dec	r24
	CPI R24, 0			; more loops to do?
 102:	80 30       	cpi	r24, 0x00	; 0
	BRNE delay_micros	;	continue!
 104:	89 f7       	brne	.-30     	; 0xe8 <delay_micros>
	RET
 106:	08 95       	ret

00000108 <delay_ms>:
; Delay of X ms
;	LDI + RCALL = 4 cycles
;==============================================================================
.global delay_ms	
delay_ms:
	MOV R18, R24
 108:	28 2f       	mov	r18, r24

0000010a <loop_dms>:
loop_dms:
	LDI R24, 250
 10a:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 10c:	ed df       	rcall	.-38     	; 0xe8 <delay_micros>
	LDI R24, 250
 10e:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 110:	eb df       	rcall	.-42     	; 0xe8 <delay_micros>
	LDI R24, 250
 112:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 114:	e9 df       	rcall	.-46     	; 0xe8 <delay_micros>
	LDI R24, 250
 116:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 118:	e7 df       	rcall	.-50     	; 0xe8 <delay_micros>
	DEC R18
 11a:	2a 95       	dec	r18
	CPI R18, 0			; more loops to do?
 11c:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 11e:	a9 f7       	brne	.-22     	; 0x10a <loop_dms>
	RET
 120:	08 95       	ret

00000122 <delay_s>:
;==============================================================================
; Delay seconds. R24 input.
;==============================================================================
.global delay_s	
delay_s:
	MOV R19, R24
 122:	38 2f       	mov	r19, r24

00000124 <loop_s>:
loop_s:
	LDI R24, 250
 124:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 126:	f0 df       	rcall	.-32     	; 0x108 <delay_ms>
	LDI R24, 250
 128:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 12a:	ee df       	rcall	.-36     	; 0x108 <delay_ms>
	LDI R24, 250
 12c:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 12e:	ec df       	rcall	.-40     	; 0x108 <delay_ms>
	LDI R24, 250
 130:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 132:	ea df       	rcall	.-44     	; 0x108 <delay_ms>
	DEC R19
 134:	3a 95       	dec	r19
	CPI R19, 0
 136:	30 30       	cpi	r19, 0x00	; 0
	BRNE loop_s
 138:	a9 f7       	brne	.-22     	; 0x124 <loop_s>
	RET
 13a:	08 95       	ret

0000013c <hmi_init>:
 *	- init numeric keyboard
 *	- init LCD
 */
void hmi_init(void)
{
	numkey_init();
 13c:	0e 94 a3 00 	call	0x146	; 0x146 <numkey_init>
	lcd_init();
 140:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init>
 144:	08 95       	ret

00000146 <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// PE6 (D7) as input (key pressed?)
	DDRE = 0x00;
 146:	1d b8       	out	0x0d, r1	; 13
	// PB4-PB7 (D8-D11) as outputs (MUX and decoder)
	DDRB = 0xF0;
 148:	80 ef       	ldi	r24, 0xF0	; 240
 14a:	84 b9       	out	0x04, r24	; 4
 14c:	08 95       	ret

0000014e <main>:
	
	NÄR DET ÄR DAGS ATT TESTA HUVUDPROGRAMMET KOMMENTERAR NI UT (ELLER RADERAR)
	ER TESTKOD. GLÖM INTE ATT AVKOMMENTERA HUVUDPROGRAMMET
******************************************************************************/

	hmi_init();
 14e:	0e 94 9e 00 	call	0x13c	; 0x13c <hmi_init>

	char* test= "test";
	while (1)
	{
		
		lcd_set_cursor_mode(CURSOR_BLINK);
 152:	8f e0       	ldi	r24, 0x0F	; 15
 154:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_set_cursor_mode>
		delay_s(2);
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 91 00 	call	0x122	; 0x122 <delay_s>
		lcd_set_cursor_mode(CURSOR_ON);
 15e:	8e e0       	ldi	r24, 0x0E	; 14
 160:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_set_cursor_mode>
		delay_s(2);
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	0e 94 91 00 	call	0x122	; 0x122 <delay_s>
		lcd_set_cursor_mode(CURSOR_OFF);
 16a:	8c e0       	ldi	r24, 0x0C	; 12
 16c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_set_cursor_mode>
		delay_s(2);
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	0e 94 91 00 	call	0x122	; 0x122 <delay_s>
 176:	ed cf       	rjmp	.-38     	; 0x152 <main+0x4>

00000178 <write_4bit_msb>:
 *	data: 4 bits of data
 */
static void write_4bit_msb(uint8_t data)
{
	//write data
	SET_BIT_LEVELS(PORTF, 0x0F, data);	
 178:	91 b3       	in	r25, 0x11	; 17
 17a:	9f 70       	andi	r25, 0x0F	; 15
 17c:	80 7f       	andi	r24, 0xF0	; 240
 17e:	89 2b       	or	r24, r25
 180:	81 bb       	out	0x11, r24	; 17
	// generate pulse on the Enable pin
	SET_BIT(PORTD, 7);
 182:	5f 9a       	sbi	0x0b, 7	; 11
	delay_1_micros();
 184:	0e 94 6d 00 	call	0xda	; 0xda <delay_1_micros>
	CLR_BIT(PORTD, 7);
 188:	5f 98       	cbi	0x0b, 7	; 11
 18a:	08 95       	ret

0000018c <lcd_write>:
 * parameter:
 *	lcd_reg: register to communicate with (Instruction or Data register)
 *	data: 8-bit instruction or data (character)
 */
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 18c:	cf 93       	push	r28
 18e:	c6 2f       	mov	r28, r22
	// select register
	if (lcd_reg == INSTRUCTION) {
 190:	81 11       	cpse	r24, r1
 192:	02 c0       	rjmp	.+4      	; 0x198 <lcd_write+0xc>
		CLR_BIT(PORTD, 6);	// Instruction Register
 194:	5e 98       	cbi	0x0b, 6	; 11
 196:	01 c0       	rjmp	.+2      	; 0x19a <lcd_write+0xe>
	} else {
		SET_BIT(PORTD, 6);	// Data Register
 198:	5e 9a       	sbi	0x0b, 6	; 11
	}
	// write data
	write_4bit_msb(data);
 19a:	8c 2f       	mov	r24, r28
 19c:	0e 94 bc 00 	call	0x178	; 0x178 <write_4bit_msb>
	write_4bit_msb(data << 4);
 1a0:	8c 2f       	mov	r24, r28
 1a2:	82 95       	swap	r24
 1a4:	80 7f       	andi	r24, 0xF0	; 240
 1a6:	0e 94 bc 00 	call	0x178	; 0x178 <write_4bit_msb>
	delay_micros(45);
 1aa:	8d e2       	ldi	r24, 0x2D	; 45
 1ac:	0e 94 74 00 	call	0xe8	; 0xe8 <delay_micros>
}
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <lcd_clear>:
/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	lcd_write(INSTRUCTION, 0x01);
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_write>
	delay_ms(2);
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	0e 94 84 00 	call	0x108	; 0x108 <delay_ms>
 1c2:	08 95       	ret

000001c4 <lcd_set_cursor_mode>:
 */
void lcd_set_cursor_mode(enum lcd_cursor mode)
{
	uint8_t cursor_mode;
	cursor_mode = 0x0C | mode;
	lcd_write(INSTRUCTION, cursor_mode);
 1c4:	68 2f       	mov	r22, r24
 1c6:	6c 60       	ori	r22, 0x0C	; 12
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_write>
 1ce:	08 95       	ret

000001d0 <lcd_init>:
 *	- configuration of LCD communication
 */
void lcd_init(void)
{
	// PF4-PF7 (A3-A0) as outputs (LCD D4-D7)
	DDRF = 0xF0;
 1d0:	80 ef       	ldi	r24, 0xF0	; 240
 1d2:	80 bb       	out	0x10, r24	; 16
	// PD6 & PD7 (D12 & D6) as outputs (LCD RS & LCD E)
	DDRD = 0xC0;
 1d4:	80 ec       	ldi	r24, 0xC0	; 192
 1d6:	8a b9       	out	0x0a, r24	; 10
	
	// wait more than 15 ms after power-up!
	delay_ms(20);
 1d8:	84 e1       	ldi	r24, 0x14	; 20
 1da:	0e 94 84 00 	call	0x108	; 0x108 <delay_ms>
	// select Instruction Register
	CLR_BIT(PORTD, 6);
 1de:	5e 98       	cbi	0x0b, 6	; 11

	// Function Set: 8 bit data interface
	write_4bit_msb(0x30);
 1e0:	80 e3       	ldi	r24, 0x30	; 48
 1e2:	0e 94 bc 00 	call	0x178	; 0x178 <write_4bit_msb>
	delay_ms(10);
 1e6:	8a e0       	ldi	r24, 0x0A	; 10
 1e8:	0e 94 84 00 	call	0x108	; 0x108 <delay_ms>
	write_4bit_msb(0x30);
 1ec:	80 e3       	ldi	r24, 0x30	; 48
 1ee:	0e 94 bc 00 	call	0x178	; 0x178 <write_4bit_msb>
	delay_ms(10);
 1f2:	8a e0       	ldi	r24, 0x0A	; 10
 1f4:	0e 94 84 00 	call	0x108	; 0x108 <delay_ms>
	write_4bit_msb(0x30);
 1f8:	80 e3       	ldi	r24, 0x30	; 48
 1fa:	0e 94 bc 00 	call	0x178	; 0x178 <write_4bit_msb>
	delay_ms(10);
 1fe:	8a e0       	ldi	r24, 0x0A	; 10
 200:	0e 94 84 00 	call	0x108	; 0x108 <delay_ms>

	// Function Set: switch to 4 bit data interface
	write_4bit_msb(0x20);
 204:	80 e2       	ldi	r24, 0x20	; 32
 206:	0e 94 bc 00 	call	0x178	; 0x178 <write_4bit_msb>
	delay_micros(45);
 20a:	8d e2       	ldi	r24, 0x2D	; 45
 20c:	0e 94 74 00 	call	0xe8	; 0xe8 <delay_micros>

	// Function Set: 4 bit data interface, 2 lines, font 5x10
	lcd_write(INSTRUCTION, 0x28);		
 210:	68 e2       	ldi	r22, 0x28	; 40
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_write>

	// Display on, no cursor
	lcd_set_cursor_mode(CURSOR_OFF);
 218:	8c e0       	ldi	r24, 0x0C	; 12
 21a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_set_cursor_mode>

	// clear display
	lcd_clear();
 21e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_clear>

	// Entry Mode Set: incremental cursor movement, no display shift
	lcd_write(INSTRUCTION, 0x06);
 222:	66 e0       	ldi	r22, 0x06	; 6
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_write>
 22a:	08 95       	ret

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
