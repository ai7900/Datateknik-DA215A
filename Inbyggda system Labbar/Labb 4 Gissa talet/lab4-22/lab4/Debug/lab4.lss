
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000278  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f7a  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b3e  00000000  00000000  00001282  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000578  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00002338  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005bb  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016f  00000000  00000000  000029a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002b12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ee ea       	ldi	r30, 0xAE	; 174
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 30       	cpi	r26, 0x00	; 0
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  d2:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <delay_1_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	RET
  e6:	08 95       	ret

000000e8 <delay_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	DEC R24
 100:	8a 95       	dec	r24
	CPI R24, 0			; more loops to do?
 102:	80 30       	cpi	r24, 0x00	; 0
	BRNE delay_micros	;	continue!
 104:	89 f7       	brne	.-30     	; 0xe8 <delay_micros>
	RET
 106:	08 95       	ret

00000108 <delay_ms>:
; Delay of X ms
;	LDI + RCALL = 4 cycles
;==============================================================================
.global delay_ms	
delay_ms:
	MOV R18, R24
 108:	28 2f       	mov	r18, r24

0000010a <loop_dms>:
loop_dms:
	LDI R24, 250
 10a:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 10c:	ed df       	rcall	.-38     	; 0xe8 <delay_micros>
	LDI R24, 250
 10e:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 110:	eb df       	rcall	.-42     	; 0xe8 <delay_micros>
	LDI R24, 250
 112:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 114:	e9 df       	rcall	.-46     	; 0xe8 <delay_micros>
	LDI R24, 250
 116:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 118:	e7 df       	rcall	.-50     	; 0xe8 <delay_micros>
	DEC R18
 11a:	2a 95       	dec	r18
	CPI R18, 0			; more loops to do?
 11c:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 11e:	a9 f7       	brne	.-22     	; 0x10a <loop_dms>
	RET
 120:	08 95       	ret

00000122 <delay_s>:
;==============================================================================
; Delay seconds. R24 input.
;==============================================================================
.global delay_s	
delay_s:
	MOV R19, R24
 122:	38 2f       	mov	r19, r24

00000124 <loop_s>:
loop_s:
	LDI R24, 250
 124:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 126:	f0 df       	rcall	.-32     	; 0x108 <delay_ms>
	LDI R24, 250
 128:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 12a:	ee df       	rcall	.-36     	; 0x108 <delay_ms>
	LDI R24, 250
 12c:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 12e:	ec df       	rcall	.-40     	; 0x108 <delay_ms>
	LDI R24, 250
 130:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 132:	ea df       	rcall	.-44     	; 0x108 <delay_ms>
	DEC 18
 134:	2a 95       	dec	r18
	CPI R19, 0
 136:	30 30       	cpi	r19, 0x00	; 0
	BRNE loop_s
 138:	a9 f7       	brne	.-22     	; 0x124 <loop_s>
	RET
 13a:	08 95       	ret

0000013c <main>:
	ER TESTKOD. GLÖM INTE ATT AVKOMMENTERA HUVUDPROGRAMMET
******************************************************************************/

	while (1)
	{
		lcd_set_cursor_mode(CURSOR_BLINK);
 13c:	8f e0       	ldi	r24, 0x0F	; 15
 13e:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_set_cursor_mode>
		delay_s(2);
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 91 00 	call	0x122	; 0x122 <delay_s>
		lcd_set_cursor_mode(CURSOR_ON);
 148:	8e e0       	ldi	r24, 0x0E	; 14
 14a:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_set_cursor_mode>
		delay_s(2);
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	0e 94 91 00 	call	0x122	; 0x122 <delay_s>
		lcd_set_cursor_mode(CURSOR_OFF);
 154:	8c e0       	ldi	r24, 0x0C	; 12
 156:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_set_cursor_mode>
		delay_s(2);
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	0e 94 91 00 	call	0x122	; 0x122 <delay_s>
 160:	ed cf       	rjmp	.-38     	; 0x13c <main>

00000162 <write_4bit_msb>:
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	lcd_write(INSTRUCTION, 0x01);
	delay_ms(2);
 162:	91 b3       	in	r25, 0x11	; 17
 164:	9f 70       	andi	r25, 0x0F	; 15
 166:	80 7f       	andi	r24, 0xF0	; 240
 168:	89 2b       	or	r24, r25
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	5f 9a       	sbi	0x0b, 7	; 11
 16e:	0e 94 6d 00 	call	0xda	; 0xda <delay_1_micros>
 172:	5f 98       	cbi	0x0b, 7	; 11
 174:	08 95       	ret

00000176 <lcd_write>:
 176:	cf 93       	push	r28
 178:	c6 2f       	mov	r28, r22
 17a:	81 11       	cpse	r24, r1
 17c:	02 c0       	rjmp	.+4      	; 0x182 <lcd_write+0xc>
 17e:	5e 98       	cbi	0x0b, 6	; 11
 180:	01 c0       	rjmp	.+2      	; 0x184 <lcd_write+0xe>
 182:	5e 9a       	sbi	0x0b, 6	; 11
 184:	8c 2f       	mov	r24, r28
 186:	0e 94 b1 00 	call	0x162	; 0x162 <write_4bit_msb>
 18a:	8c 2f       	mov	r24, r28
 18c:	82 95       	swap	r24
 18e:	80 7f       	andi	r24, 0xF0	; 240
 190:	0e 94 b1 00 	call	0x162	; 0x162 <write_4bit_msb>
 194:	8d e2       	ldi	r24, 0x2D	; 45
 196:	0e 94 74 00 	call	0xe8	; 0xe8 <delay_micros>
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <lcd_set_cursor_mode>:
 */
void lcd_set_cursor_mode(enum lcd_cursor mode)
{
	uint8_t cursor_mode;
	cursor_mode = 0x0C | mode;
	lcd_write(INSTRUCTION, cursor_mode);
 19e:	68 2f       	mov	r22, r24
 1a0:	6c 60       	ori	r22, 0x0C	; 12
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_write>
 1a8:	08 95       	ret

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
