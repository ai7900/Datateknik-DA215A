
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000c80  00000cf4  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005b  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000128  00000000  00000000  00000d50  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002249  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000e53  00000000  00000000  000030c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000a66  00000000  00000000  00003f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000023c  00000000  00000000  0000497c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000466  00000000  00000000  00004bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000007c2  00000000  00000000  0000501e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b8  00000000  00000000  000057e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000c7a  00000c7a  00000cee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005898  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000062  0000081e  0000081e  00000892  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.hmi_init 0000000a  00000c68  00000c68  00000cdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.output_msg 00000052  00000990  00000990  00000a04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.write_4bit_msb 0000001c  00000c1c  00000c1c  00000c90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_write 00000030  00000b7e  00000b7e  00000bf2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_clear 00000010  00000c4c  00000c4c  00000cc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_set_cursor_mode 0000000c  00000c5c  00000c5c  00000cd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lcd_init 00000060  00000880  00000880  000008f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.lcd_set_cursor_pos 00000014  00000c38  00000c38  00000cac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.lcd_write_str 00000038  00000aa2  00000aa2  00000b16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data 00000026  00000108  00000108  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.main    00000104  00000582  00000582  000005f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.numkey_init 00000008  00000c72  00000c72  00000ce6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.numkey_read 00000056  0000093a  0000093a  000009ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .progmemx.data.key_map 0000000c  0000012e  0000012e  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 28 .text.__vector_29 0000003a  00000a68  00000a68  00000adc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.temp_init 00000040  00000a28  00000a28  00000a9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.temp_read_celsius 00000064  000007ba  000007ba  0000082e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.temp_read_fahrenheit 0000005a  000008e0  000008e0  00000954  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .data.adc     00000002  00800100  00000c7e  00000cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 33 .text.libgcc.div 00000028  00000bae  00000bae  00000c22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.libgcc.mul 0000001e  00000bfe  00000bfe  00000c72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.libgcc.div 00000028  00000bd6  00000bd6  00000c4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.avrlibc 00000046  000009e2  000009e2  00000a56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.avrlibc 00000448  0000013a  0000013a  000001ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.avrlibc 00000036  00000b12  00000b12  00000b86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.avrlibc 00000078  00000742  00000742  000007b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc 000000bc  00000686  00000686  000006fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.libgcc.prologue 00000038  00000ada  00000ada  00000b4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.libgcc.prologue 00000036  00000b48  00000b48  00000bbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
   8:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
   c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  10:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  14:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  18:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  1c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  20:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  24:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  28:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  2c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  30:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  34:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  38:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  3c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  40:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  44:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  48:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  4c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  50:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  54:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  58:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  5c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  60:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  64:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  68:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  6c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  70:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  74:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__vector_29>
  78:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  7c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  80:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  84:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  88:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  8c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  90:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  94:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  98:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  9c:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  a0:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  a4:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>
  a8:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__bad_interrupt>

000000ac <.dinit>:
  ac:	01 00       	.word	0x0001	; ????
  ae:	01 02       	muls	r16, r17
  b0:	00 0c       	add	r0, r0
  b2:	7e 00       	.word	0x007e	; ????

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	da e0       	ldi	r29, 0x0A	; 10
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	ec ea       	ldi	r30, 0xAC	; 172
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	17 c0       	rjmp	.+46     	; 0xf6 <__do_clear_bss+0x8>
  c8:	b5 91       	lpm	r27, Z+
  ca:	a5 91       	lpm	r26, Z+
  cc:	35 91       	lpm	r19, Z+
  ce:	25 91       	lpm	r18, Z+
  d0:	05 91       	lpm	r16, Z+
  d2:	07 fd       	sbrc	r16, 7
  d4:	0c c0       	rjmp	.+24     	; 0xee <__do_clear_bss>
  d6:	95 91       	lpm	r25, Z+
  d8:	85 91       	lpm	r24, Z+
  da:	ef 01       	movw	r28, r30
  dc:	f9 2f       	mov	r31, r25
  de:	e8 2f       	mov	r30, r24
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a2 17       	cp	r26, r18
  e6:	b3 07       	cpc	r27, r19
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0x20>
  ea:	fe 01       	movw	r30, r28
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <__do_clear_bss+0x8>

000000ee <__do_clear_bss>:
  ee:	1d 92       	st	X+, r1
  f0:	a2 17       	cp	r26, r18
  f2:	b3 07       	cpc	r27, r19
  f4:	e1 f7       	brne	.-8      	; 0xee <__do_clear_bss>
  f6:	e3 3b       	cpi	r30, 0xB3	; 179
  f8:	f4 07       	cpc	r31, r20
  fa:	31 f7       	brne	.-52     	; 0xc8 <__do_copy_data+0x8>
  fc:	0e 94 c1 02 	call	0x582	; 0x582 <main>
 100:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>

Disassembly of section .text:

00000c7a <__bad_interrupt>:
 c7a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text:

0000081e <delay_1_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	RET
 82a:	08 95       	ret

0000082c <delay_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	DEC R24
 844:	8a 95       	dec	r24
	CPI R24, 0			; more loops to do?
 846:	80 30       	cpi	r24, 0x00	; 0
	BRNE delay_micros	;	continue!
 848:	89 f7       	brne	.-30     	; 0x82c <delay_micros>
	RET
 84a:	08 95       	ret

0000084c <delay_ms>:
; Delay of X ms
;	LDI + RCALL = 4 cycles
;==============================================================================
.global delay_ms	
delay_ms:
	MOV R18, R24
 84c:	28 2f       	mov	r18, r24

0000084e <loop_dms>:
loop_dms:
	LDI R24, 250
 84e:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 850:	ed df       	rcall	.-38     	; 0x82c <delay_micros>
	LDI R24, 250
 852:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 854:	eb df       	rcall	.-42     	; 0x82c <delay_micros>
	LDI R24, 250
 856:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 858:	e9 df       	rcall	.-46     	; 0x82c <delay_micros>
	LDI R24, 250
 85a:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 85c:	e7 df       	rcall	.-50     	; 0x82c <delay_micros>
	DEC R18
 85e:	2a 95       	dec	r18
	CPI R18, 0			; more loops to do?
 860:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 862:	a9 f7       	brne	.-22     	; 0x84e <loop_dms>
	RET
 864:	08 95       	ret

00000866 <delay_s>:
;==============================================================================
; Delay seconds. R24 input.
;==============================================================================
.global delay_s	
delay_s:
	MOV R19, R24
 866:	38 2f       	mov	r19, r24

00000868 <loop_s>:
loop_s:
	LDI R24, 250
 868:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 86a:	f0 df       	rcall	.-32     	; 0x84c <delay_ms>
	LDI R24, 250
 86c:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 86e:	ee df       	rcall	.-36     	; 0x84c <delay_ms>
	LDI R24, 250
 870:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 872:	ec df       	rcall	.-40     	; 0x84c <delay_ms>
	LDI R24, 250
 874:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 876:	ea df       	rcall	.-44     	; 0x84c <delay_ms>
	DEC R19
 878:	3a 95       	dec	r19
	CPI R19, 0
 87a:	30 30       	cpi	r19, 0x00	; 0
	BRNE loop_s
 87c:	a9 f7       	brne	.-22     	; 0x868 <loop_s>
	RET
 87e:	08 95       	ret

Disassembly of section .text.hmi_init:

00000c68 <hmi_init>:
 *	- init numeric keyboard
 *	- init LCD
 */
void hmi_init(void)
{
	numkey_init();
 c68:	0e 94 39 06 	call	0xc72	; 0xc72 <numkey_init>
	lcd_init();
 c6c:	0e 94 40 04 	call	0x880	; 0x880 <lcd_init>
 c70:	08 95       	ret

Disassembly of section .text.output_msg:

00000990 <output_msg>:
			break;
		}
	}
	// return result from conversion
	*p_nr = result;
}
 990:	6f 92       	push	r6
 992:	7f 92       	push	r7
 994:	8f 92       	push	r8
 996:	cf 92       	push	r12
 998:	df 92       	push	r13
 99a:	ef 92       	push	r14
 99c:	0f 93       	push	r16
 99e:	3b 01       	movw	r6, r22
 9a0:	88 2e       	mov	r8, r24
 9a2:	69 01       	movw	r12, r18
 9a4:	e4 2e       	mov	r14, r20
 9a6:	8c e0       	ldi	r24, 0x0C	; 12
 9a8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <lcd_set_cursor_mode>
 9ac:	0e 94 26 06 	call	0xc4c	; 0xc4c <lcd_clear>
 9b0:	88 2d       	mov	r24, r8
 9b2:	b3 01       	movw	r22, r6
 9b4:	0e 94 51 05 	call	0xaa2	; 0xaa2 <lcd_write_str>
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	0e 94 1c 06 	call	0xc38	; 0xc38 <lcd_set_cursor_pos>
 9c0:	8e 2d       	mov	r24, r14
 9c2:	b6 01       	movw	r22, r12
 9c4:	0e 94 51 05 	call	0xaa2	; 0xaa2 <lcd_write_str>
 9c8:	00 23       	and	r16, r16
 9ca:	19 f0       	breq	.+6      	; 0x9d2 <output_msg+0x42>
 9cc:	80 2f       	mov	r24, r16
 9ce:	0e 94 33 04 	call	0x866	; 0x866 <delay_s>
 9d2:	0f 91       	pop	r16
 9d4:	ef 90       	pop	r14
 9d6:	df 90       	pop	r13
 9d8:	cf 90       	pop	r12
 9da:	8f 90       	pop	r8
 9dc:	7f 90       	pop	r7
 9de:	6f 90       	pop	r6
 9e0:	08 95       	ret

Disassembly of section .text.write_4bit_msb:

00000c1c <write_4bit_msb>:
*	data: 4 bits of data
*/
static void write_4bit_msb(uint8_t data)
{
	//write data
	SET_BIT_LEVELS(PORTF, 0x0F, data);
 c1c:	91 b3       	in	r25, 0x11	; 17
 c1e:	9f 70       	andi	r25, 0x0F	; 15
 c20:	80 7f       	andi	r24, 0xF0	; 240
 c22:	89 2b       	or	r24, r25
 c24:	81 bb       	out	0x11, r24	; 17
	// generate pulse on the Enable pin
	SET_BIT(PORTD, 7);
 c26:	8b b1       	in	r24, 0x0b	; 11
 c28:	80 68       	ori	r24, 0x80	; 128
 c2a:	8b b9       	out	0x0b, r24	; 11
	delay_1_micros();
 c2c:	0e 94 0f 04 	call	0x81e	; 0x81e <delay_1_micros>
	CLR_BIT(PORTD, 7);
 c30:	8b b1       	in	r24, 0x0b	; 11
 c32:	8f 77       	andi	r24, 0x7F	; 127
 c34:	8b b9       	out	0x0b, r24	; 11
 c36:	08 95       	ret

Disassembly of section .text.lcd_write:

00000b7e <lcd_write>:
* parameter:
*	lcd_reg: register to communicate with (Instruction or Data register)
*	data: 8-bit instruction or data (character)
*/
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 b7e:	cf 93       	push	r28
 b80:	c6 2f       	mov	r28, r22
	// select register
	if (lcd_reg == INSTRUCTION) {
 b82:	81 11       	cpse	r24, r1
 b84:	04 c0       	rjmp	.+8      	; 0xb8e <lcd_write+0x10>
		CLR_BIT(PORTD, 6);	// Instruction Register
 b86:	8b b1       	in	r24, 0x0b	; 11
 b88:	8f 7b       	andi	r24, 0xBF	; 191
 b8a:	8b b9       	out	0x0b, r24	; 11
 b8c:	03 c0       	rjmp	.+6      	; 0xb94 <lcd_write+0x16>
		} else {
		SET_BIT(PORTD, 6);	// Data Register
 b8e:	8b b1       	in	r24, 0x0b	; 11
 b90:	80 64       	ori	r24, 0x40	; 64
 b92:	8b b9       	out	0x0b, r24	; 11
	}
	// write data
	write_4bit_msb(data);
 b94:	8c 2f       	mov	r24, r28
 b96:	0e 94 0e 06 	call	0xc1c	; 0xc1c <write_4bit_msb>
	write_4bit_msb(data << 4);
 b9a:	8c 2f       	mov	r24, r28
 b9c:	82 95       	swap	r24
 b9e:	80 7f       	andi	r24, 0xF0	; 240
 ba0:	0e 94 0e 06 	call	0xc1c	; 0xc1c <write_4bit_msb>
	delay_micros(45);
 ba4:	8d e2       	ldi	r24, 0x2D	; 45
 ba6:	0e 94 16 04 	call	0x82c	; 0x82c <delay_micros>
}
 baa:	cf 91       	pop	r28
 bac:	08 95       	ret

Disassembly of section .text.lcd_clear:

00000c4c <lcd_clear>:
/*
* Clears the LCD and moves the cursor to position row 0, column 0.
*/
void lcd_clear(void)
{
	lcd_write(INSTRUCTION, 0x01);
 c4c:	61 e0       	ldi	r22, 0x01	; 1
 c4e:	80 e0       	ldi	r24, 0x00	; 0
 c50:	0e 94 bf 05 	call	0xb7e	; 0xb7e <lcd_write>
	delay_ms(2);
 c54:	82 e0       	ldi	r24, 0x02	; 2
 c56:	0e 94 26 04 	call	0x84c	; 0x84c <delay_ms>
 c5a:	08 95       	ret

Disassembly of section .text.lcd_set_cursor_mode:

00000c5c <lcd_set_cursor_mode>:
*	mode: cursor mode
*/
void lcd_set_cursor_mode(enum lcd_cursor mode)
{
	uint8_t cursor_mode;
	cursor_mode = 0x0C | mode;
 c5c:	68 2f       	mov	r22, r24
 c5e:	6c 60       	ori	r22, 0x0C	; 12
	lcd_write(INSTRUCTION, cursor_mode);
 c60:	80 e0       	ldi	r24, 0x00	; 0
 c62:	0e 94 bf 05 	call	0xb7e	; 0xb7e <lcd_write>
 c66:	08 95       	ret

Disassembly of section .text.lcd_init:

00000880 <lcd_init>:
*	- configuration of LCD communication
*/
void lcd_init(void)
{
	// PF4-PF7 (A3-A0) as outputs (LCD D4-D7)
	DDRF = 0xF0;
 880:	80 ef       	ldi	r24, 0xF0	; 240
 882:	80 bb       	out	0x10, r24	; 16
	// PD6 & PD7 (D12 & D6) as outputs (LCD RS & LCD E)
	DDRD = 0xC0;
 884:	80 ec       	ldi	r24, 0xC0	; 192
 886:	8a b9       	out	0x0a, r24	; 10
	
	// wait more than 15 ms after power-up!
	delay_ms(20);
 888:	84 e1       	ldi	r24, 0x14	; 20
 88a:	0e 94 26 04 	call	0x84c	; 0x84c <delay_ms>
	// select Instruction Register
	CLR_BIT(PORTD, 6);
 88e:	8b b1       	in	r24, 0x0b	; 11
 890:	8f 7b       	andi	r24, 0xBF	; 191
 892:	8b b9       	out	0x0b, r24	; 11

	// Function Set: 8 bit data interface
	write_4bit_msb(0x30);
 894:	80 e3       	ldi	r24, 0x30	; 48
 896:	0e 94 0e 06 	call	0xc1c	; 0xc1c <write_4bit_msb>
	delay_ms(10);
 89a:	8a e0       	ldi	r24, 0x0A	; 10
 89c:	0e 94 26 04 	call	0x84c	; 0x84c <delay_ms>
	write_4bit_msb(0x30);
 8a0:	80 e3       	ldi	r24, 0x30	; 48
 8a2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <write_4bit_msb>
	delay_ms(10);
 8a6:	8a e0       	ldi	r24, 0x0A	; 10
 8a8:	0e 94 26 04 	call	0x84c	; 0x84c <delay_ms>
	write_4bit_msb(0x30);
 8ac:	80 e3       	ldi	r24, 0x30	; 48
 8ae:	0e 94 0e 06 	call	0xc1c	; 0xc1c <write_4bit_msb>
	delay_ms(10);
 8b2:	8a e0       	ldi	r24, 0x0A	; 10
 8b4:	0e 94 26 04 	call	0x84c	; 0x84c <delay_ms>

	// Function Set: switch to 4 bit data interface
	write_4bit_msb(0x20);
 8b8:	80 e2       	ldi	r24, 0x20	; 32
 8ba:	0e 94 0e 06 	call	0xc1c	; 0xc1c <write_4bit_msb>
	delay_micros(45);
 8be:	8d e2       	ldi	r24, 0x2D	; 45
 8c0:	0e 94 16 04 	call	0x82c	; 0x82c <delay_micros>

	// Function Set: 4 bit data interface, 2 lines, font 5x10
	lcd_write(INSTRUCTION, 0x28);
 8c4:	68 e2       	ldi	r22, 0x28	; 40
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	0e 94 bf 05 	call	0xb7e	; 0xb7e <lcd_write>

	// Display on, no cursor
	lcd_set_cursor_mode(CURSOR_OFF);
 8cc:	8c e0       	ldi	r24, 0x0C	; 12
 8ce:	0e 94 2e 06 	call	0xc5c	; 0xc5c <lcd_set_cursor_mode>

	// clear display
	lcd_clear();
 8d2:	0e 94 26 06 	call	0xc4c	; 0xc4c <lcd_clear>

	// Entry Mode Set: incremental cursor movement, no display shift
	lcd_write(INSTRUCTION, 0x06);
 8d6:	66 e0       	ldi	r22, 0x06	; 6
 8d8:	80 e0       	ldi	r24, 0x00	; 0
 8da:	0e 94 bf 05 	call	0xb7e	; 0xb7e <lcd_write>
 8de:	08 95       	ret

Disassembly of section .text.lcd_set_cursor_pos:

00000c38 <lcd_set_cursor_pos>:
*	col: 0 is the first column, 15 is the last visible column
*/
void lcd_set_cursor_pos(uint8_t row, uint8_t col)
{
	uint8_t cursor_pos;
	cursor_pos = 0x80 | (row << 6) | col;
 c38:	20 e4       	ldi	r18, 0x40	; 64
 c3a:	82 9f       	mul	r24, r18
 c3c:	c0 01       	movw	r24, r0
 c3e:	11 24       	eor	r1, r1
 c40:	68 2b       	or	r22, r24
 c42:	60 68       	ori	r22, 0x80	; 128
	lcd_write(INSTRUCTION, cursor_pos);
 c44:	80 e0       	ldi	r24, 0x00	; 0
 c46:	0e 94 bf 05 	call	0xb7e	; 0xb7e <lcd_write>
 c4a:	08 95       	ret

Disassembly of section .text.lcd_write_str:

00000aa2 <lcd_write_str>:
*
* parameter:
*	p_str: pointer to the string's first character
*/
void lcd_write_str(const char *p_str)
{
 aa2:	cf 92       	push	r12
 aa4:	df 92       	push	r13
 aa6:	ef 92       	push	r14
 aa8:	cf 93       	push	r28
 aaa:	6b 01       	movw	r12, r22
 aac:	e8 2e       	mov	r14, r24
	uint8_t i =0;
 aae:	c0 e0       	ldi	r28, 0x00	; 0
	while (p_str[i] !='\0')
 ab0:	04 c0       	rjmp	.+8      	; 0xaba <lcd_write_str+0x18>
	{
		lcd_write(DATA, p_str[i]);
 ab2:	81 e0       	ldi	r24, 0x01	; 1
 ab4:	0e 94 bf 05 	call	0xb7e	; 0xb7e <lcd_write>
		i++;
 ab8:	cf 5f       	subi	r28, 0xFF	; 255
*	p_str: pointer to the string's first character
*/
void lcd_write_str(const char *p_str)
{
	uint8_t i =0;
	while (p_str[i] !='\0')
 aba:	ae 2d       	mov	r26, r14
 abc:	c6 01       	movw	r24, r12
 abe:	8c 0f       	add	r24, r28
 ac0:	91 1d       	adc	r25, r1
 ac2:	a1 1d       	adc	r26, r1
 ac4:	fc 01       	movw	r30, r24
 ac6:	64 91       	lpm	r22, Z
 ac8:	a7 fd       	sbrc	r26, 7
 aca:	60 81       	ld	r22, Z
 acc:	61 11       	cpse	r22, r1
 ace:	f1 cf       	rjmp	.-30     	; 0xab2 <lcd_write_str+0x10>
	{
		lcd_write(DATA, p_str[i]);
		i++;
	}
 ad0:	cf 91       	pop	r28
 ad2:	ef 90       	pop	r14
 ad4:	df 90       	pop	r13
 ad6:	cf 90       	pop	r12
 ad8:	08 95       	ret

Disassembly of section .text.main:

00000582 <main>:
};

typedef enum state state_t;

int main(void)
{
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
 58a:	61 97       	sbiw	r28, 0x11	; 17
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	f8 94       	cli
 590:	de bf       	out	0x3e, r29	; 62
 592:	0f be       	out	0x3f, r0	; 63
 594:	cd bf       	out	0x3d, r28	; 61
	// Initializations 
	hmi_init();
 596:	0e 94 34 06 	call	0xc68	; 0xc68 <hmi_init>
	numkey_init();
 59a:	0e 94 39 06 	call	0xc72	; 0xc72 <numkey_init>
	temp_init();
 59e:	0e 94 14 05 	call	0xa28	; 0xa28 <temp_init>
	
	char key;
	char temp_str[17]; 
	
	state_t currentState = SHOW_TEMP_C;
 5a2:	10 e0       	ldi	r17, 0x00	; 0
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <main+0x26>
			
			key = numkey_read();
			switch (key)
			{
				case '1':
				nextState = SHOW_TEMP_C;
 5a6:	10 e0       	ldi	r17, 0x00	; 0
	

	// Main program
    while(1)
    {
        switch (currentState)
 5a8:	11 30       	cpi	r17, 0x01	; 1
 5aa:	e9 f0       	breq	.+58     	; 0x5e6 <main+0x64>
 5ac:	18 f0       	brcs	.+6      	; 0x5b4 <main+0x32>
 5ae:	12 30       	cpi	r17, 0x02	; 2
 5b0:	99 f1       	breq	.+102    	; 0x618 <main+0x96>
 5b2:	51 c0       	rjmp	.+162    	; 0x656 <main+0xd4>
        {
	        case SHOW_TEMP_C:
			sprintf(temp_str,"%u%cC",temp_read_celsius(),0xDF);
 5b4:	0e 94 dd 03 	call	0x7ba	; 0x7ba <temp_read_celsius>
 5b8:	1f 92       	push	r1
 5ba:	9f ed       	ldi	r25, 0xDF	; 223
 5bc:	9f 93       	push	r25
 5be:	1f 92       	push	r1
 5c0:	8f 93       	push	r24
 5c2:	88 e0       	ldi	r24, 0x08	; 8
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	a0 e0       	ldi	r26, 0x00	; 0
 5c8:	af 93       	push	r26
 5ca:	9f 93       	push	r25
 5cc:	8f 93       	push	r24
 5ce:	ce 01       	movw	r24, r28
 5d0:	01 96       	adiw	r24, 0x01	; 1
 5d2:	9f 93       	push	r25
 5d4:	8f 93       	push	r24
 5d6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <sprintf>
			
		
	        break;
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	f8 94       	cli
 5de:	de bf       	out	0x3e, r29	; 62
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	cd bf       	out	0x3d, r28	; 61
 5e4:	38 c0       	rjmp	.+112    	; 0x656 <main+0xd4>
			case SHOW_TEMP_F:
			sprintf(temp_str,"%u%cF",temp_read_fahrenheit(),0xDF);
 5e6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <temp_read_fahrenheit>
 5ea:	1f 92       	push	r1
 5ec:	9f ed       	ldi	r25, 0xDF	; 223
 5ee:	9f 93       	push	r25
 5f0:	1f 92       	push	r1
 5f2:	8f 93       	push	r24
 5f4:	8e e0       	ldi	r24, 0x0E	; 14
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	a0 e0       	ldi	r26, 0x00	; 0
 5fa:	af 93       	push	r26
 5fc:	9f 93       	push	r25
 5fe:	8f 93       	push	r24
 600:	ce 01       	movw	r24, r28
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	9f 93       	push	r25
 606:	8f 93       	push	r24
 608:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <sprintf>
			
			
			break;
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	f8 94       	cli
 610:	de bf       	out	0x3e, r29	; 62
 612:	0f be       	out	0x3f, r0	; 63
 614:	cd bf       	out	0x3d, r28	; 61
 616:	1f c0       	rjmp	.+62     	; 0x656 <main+0xd4>
			case SHOW_TEMP_CF:
			sprintf(temp_str,"%u%cC, %u%cF",temp_read_celsius(),0xDF,temp_read_fahrenheit(),0xDF);
 618:	0e 94 70 04 	call	0x8e0	; 0x8e0 <temp_read_fahrenheit>
 61c:	08 2f       	mov	r16, r24
 61e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <temp_read_celsius>
 622:	1f 92       	push	r1
 624:	9f ed       	ldi	r25, 0xDF	; 223
 626:	9f 93       	push	r25
 628:	1f 92       	push	r1
 62a:	0f 93       	push	r16
 62c:	1f 92       	push	r1
 62e:	9f 93       	push	r25
 630:	1f 92       	push	r1
 632:	8f 93       	push	r24
 634:	84 e1       	ldi	r24, 0x14	; 20
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	a0 e0       	ldi	r26, 0x00	; 0
 63a:	af 93       	push	r26
 63c:	9f 93       	push	r25
 63e:	8f 93       	push	r24
 640:	ce 01       	movw	r24, r28
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	9f 93       	push	r25
 646:	8f 93       	push	r24
 648:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <sprintf>
			

			break;
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	f8 94       	cli
 650:	de bf       	out	0x3e, r29	; 62
 652:	0f be       	out	0x3f, r0	; 63
 654:	cd bf       	out	0x3d, r28	; 61

        }
		output_msg("TEMPERATURE:", temp_str,0);
 656:	9e 01       	movw	r18, r28
 658:	2f 5f       	subi	r18, 0xFF	; 255
 65a:	3f 4f       	sbci	r19, 0xFF	; 255
 65c:	40 e8       	ldi	r20, 0x80	; 128
 65e:	00 e0       	ldi	r16, 0x00	; 0
 660:	61 e2       	ldi	r22, 0x21	; 33
 662:	71 e0       	ldi	r23, 0x01	; 1
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	0e 94 c8 04 	call	0x990	; 0x990 <output_msg>
			
			key = numkey_read();
 66a:	0e 94 9d 04 	call	0x93a	; 0x93a <numkey_read>
			switch (key)
 66e:	82 33       	cpi	r24, 0x32	; 50
 670:	31 f0       	breq	.+12     	; 0x67e <main+0xfc>
 672:	83 33       	cpi	r24, 0x33	; 51
 674:	31 f0       	breq	.+12     	; 0x682 <main+0x100>
 676:	81 33       	cpi	r24, 0x31	; 49
 678:	09 f0       	breq	.+2      	; 0x67c <main+0xfa>
 67a:	96 cf       	rjmp	.-212    	; 0x5a8 <main+0x26>
 67c:	94 cf       	rjmp	.-216    	; 0x5a6 <main+0x24>
			{
				case '1':
				nextState = SHOW_TEMP_C;
				break;
				case '2':
				nextState = SHOW_TEMP_F;
 67e:	11 e0       	ldi	r17, 0x01	; 1
				break;
 680:	93 cf       	rjmp	.-218    	; 0x5a8 <main+0x26>
				case '3':
				nextState = SHOW_TEMP_CF;
 682:	12 e0       	ldi	r17, 0x02	; 2
				break;
 684:	91 cf       	rjmp	.-222    	; 0x5a8 <main+0x26>

Disassembly of section .text.numkey_init:

00000c72 <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// PE6 (D7) as input (key pressed?)
	DDRE = 0x00;
 c72:	1d b8       	out	0x0d, r1	; 13
	// PB4-PB7 (D8-D11) as outputs (MUX and decoder)
	DDRB = 0xF0;
 c74:	80 ef       	ldi	r24, 0xF0	; 240
 c76:	84 b9       	out	0x04, r24	; 4
 c78:	08 95       	ret

Disassembly of section .text.numkey_read:

0000093a <numkey_read>:
 * return:
 *	If a key is pressed, then a character that represents the key is returned.
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
 93a:	0f 93       	push	r16
 93c:	1f 93       	push	r17
 93e:	cf 93       	push	r28
	uint8_t	i;
	for (i = 0; i < sizeof(key_map); i++)
 940:	c0 e0       	ldi	r28, 0x00	; 0
 942:	1f c0       	rjmp	.+62     	; 0x982 <numkey_read+0x48>
	{
		SET_BIT_LEVELS(PORTB,0x0F, i << 4); // skickar till portb
 944:	25 b1       	in	r18, 0x05	; 5
 946:	0c 2f       	mov	r16, r28
 948:	10 e0       	ldi	r17, 0x00	; 0
 94a:	c8 01       	movw	r24, r16
 94c:	82 95       	swap	r24
 94e:	92 95       	swap	r25
 950:	90 7f       	andi	r25, 0xF0	; 240
 952:	98 27       	eor	r25, r24
 954:	80 7f       	andi	r24, 0xF0	; 240
 956:	98 27       	eor	r25, r24
 958:	92 2f       	mov	r25, r18
 95a:	9f 70       	andi	r25, 0x0F	; 15
 95c:	89 2b       	or	r24, r25
 95e:	85 b9       	out	0x05, r24	; 5
		delay_ms(1);						// delay för knappstuds
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	0e 94 26 04 	call	0x84c	; 0x84c <delay_ms>
		if (PINE & 0b01000000)				// kolla på PINE,6 om == 1
 966:	66 9b       	sbis	0x0c, 6	; 12
 968:	0b c0       	rjmp	.+22     	; 0x980 <numkey_read+0x46>
		{
			return key_map[i];
 96a:	c8 01       	movw	r24, r16
 96c:	11 0f       	add	r17, r17
 96e:	aa 0b       	sbc	r26, r26
 970:	82 5d       	subi	r24, 0xD2	; 210
 972:	9e 4f       	sbci	r25, 0xFE	; 254
 974:	af 4f       	sbci	r26, 0xFF	; 255
 976:	fc 01       	movw	r30, r24
 978:	84 91       	lpm	r24, Z
 97a:	a7 fd       	sbrc	r26, 7
 97c:	80 81       	ld	r24, Z
 97e:	04 c0       	rjmp	.+8      	; 0x988 <numkey_read+0x4e>
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
	uint8_t	i;
	for (i = 0; i < sizeof(key_map); i++)
 980:	cf 5f       	subi	r28, 0xFF	; 255
 982:	cc 30       	cpi	r28, 0x0C	; 12
 984:	f8 f2       	brcs	.-66     	; 0x944 <numkey_read+0xa>
			//}
	}
	
	
	// no key was pressed!
	return NO_KEY;
 986:	80 e0       	ldi	r24, 0x00	; 0
 988:	cf 91       	pop	r28
 98a:	1f 91       	pop	r17
 98c:	0f 91       	pop	r16
 98e:	08 95       	ret

Disassembly of section .text.__vector_29:

00000a68 <__vector_29>:
/*
 * Interrupt Service Routine for the ADC.
 * The ISR will execute when a A/D conversion is complete.
 */
ISR(ADC_vect)
{
 a68:	1f 92       	push	r1
 a6a:	0f 92       	push	r0
 a6c:	0f b6       	in	r0, 0x3f	; 63
 a6e:	0f 92       	push	r0
 a70:	11 24       	eor	r1, r1
 a72:	2f 93       	push	r18
 a74:	8f 93       	push	r24
 a76:	9f 93       	push	r25
	// read ADC value
	unsigned char low,high;

	low = ADCL;
 a78:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
 a7c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

	adc = (high << 8 ) + low;
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	98 2f       	mov	r25, r24
 a84:	88 27       	eor	r24, r24
 a86:	82 0f       	add	r24, r18
 a88:	91 1d       	adc	r25, r1
 a8a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 a8e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 a92:	9f 91       	pop	r25
 a94:	8f 91       	pop	r24
 a96:	2f 91       	pop	r18
 a98:	0f 90       	pop	r0
 a9a:	0f be       	out	0x3f, r0	; 63
 a9c:	0f 90       	pop	r0
 a9e:	1f 90       	pop	r1
 aa0:	18 95       	reti

Disassembly of section .text.temp_init:

00000a28 <temp_init>:
 */
void temp_init(void)
{
	
	// UPPGIFT: konfigurera ADC-enheten genom ställa in ADMUX och ADCSRA enligt kommentarerna nedanför!
	ADMUX |= (1 << REFS0);		// set reference voltage (internal 5V)
 a28:	ec e7       	ldi	r30, 0x7C	; 124
 a2a:	f0 e0       	ldi	r31, 0x00	; 0
 a2c:	80 81       	ld	r24, Z
 a2e:	80 64       	ori	r24, 0x40	; 64
 a30:	80 83       	st	Z, r24
	ADMUX |= 0b00001001;		// select diff.amp 10x on ADC0 & ADC1
 a32:	80 81       	ld	r24, Z
 a34:	89 60       	ori	r24, 0x09	; 9
 a36:	80 83       	st	Z, r24
								// right adjustment of ADC value
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);				// prescaler 128
 a38:	ea e7       	ldi	r30, 0x7A	; 122
 a3a:	f0 e0       	ldi	r31, 0x00	; 0
 a3c:	80 81       	ld	r24, Z
 a3e:	87 60       	ori	r24, 0x07	; 7
 a40:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE);		// enable Auto Trigger
 a42:	80 81       	ld	r24, Z
 a44:	80 62       	ori	r24, 0x20	; 32
 a46:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);		// enable Interrupt
 a48:	80 81       	ld	r24, Z
 a4a:	88 60       	ori	r24, 0x08	; 8
 a4c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);		// enable ADC
 a4e:	80 81       	ld	r24, Z
 a50:	80 68       	ori	r24, 0x80	; 128
 a52:	80 83       	st	Z, r24

	// disable digital input on ADC0 and ADC1
	DIDR0 = 3;
 a54:	83 e0       	ldi	r24, 0x03	; 3
 a56:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
		
	// disable USB controller (to make interrupts possible)
	USBCON = 0;	
 a5a:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	// enable global interrupts
	sei();
 a5e:	78 94       	sei

	// start initial conversion
	ADCSRA |= (1 << ADSC);	// UPPGIFT: gör så att den initiala A/D-omvandlingen sker
 a60:	80 81       	ld	r24, Z
 a62:	80 64       	ori	r24, 0x40	; 64
 a64:	80 83       	st	Z, r24
 a66:	08 95       	ret

Disassembly of section .text.temp_read_celsius:

000007ba <temp_read_celsius>:

/*
 * Returns the temperature in Celsius.
 */
uint8_t temp_read_celsius(void)
{
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
	uint16_t adc_correction = adc * 98;
 7be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7c6:	22 e6       	ldi	r18, 0x62	; 98
 7c8:	28 9f       	mul	r18, r24
 7ca:	a0 01       	movw	r20, r0
 7cc:	29 9f       	mul	r18, r25
 7ce:	50 0d       	add	r21, r0
 7d0:	11 24       	eor	r1, r1
	uint16_t temp = adc_correction / 1000;
 7d2:	ea 01       	movw	r28, r20
 7d4:	d6 95       	lsr	r29
 7d6:	c7 95       	ror	r28
 7d8:	d6 95       	lsr	r29
 7da:	c7 95       	ror	r28
 7dc:	d6 95       	lsr	r29
 7de:	c7 95       	ror	r28
 7e0:	9e 01       	movw	r18, r28
 7e2:	a5 ec       	ldi	r26, 0xC5	; 197
 7e4:	b0 e2       	ldi	r27, 0x20	; 32
 7e6:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__umulhisi3>
 7ea:	fc 01       	movw	r30, r24
 7ec:	f2 95       	swap	r31
 7ee:	e2 95       	swap	r30
 7f0:	ef 70       	andi	r30, 0x0F	; 15
 7f2:	ef 27       	eor	r30, r31
 7f4:	ff 70       	andi	r31, 0x0F	; 15
 7f6:	ef 27       	eor	r30, r31
	// round up?
	if ((adc_correction % 1000) >= 500) {
 7f8:	28 ee       	ldi	r18, 0xE8	; 232
 7fa:	33 e0       	ldi	r19, 0x03	; 3
 7fc:	e2 9f       	mul	r30, r18
 7fe:	c0 01       	movw	r24, r0
 800:	e3 9f       	mul	r30, r19
 802:	90 0d       	add	r25, r0
 804:	f2 9f       	mul	r31, r18
 806:	90 0d       	add	r25, r0
 808:	11 24       	eor	r1, r1
 80a:	48 1b       	sub	r20, r24
 80c:	59 0b       	sbc	r21, r25
 80e:	44 3f       	cpi	r20, 0xF4	; 244
 810:	51 40       	sbci	r21, 0x01	; 1
 812:	08 f0       	brcs	.+2      	; 0x816 <temp_read_celsius+0x5c>
		temp++;
 814:	31 96       	adiw	r30, 0x01	; 1
	}
	return (uint8_t) temp;
}
 816:	8e 2f       	mov	r24, r30
 818:	df 91       	pop	r29
 81a:	cf 91       	pop	r28
 81c:	08 95       	ret

Disassembly of section .text.temp_read_fahrenheit:

000008e0 <temp_read_fahrenheit>:
 * Returns the temperature in Fahrenheit.
 */
uint8_t temp_read_fahrenheit(void)
{
	
	uint16_t convert = ((temp_read_celsius() * 90) / 5) + 320;
 8e0:	0e 94 dd 03 	call	0x7ba	; 0x7ba <temp_read_celsius>
 8e4:	2a e5       	ldi	r18, 0x5A	; 90
 8e6:	82 9f       	mul	r24, r18
 8e8:	c0 01       	movw	r24, r0
 8ea:	11 24       	eor	r1, r1
 8ec:	65 e0       	ldi	r22, 0x05	; 5
 8ee:	70 e0       	ldi	r23, 0x00	; 0
 8f0:	0e 94 d7 05 	call	0xbae	; 0xbae <__divmodhi4>
 8f4:	ab 01       	movw	r20, r22
 8f6:	40 5c       	subi	r20, 0xC0	; 192
 8f8:	5e 4f       	sbci	r21, 0xFE	; 254
	uint16_t temp = convert / 10;
 8fa:	9a 01       	movw	r18, r20
 8fc:	ad ec       	ldi	r26, 0xCD	; 205
 8fe:	bc ec       	ldi	r27, 0xCC	; 204
 900:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__umulhisi3>
 904:	fc 01       	movw	r30, r24
 906:	f6 95       	lsr	r31
 908:	e7 95       	ror	r30
 90a:	f6 95       	lsr	r31
 90c:	e7 95       	ror	r30
 90e:	f6 95       	lsr	r31
 910:	e7 95       	ror	r30
	// round up?
	if ((convert % 10) >= 5) {
 912:	9f 01       	movw	r18, r30
 914:	22 0f       	add	r18, r18
 916:	33 1f       	adc	r19, r19
 918:	cf 01       	movw	r24, r30
 91a:	88 0f       	add	r24, r24
 91c:	99 1f       	adc	r25, r25
 91e:	88 0f       	add	r24, r24
 920:	99 1f       	adc	r25, r25
 922:	88 0f       	add	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	82 0f       	add	r24, r18
 928:	93 1f       	adc	r25, r19
 92a:	48 1b       	sub	r20, r24
 92c:	59 0b       	sbc	r21, r25
 92e:	45 30       	cpi	r20, 0x05	; 5
 930:	51 05       	cpc	r21, r1
 932:	08 f0       	brcs	.+2      	; 0x936 <temp_read_fahrenheit+0x56>
		temp++;
 934:	31 96       	adiw	r30, 0x01	; 1
	}
	return (uint8_t) temp;
 936:	8e 2f       	mov	r24, r30
 938:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000bae <__divmodhi4>:
 bae:	97 fb       	bst	r25, 7
 bb0:	07 2e       	mov	r0, r23
 bb2:	16 f4       	brtc	.+4      	; 0xbb8 <__divmodhi4+0xa>
 bb4:	00 94       	com	r0
 bb6:	07 d0       	rcall	.+14     	; 0xbc6 <__divmodhi4_neg1>
 bb8:	77 fd       	sbrc	r23, 7
 bba:	09 d0       	rcall	.+18     	; 0xbce <__divmodhi4_neg2>
 bbc:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__udivmodhi4>
 bc0:	07 fc       	sbrc	r0, 7
 bc2:	05 d0       	rcall	.+10     	; 0xbce <__divmodhi4_neg2>
 bc4:	3e f4       	brtc	.+14     	; 0xbd4 <__divmodhi4_exit>

00000bc6 <__divmodhi4_neg1>:
 bc6:	90 95       	com	r25
 bc8:	81 95       	neg	r24
 bca:	9f 4f       	sbci	r25, 0xFF	; 255
 bcc:	08 95       	ret

00000bce <__divmodhi4_neg2>:
 bce:	70 95       	com	r23
 bd0:	61 95       	neg	r22
 bd2:	7f 4f       	sbci	r23, 0xFF	; 255

00000bd4 <__divmodhi4_exit>:
 bd4:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000bfe <__umulhisi3>:
 bfe:	a2 9f       	mul	r26, r18
 c00:	b0 01       	movw	r22, r0
 c02:	b3 9f       	mul	r27, r19
 c04:	c0 01       	movw	r24, r0
 c06:	a3 9f       	mul	r26, r19
 c08:	70 0d       	add	r23, r0
 c0a:	81 1d       	adc	r24, r1
 c0c:	11 24       	eor	r1, r1
 c0e:	91 1d       	adc	r25, r1
 c10:	b2 9f       	mul	r27, r18
 c12:	70 0d       	add	r23, r0
 c14:	81 1d       	adc	r24, r1
 c16:	11 24       	eor	r1, r1
 c18:	91 1d       	adc	r25, r1
 c1a:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000bd6 <__udivmodhi4>:
 bd6:	aa 1b       	sub	r26, r26
 bd8:	bb 1b       	sub	r27, r27
 bda:	51 e1       	ldi	r21, 0x11	; 17
 bdc:	07 c0       	rjmp	.+14     	; 0xbec <__udivmodhi4_ep>

00000bde <__udivmodhi4_loop>:
 bde:	aa 1f       	adc	r26, r26
 be0:	bb 1f       	adc	r27, r27
 be2:	a6 17       	cp	r26, r22
 be4:	b7 07       	cpc	r27, r23
 be6:	10 f0       	brcs	.+4      	; 0xbec <__udivmodhi4_ep>
 be8:	a6 1b       	sub	r26, r22
 bea:	b7 0b       	sbc	r27, r23

00000bec <__udivmodhi4_ep>:
 bec:	88 1f       	adc	r24, r24
 bee:	99 1f       	adc	r25, r25
 bf0:	5a 95       	dec	r21
 bf2:	a9 f7       	brne	.-22     	; 0xbde <__udivmodhi4_loop>
 bf4:	80 95       	com	r24
 bf6:	90 95       	com	r25
 bf8:	bc 01       	movw	r22, r24
 bfa:	cd 01       	movw	r24, r26
 bfc:	08 95       	ret

Disassembly of section .text.avrlibc:

000009e2 <sprintf>:
 9e2:	af e0       	ldi	r26, 0x0F	; 15
 9e4:	b0 e0       	ldi	r27, 0x00	; 0
 9e6:	e7 ef       	ldi	r30, 0xF7	; 247
 9e8:	f4 e0       	ldi	r31, 0x04	; 4
 9ea:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__prologue_saves__+0x1c>
 9ee:	0e 89       	ldd	r16, Y+22	; 0x16
 9f0:	1f 89       	ldd	r17, Y+23	; 0x17
 9f2:	86 e0       	ldi	r24, 0x06	; 6
 9f4:	8d 83       	std	Y+5, r24	; 0x05
 9f6:	1a 83       	std	Y+2, r17	; 0x02
 9f8:	09 83       	std	Y+1, r16	; 0x01
 9fa:	8f ef       	ldi	r24, 0xFF	; 255
 9fc:	9f e7       	ldi	r25, 0x7F	; 127
 9fe:	9f 83       	std	Y+7, r25	; 0x07
 a00:	8e 83       	std	Y+6, r24	; 0x06
 a02:	9e 01       	movw	r18, r28
 a04:	25 5e       	subi	r18, 0xE5	; 229
 a06:	3f 4f       	sbci	r19, 0xFF	; 255
 a08:	48 8d       	ldd	r20, Y+24	; 0x18
 a0a:	59 8d       	ldd	r21, Y+25	; 0x19
 a0c:	6a 8d       	ldd	r22, Y+26	; 0x1a
 a0e:	ce 01       	movw	r24, r28
 a10:	01 96       	adiw	r24, 0x01	; 1
 a12:	0e 94 9d 00 	call	0x13a	; 0x13a <vfprintf>
 a16:	e8 85       	ldd	r30, Y+8	; 0x08
 a18:	f9 85       	ldd	r31, Y+9	; 0x09
 a1a:	e0 0f       	add	r30, r16
 a1c:	f1 1f       	adc	r31, r17
 a1e:	10 82       	st	Z, r1
 a20:	2f 96       	adiw	r28, 0x0f	; 15
 a22:	e4 e0       	ldi	r30, 0x04	; 4
 a24:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

0000013a <vfprintf>:
 13a:	2f 92       	push	r2
 13c:	3f 92       	push	r3
 13e:	4f 92       	push	r4
 140:	6f 92       	push	r6
 142:	7f 92       	push	r7
 144:	8f 92       	push	r8
 146:	9f 92       	push	r9
 148:	af 92       	push	r10
 14a:	bf 92       	push	r11
 14c:	cf 92       	push	r12
 14e:	df 92       	push	r13
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
 160:	62 97       	sbiw	r28, 0x12	; 18
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	de bf       	out	0x3e, r29	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	cd bf       	out	0x3d, r28	; 61
 16c:	6c 01       	movw	r12, r24
 16e:	3a 01       	movw	r6, r20
 170:	86 2e       	mov	r8, r22
 172:	79 01       	movw	r14, r18
 174:	fc 01       	movw	r30, r24
 176:	10 86       	std	Z+8, r1	; 0x08
 178:	17 82       	std	Z+7, r1	; 0x07
 17a:	84 81       	ldd	r24, Z+4	; 0x04
 17c:	81 ff       	sbrs	r24, 1
 17e:	e7 c1       	rjmp	.+974    	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
 180:	9e 01       	movw	r18, r28
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	3d 87       	std	Y+13, r19	; 0x0d
 188:	2c 87       	std	Y+12, r18	; 0x0c
 18a:	c9 01       	movw	r24, r18
 18c:	a0 e8       	ldi	r26, 0x80	; 128
 18e:	88 8b       	std	Y+16, r24	; 0x10
 190:	99 8b       	std	Y+17, r25	; 0x11
 192:	aa 8b       	std	Y+18, r26	; 0x12
 194:	9f e3       	ldi	r25, 0x3F	; 63
 196:	99 2e       	mov	r9, r25
 198:	f3 01       	movw	r30, r6
 19a:	84 91       	lpm	r24, Z
 19c:	87 fc       	sbrc	r8, 7
 19e:	80 81       	ld	r24, Z
 1a0:	88 23       	and	r24, r24
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <vfprintf+0x6c>
 1a4:	d0 c1       	rjmp	.+928    	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 1a6:	48 2d       	mov	r20, r8
 1a8:	93 01       	movw	r18, r6
 1aa:	2f 5f       	subi	r18, 0xFF	; 255
 1ac:	3f 4f       	sbci	r19, 0xFF	; 255
 1ae:	4f 4f       	sbci	r20, 0xFF	; 255
 1b0:	85 32       	cpi	r24, 0x25	; 37
 1b2:	19 f0       	breq	.+6      	; 0x1ba <vfprintf+0x80>
 1b4:	39 01       	movw	r6, r18
 1b6:	84 2e       	mov	r8, r20
 1b8:	0a c0       	rjmp	.+20     	; 0x1ce <vfprintf+0x94>
 1ba:	f9 01       	movw	r30, r18
 1bc:	84 91       	lpm	r24, Z
 1be:	47 fd       	sbrc	r20, 7
 1c0:	80 81       	ld	r24, Z
 1c2:	92 e0       	ldi	r25, 0x02	; 2
 1c4:	69 0e       	add	r6, r25
 1c6:	71 1c       	adc	r7, r1
 1c8:	81 1c       	adc	r8, r1
 1ca:	85 32       	cpi	r24, 0x25	; 37
 1cc:	29 f4       	brne	.+10     	; 0x1d8 <vfprintf+0x9e>
 1ce:	b6 01       	movw	r22, r12
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 1d6:	e0 cf       	rjmp	.-64     	; 0x198 <vfprintf+0x5e>
 1d8:	b1 2c       	mov	r11, r1
 1da:	00 e0       	ldi	r16, 0x00	; 0
 1dc:	10 e0       	ldi	r17, 0x00	; 0
 1de:	10 32       	cpi	r17, 0x20	; 32
 1e0:	a0 f4       	brcc	.+40     	; 0x20a <vfprintf+0xd0>
 1e2:	8b 32       	cpi	r24, 0x2B	; 43
 1e4:	69 f0       	breq	.+26     	; 0x200 <vfprintf+0xc6>
 1e6:	30 f4       	brcc	.+12     	; 0x1f4 <vfprintf+0xba>
 1e8:	80 32       	cpi	r24, 0x20	; 32
 1ea:	59 f0       	breq	.+22     	; 0x202 <vfprintf+0xc8>
 1ec:	83 32       	cpi	r24, 0x23	; 35
 1ee:	69 f4       	brne	.+26     	; 0x20a <vfprintf+0xd0>
 1f0:	10 61       	ori	r17, 0x10	; 16
 1f2:	2c c0       	rjmp	.+88     	; 0x24c <vfprintf+0x112>
 1f4:	8d 32       	cpi	r24, 0x2D	; 45
 1f6:	39 f0       	breq	.+14     	; 0x206 <vfprintf+0xcc>
 1f8:	80 33       	cpi	r24, 0x30	; 48
 1fa:	39 f4       	brne	.+14     	; 0x20a <vfprintf+0xd0>
 1fc:	11 60       	ori	r17, 0x01	; 1
 1fe:	26 c0       	rjmp	.+76     	; 0x24c <vfprintf+0x112>
 200:	12 60       	ori	r17, 0x02	; 2
 202:	14 60       	ori	r17, 0x04	; 4
 204:	23 c0       	rjmp	.+70     	; 0x24c <vfprintf+0x112>
 206:	18 60       	ori	r17, 0x08	; 8
 208:	21 c0       	rjmp	.+66     	; 0x24c <vfprintf+0x112>
 20a:	17 fd       	sbrc	r17, 7
 20c:	29 c0       	rjmp	.+82     	; 0x260 <vfprintf+0x126>
 20e:	90 ed       	ldi	r25, 0xD0	; 208
 210:	98 0f       	add	r25, r24
 212:	9a 30       	cpi	r25, 0x0A	; 10
 214:	78 f4       	brcc	.+30     	; 0x234 <vfprintf+0xfa>
 216:	16 ff       	sbrs	r17, 6
 218:	06 c0       	rjmp	.+12     	; 0x226 <vfprintf+0xec>
 21a:	aa e0       	ldi	r26, 0x0A	; 10
 21c:	ba 9e       	mul	r11, r26
 21e:	90 0d       	add	r25, r0
 220:	11 24       	eor	r1, r1
 222:	b9 2e       	mov	r11, r25
 224:	13 c0       	rjmp	.+38     	; 0x24c <vfprintf+0x112>
 226:	ea e0       	ldi	r30, 0x0A	; 10
 228:	0e 9f       	mul	r16, r30
 22a:	90 0d       	add	r25, r0
 22c:	11 24       	eor	r1, r1
 22e:	09 2f       	mov	r16, r25
 230:	10 62       	ori	r17, 0x20	; 32
 232:	0c c0       	rjmp	.+24     	; 0x24c <vfprintf+0x112>
 234:	8e 32       	cpi	r24, 0x2E	; 46
 236:	21 f4       	brne	.+8      	; 0x240 <vfprintf+0x106>
 238:	16 fd       	sbrc	r17, 6
 23a:	85 c1       	rjmp	.+778    	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 23c:	10 64       	ori	r17, 0x40	; 64
 23e:	06 c0       	rjmp	.+12     	; 0x24c <vfprintf+0x112>
 240:	8c 36       	cpi	r24, 0x6C	; 108
 242:	11 f4       	brne	.+4      	; 0x248 <vfprintf+0x10e>
 244:	10 68       	ori	r17, 0x80	; 128
 246:	02 c0       	rjmp	.+4      	; 0x24c <vfprintf+0x112>
 248:	88 36       	cpi	r24, 0x68	; 104
 24a:	51 f4       	brne	.+20     	; 0x260 <vfprintf+0x126>
 24c:	f3 01       	movw	r30, r6
 24e:	84 91       	lpm	r24, Z
 250:	87 fc       	sbrc	r8, 7
 252:	80 81       	ld	r24, Z
 254:	ff ef       	ldi	r31, 0xFF	; 255
 256:	6f 1a       	sub	r6, r31
 258:	7f 0a       	sbc	r7, r31
 25a:	8f 0a       	sbc	r8, r31
 25c:	81 11       	cpse	r24, r1
 25e:	bf cf       	rjmp	.-130    	; 0x1de <vfprintf+0xa4>
 260:	98 2f       	mov	r25, r24
 262:	9f 7d       	andi	r25, 0xDF	; 223
 264:	95 54       	subi	r25, 0x45	; 69
 266:	93 30       	cpi	r25, 0x03	; 3
 268:	28 f4       	brcc	.+10     	; 0x274 <vfprintf+0x13a>
 26a:	24 e0       	ldi	r18, 0x04	; 4
 26c:	e2 0e       	add	r14, r18
 26e:	f1 1c       	adc	r15, r1
 270:	99 82       	std	Y+1, r9	; 0x01
 272:	0f c0       	rjmp	.+30     	; 0x292 <vfprintf+0x158>
 274:	83 36       	cpi	r24, 0x63	; 99
 276:	31 f0       	breq	.+12     	; 0x284 <vfprintf+0x14a>
 278:	83 37       	cpi	r24, 0x73	; 115
 27a:	91 f0       	breq	.+36     	; 0x2a0 <vfprintf+0x166>
 27c:	83 35       	cpi	r24, 0x53	; 83
 27e:	09 f0       	breq	.+2      	; 0x282 <vfprintf+0x148>
 280:	63 c0       	rjmp	.+198    	; 0x348 <vfprintf+0x20e>
 282:	27 c0       	rjmp	.+78     	; 0x2d2 <vfprintf+0x198>
 284:	f7 01       	movw	r30, r14
 286:	80 81       	ld	r24, Z
 288:	89 83       	std	Y+1, r24	; 0x01
 28a:	97 01       	movw	r18, r14
 28c:	2e 5f       	subi	r18, 0xFE	; 254
 28e:	3f 4f       	sbci	r19, 0xFF	; 255
 290:	79 01       	movw	r14, r18
 292:	28 88       	ldd	r2, Y+16	; 0x10
 294:	39 88       	ldd	r3, Y+17	; 0x11
 296:	4a 88       	ldd	r4, Y+18	; 0x12
 298:	aa 24       	eor	r10, r10
 29a:	a3 94       	inc	r10
 29c:	b1 2c       	mov	r11, r1
 29e:	17 c0       	rjmp	.+46     	; 0x2ce <vfprintf+0x194>
 2a0:	a7 01       	movw	r20, r14
 2a2:	4d 5f       	subi	r20, 0xFD	; 253
 2a4:	5f 4f       	sbci	r21, 0xFF	; 255
 2a6:	5f 87       	std	Y+15, r21	; 0x0f
 2a8:	4e 87       	std	Y+14, r20	; 0x0e
 2aa:	f7 01       	movw	r30, r14
 2ac:	20 80       	ld	r2, Z
 2ae:	31 80       	ldd	r3, Z+1	; 0x01
 2b0:	42 80       	ldd	r4, Z+2	; 0x02
 2b2:	16 ff       	sbrs	r17, 6
 2b4:	03 c0       	rjmp	.+6      	; 0x2bc <vfprintf+0x182>
 2b6:	4b 2d       	mov	r20, r11
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <vfprintf+0x186>
 2bc:	4f ef       	ldi	r20, 0xFF	; 255
 2be:	5f ef       	ldi	r21, 0xFF	; 255
 2c0:	84 2d       	mov	r24, r4
 2c2:	b1 01       	movw	r22, r2
 2c4:	0e 94 89 05 	call	0xb12	; 0xb12 <strnlen>
 2c8:	5c 01       	movw	r10, r24
 2ca:	ee 84       	ldd	r14, Y+14	; 0x0e
 2cc:	ff 84       	ldd	r15, Y+15	; 0x0f
 2ce:	1f 77       	andi	r17, 0x7F	; 127
 2d0:	18 c0       	rjmp	.+48     	; 0x302 <vfprintf+0x1c8>
 2d2:	97 01       	movw	r18, r14
 2d4:	2d 5f       	subi	r18, 0xFD	; 253
 2d6:	3f 4f       	sbci	r19, 0xFF	; 255
 2d8:	3f 87       	std	Y+15, r19	; 0x0f
 2da:	2e 87       	std	Y+14, r18	; 0x0e
 2dc:	f7 01       	movw	r30, r14
 2de:	20 80       	ld	r2, Z
 2e0:	31 80       	ldd	r3, Z+1	; 0x01
 2e2:	42 80       	ldd	r4, Z+2	; 0x02
 2e4:	16 ff       	sbrs	r17, 6
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <vfprintf+0x1b4>
 2e8:	4b 2d       	mov	r20, r11
 2ea:	50 e0       	ldi	r21, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <vfprintf+0x1b8>
 2ee:	4f ef       	ldi	r20, 0xFF	; 255
 2f0:	5f ef       	ldi	r21, 0xFF	; 255
 2f2:	84 2d       	mov	r24, r4
 2f4:	b1 01       	movw	r22, r2
 2f6:	0e 94 89 05 	call	0xb12	; 0xb12 <strnlen>
 2fa:	5c 01       	movw	r10, r24
 2fc:	10 68       	ori	r17, 0x80	; 128
 2fe:	ee 84       	ldd	r14, Y+14	; 0x0e
 300:	ff 84       	ldd	r15, Y+15	; 0x0f
 302:	13 fd       	sbrc	r17, 3
 304:	1d c0       	rjmp	.+58     	; 0x340 <vfprintf+0x206>
 306:	80 2f       	mov	r24, r16
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	a8 16       	cp	r10, r24
 30c:	b9 06       	cpc	r11, r25
 30e:	c0 f4       	brcc	.+48     	; 0x340 <vfprintf+0x206>
 310:	b6 01       	movw	r22, r12
 312:	80 e2       	ldi	r24, 0x20	; 32
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 31a:	01 50       	subi	r16, 0x01	; 1
 31c:	f4 cf       	rjmp	.-24     	; 0x306 <vfprintf+0x1cc>
 31e:	f1 01       	movw	r30, r2
 320:	84 91       	lpm	r24, Z
 322:	47 fc       	sbrc	r4, 7
 324:	80 81       	ld	r24, Z
 326:	ff ef       	ldi	r31, 0xFF	; 255
 328:	2f 1a       	sub	r2, r31
 32a:	3f 0a       	sbc	r3, r31
 32c:	4f 0a       	sbc	r4, r31
 32e:	b6 01       	movw	r22, r12
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 336:	01 11       	cpse	r16, r1
 338:	01 50       	subi	r16, 0x01	; 1
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	a2 1a       	sub	r10, r18
 33e:	b1 08       	sbc	r11, r1
 340:	a1 14       	cp	r10, r1
 342:	b1 04       	cpc	r11, r1
 344:	61 f7       	brne	.-40     	; 0x31e <vfprintf+0x1e4>
 346:	f5 c0       	rjmp	.+490    	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 348:	84 36       	cpi	r24, 0x64	; 100
 34a:	11 f0       	breq	.+4      	; 0x350 <vfprintf+0x216>
 34c:	89 36       	cpi	r24, 0x69	; 105
 34e:	71 f5       	brne	.+92     	; 0x3ac <vfprintf+0x272>
 350:	f7 01       	movw	r30, r14
 352:	17 ff       	sbrs	r17, 7
 354:	08 c0       	rjmp	.+16     	; 0x366 <vfprintf+0x22c>
 356:	60 81       	ld	r22, Z
 358:	71 81       	ldd	r23, Z+1	; 0x01
 35a:	82 81       	ldd	r24, Z+2	; 0x02
 35c:	93 81       	ldd	r25, Z+3	; 0x03
 35e:	97 01       	movw	r18, r14
 360:	2c 5f       	subi	r18, 0xFC	; 252
 362:	3f 4f       	sbci	r19, 0xFF	; 255
 364:	09 c0       	rjmp	.+18     	; 0x378 <vfprintf+0x23e>
 366:	60 81       	ld	r22, Z
 368:	71 81       	ldd	r23, Z+1	; 0x01
 36a:	07 2e       	mov	r0, r23
 36c:	00 0c       	add	r0, r0
 36e:	88 0b       	sbc	r24, r24
 370:	99 0b       	sbc	r25, r25
 372:	97 01       	movw	r18, r14
 374:	2e 5f       	subi	r18, 0xFE	; 254
 376:	3f 4f       	sbci	r19, 0xFF	; 255
 378:	79 01       	movw	r14, r18
 37a:	1f 76       	andi	r17, 0x6F	; 111
 37c:	31 2e       	mov	r3, r17
 37e:	97 ff       	sbrs	r25, 7
 380:	0a c0       	rjmp	.+20     	; 0x396 <vfprintf+0x25c>
 382:	90 95       	com	r25
 384:	80 95       	com	r24
 386:	70 95       	com	r23
 388:	61 95       	neg	r22
 38a:	7f 4f       	sbci	r23, 0xFF	; 255
 38c:	8f 4f       	sbci	r24, 0xFF	; 255
 38e:	9f 4f       	sbci	r25, 0xFF	; 255
 390:	31 2f       	mov	r19, r17
 392:	30 68       	ori	r19, 0x80	; 128
 394:	33 2e       	mov	r3, r19
 396:	2a e0       	ldi	r18, 0x0A	; 10
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	ae 01       	movw	r20, r28
 39c:	4f 5f       	subi	r20, 0xFF	; 255
 39e:	5f 4f       	sbci	r21, 0xFF	; 255
 3a0:	0e 94 43 03 	call	0x686	; 0x686 <__ultoa_invert>
 3a4:	48 2e       	mov	r4, r24
 3a6:	4c 85       	ldd	r20, Y+12	; 0x0c
 3a8:	44 1a       	sub	r4, r20
 3aa:	4a c0       	rjmp	.+148    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 3ac:	85 37       	cpi	r24, 0x75	; 117
 3ae:	29 f4       	brne	.+10     	; 0x3ba <vfprintf+0x280>
 3b0:	1f 7e       	andi	r17, 0xEF	; 239
 3b2:	a1 2e       	mov	r10, r17
 3b4:	2a e0       	ldi	r18, 0x0A	; 10
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	25 c0       	rjmp	.+74     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3ba:	51 2f       	mov	r21, r17
 3bc:	59 7f       	andi	r21, 0xF9	; 249
 3be:	a5 2e       	mov	r10, r21
 3c0:	8f 36       	cpi	r24, 0x6F	; 111
 3c2:	c1 f0       	breq	.+48     	; 0x3f4 <vfprintf+0x2ba>
 3c4:	18 f4       	brcc	.+6      	; 0x3cc <vfprintf+0x292>
 3c6:	88 35       	cpi	r24, 0x58	; 88
 3c8:	79 f0       	breq	.+30     	; 0x3e8 <vfprintf+0x2ae>
 3ca:	bd c0       	rjmp	.+378    	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 3cc:	80 37       	cpi	r24, 0x70	; 112
 3ce:	19 f0       	breq	.+6      	; 0x3d6 <vfprintf+0x29c>
 3d0:	88 37       	cpi	r24, 0x78	; 120
 3d2:	21 f0       	breq	.+8      	; 0x3dc <vfprintf+0x2a2>
 3d4:	b8 c0       	rjmp	.+368    	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 3d6:	85 2f       	mov	r24, r21
 3d8:	80 61       	ori	r24, 0x10	; 16
 3da:	a8 2e       	mov	r10, r24
 3dc:	a4 fe       	sbrs	r10, 4
 3de:	0d c0       	rjmp	.+26     	; 0x3fa <vfprintf+0x2c0>
 3e0:	9a 2d       	mov	r25, r10
 3e2:	94 60       	ori	r25, 0x04	; 4
 3e4:	a9 2e       	mov	r10, r25
 3e6:	09 c0       	rjmp	.+18     	; 0x3fa <vfprintf+0x2c0>
 3e8:	14 ff       	sbrs	r17, 4
 3ea:	0a c0       	rjmp	.+20     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3ec:	a5 2f       	mov	r26, r21
 3ee:	a6 60       	ori	r26, 0x06	; 6
 3f0:	aa 2e       	mov	r10, r26
 3f2:	06 c0       	rjmp	.+12     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f4:	28 e0       	ldi	r18, 0x08	; 8
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	05 c0       	rjmp	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fa:	20 e1       	ldi	r18, 0x10	; 16
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	20 e1       	ldi	r18, 0x10	; 16
 402:	32 e0       	ldi	r19, 0x02	; 2
 404:	f7 01       	movw	r30, r14
 406:	a7 fe       	sbrs	r10, 7
 408:	08 c0       	rjmp	.+16     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 40a:	60 81       	ld	r22, Z
 40c:	71 81       	ldd	r23, Z+1	; 0x01
 40e:	82 81       	ldd	r24, Z+2	; 0x02
 410:	93 81       	ldd	r25, Z+3	; 0x03
 412:	a7 01       	movw	r20, r14
 414:	4c 5f       	subi	r20, 0xFC	; 252
 416:	5f 4f       	sbci	r21, 0xFF	; 255
 418:	07 c0       	rjmp	.+14     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 41a:	60 81       	ld	r22, Z
 41c:	71 81       	ldd	r23, Z+1	; 0x01
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	a7 01       	movw	r20, r14
 424:	4e 5f       	subi	r20, 0xFE	; 254
 426:	5f 4f       	sbci	r21, 0xFF	; 255
 428:	7a 01       	movw	r14, r20
 42a:	ae 01       	movw	r20, r28
 42c:	4f 5f       	subi	r20, 0xFF	; 255
 42e:	5f 4f       	sbci	r21, 0xFF	; 255
 430:	0e 94 43 03 	call	0x686	; 0x686 <__ultoa_invert>
 434:	48 2e       	mov	r4, r24
 436:	5c 85       	ldd	r21, Y+12	; 0x0c
 438:	45 1a       	sub	r4, r21
 43a:	8a 2d       	mov	r24, r10
 43c:	8f 77       	andi	r24, 0x7F	; 127
 43e:	38 2e       	mov	r3, r24
 440:	36 fe       	sbrs	r3, 6
 442:	0d c0       	rjmp	.+26     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 444:	93 2d       	mov	r25, r3
 446:	9e 7f       	andi	r25, 0xFE	; 254
 448:	a9 2e       	mov	r10, r25
 44a:	4b 14       	cp	r4, r11
 44c:	58 f4       	brcc	.+22     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 44e:	34 fe       	sbrs	r3, 4
 450:	0b c0       	rjmp	.+22     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 452:	32 fc       	sbrc	r3, 2
 454:	09 c0       	rjmp	.+18     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 456:	a3 2d       	mov	r26, r3
 458:	ae 7e       	andi	r26, 0xEE	; 238
 45a:	aa 2e       	mov	r10, r26
 45c:	05 c0       	rjmp	.+10     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 45e:	14 2d       	mov	r17, r4
 460:	a3 2c       	mov	r10, r3
 462:	03 c0       	rjmp	.+6      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 464:	14 2d       	mov	r17, r4
 466:	01 c0       	rjmp	.+2      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 468:	1b 2d       	mov	r17, r11
 46a:	a4 fe       	sbrs	r10, 4
 46c:	0e c0       	rjmp	.+28     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 46e:	fe 01       	movw	r30, r28
 470:	e4 0d       	add	r30, r4
 472:	f1 1d       	adc	r31, r1
 474:	80 81       	ld	r24, Z
 476:	80 33       	cpi	r24, 0x30	; 48
 478:	21 f4       	brne	.+8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 47a:	ea 2d       	mov	r30, r10
 47c:	e9 7e       	andi	r30, 0xE9	; 233
 47e:	ae 2e       	mov	r10, r30
 480:	08 c0       	rjmp	.+16     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 482:	a2 fe       	sbrs	r10, 2
 484:	05 c0       	rjmp	.+10     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 486:	1e 5f       	subi	r17, 0xFE	; 254
 488:	04 c0       	rjmp	.+8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 48a:	8a 2d       	mov	r24, r10
 48c:	86 78       	andi	r24, 0x86	; 134
 48e:	09 f0       	breq	.+2      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 490:	1f 5f       	subi	r17, 0xFF	; 255
 492:	a3 fc       	sbrc	r10, 3
 494:	11 c0       	rjmp	.+34     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 496:	a0 fe       	sbrs	r10, 0
 498:	06 c0       	rjmp	.+12     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 49a:	10 17       	cp	r17, r16
 49c:	88 f4       	brcc	.+34     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 49e:	04 0d       	add	r16, r4
 4a0:	b0 2e       	mov	r11, r16
 4a2:	b1 1a       	sub	r11, r17
 4a4:	0e c0       	rjmp	.+28     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4a6:	10 17       	cp	r17, r16
 4a8:	60 f4       	brcc	.+24     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4aa:	b6 01       	movw	r22, r12
 4ac:	80 e2       	ldi	r24, 0x20	; 32
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 4b4:	1f 5f       	subi	r17, 0xFF	; 255
 4b6:	f7 cf       	rjmp	.-18     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4b8:	10 17       	cp	r17, r16
 4ba:	18 f4       	brcc	.+6      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4bc:	01 1b       	sub	r16, r17
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c0:	b4 2c       	mov	r11, r4
 4c2:	00 e0       	ldi	r16, 0x00	; 0
 4c4:	a4 fe       	sbrs	r10, 4
 4c6:	10 c0       	rjmp	.+32     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4c8:	b6 01       	movw	r22, r12
 4ca:	80 e3       	ldi	r24, 0x30	; 48
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 4d2:	a2 fe       	sbrs	r10, 2
 4d4:	17 c0       	rjmp	.+46     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 4d6:	a1 fc       	sbrc	r10, 1
 4d8:	03 c0       	rjmp	.+6      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4da:	88 e7       	ldi	r24, 0x78	; 120
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4e0:	88 e5       	ldi	r24, 0x58	; 88
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	b6 01       	movw	r22, r12
 4e6:	0c c0       	rjmp	.+24     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 4e8:	8a 2d       	mov	r24, r10
 4ea:	86 78       	andi	r24, 0x86	; 134
 4ec:	59 f0       	breq	.+22     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 4ee:	a1 fe       	sbrs	r10, 1
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4f2:	8b e2       	ldi	r24, 0x2B	; 43
 4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 4f6:	80 e2       	ldi	r24, 0x20	; 32
 4f8:	a7 fc       	sbrc	r10, 7
 4fa:	8d e2       	ldi	r24, 0x2D	; 45
 4fc:	b6 01       	movw	r22, r12
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 504:	4b 14       	cp	r4, r11
 506:	38 f4       	brcc	.+14     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 508:	b6 01       	movw	r22, r12
 50a:	80 e3       	ldi	r24, 0x30	; 48
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 512:	ba 94       	dec	r11
 514:	f7 cf       	rjmp	.-18     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 516:	4a 94       	dec	r4
 518:	e1 e0       	ldi	r30, 0x01	; 1
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	ec 0f       	add	r30, r28
 51e:	fd 1f       	adc	r31, r29
 520:	e4 0d       	add	r30, r4
 522:	f1 1d       	adc	r31, r1
 524:	80 81       	ld	r24, Z
 526:	b6 01       	movw	r22, r12
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 52e:	41 10       	cpse	r4, r1
 530:	f2 cf       	rjmp	.-28     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 532:	00 23       	and	r16, r16
 534:	09 f4       	brne	.+2      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 536:	30 ce       	rjmp	.-928    	; 0x198 <vfprintf+0x5e>
 538:	b6 01       	movw	r22, r12
 53a:	80 e2       	ldi	r24, 0x20	; 32
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 a1 03 	call	0x742	; 0x742 <fputc>
 542:	01 50       	subi	r16, 0x01	; 1
 544:	f6 cf       	rjmp	.-20     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 546:	f6 01       	movw	r30, r12
 548:	87 81       	ldd	r24, Z+7	; 0x07
 54a:	90 85       	ldd	r25, Z+8	; 0x08
 54c:	02 c0       	rjmp	.+4      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
 54e:	8f ef       	ldi	r24, 0xFF	; 255
 550:	9f ef       	ldi	r25, 0xFF	; 255
 552:	62 96       	adiw	r28, 0x12	; 18
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	f8 94       	cli
 558:	de bf       	out	0x3e, r29	; 62
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	cd bf       	out	0x3d, r28	; 61
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	ff 90       	pop	r15
 568:	ef 90       	pop	r14
 56a:	df 90       	pop	r13
 56c:	cf 90       	pop	r12
 56e:	bf 90       	pop	r11
 570:	af 90       	pop	r10
 572:	9f 90       	pop	r9
 574:	8f 90       	pop	r8
 576:	7f 90       	pop	r7
 578:	6f 90       	pop	r6
 57a:	4f 90       	pop	r4
 57c:	3f 90       	pop	r3
 57e:	2f 90       	pop	r2
 580:	08 95       	ret

Disassembly of section .text.avrlibc:

00000b12 <strnlen>:
 b12:	cf 92       	push	r12
 b14:	df 92       	push	r13
 b16:	ef 92       	push	r14
 b18:	6b 01       	movw	r12, r22
 b1a:	e8 2e       	mov	r14, r24
 b1c:	a8 2f       	mov	r26, r24
 b1e:	cb 01       	movw	r24, r22
 b20:	41 15       	cp	r20, r1
 b22:	51 05       	cpc	r21, r1
 b24:	31 f4       	brne	.+12     	; 0xb32 <strnlen+0x20>
 b26:	8c 19       	sub	r24, r12
 b28:	9d 09       	sbc	r25, r13
 b2a:	ef 90       	pop	r14
 b2c:	df 90       	pop	r13
 b2e:	cf 90       	pop	r12
 b30:	08 95       	ret
 b32:	fc 01       	movw	r30, r24
 b34:	24 91       	lpm	r18, Z
 b36:	a7 fd       	sbrc	r26, 7
 b38:	20 81       	ld	r18, Z
 b3a:	22 23       	and	r18, r18
 b3c:	a1 f3       	breq	.-24     	; 0xb26 <strnlen+0x14>
 b3e:	01 96       	adiw	r24, 0x01	; 1
 b40:	a1 1d       	adc	r26, r1
 b42:	41 50       	subi	r20, 0x01	; 1
 b44:	51 09       	sbc	r21, r1
 b46:	ec cf       	rjmp	.-40     	; 0xb20 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00000742 <fputc>:
 742:	0f 93       	push	r16
 744:	1f 93       	push	r17
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	fb 01       	movw	r30, r22
 74c:	24 81       	ldd	r18, Z+4	; 0x04
 74e:	21 fd       	sbrc	r18, 1
 750:	03 c0       	rjmp	.+6      	; 0x758 <fputc+0x16>
 752:	8f ef       	ldi	r24, 0xFF	; 255
 754:	9f ef       	ldi	r25, 0xFF	; 255
 756:	2c c0       	rjmp	.+88     	; 0x7b0 <fputc+0x6e>
 758:	22 ff       	sbrs	r18, 2
 75a:	16 c0       	rjmp	.+44     	; 0x788 <fputc+0x46>
 75c:	47 81       	ldd	r20, Z+7	; 0x07
 75e:	50 85       	ldd	r21, Z+8	; 0x08
 760:	25 81       	ldd	r18, Z+5	; 0x05
 762:	36 81       	ldd	r19, Z+6	; 0x06
 764:	42 17       	cp	r20, r18
 766:	53 07       	cpc	r21, r19
 768:	44 f4       	brge	.+16     	; 0x77a <fputc+0x38>
 76a:	a0 81       	ld	r26, Z
 76c:	b1 81       	ldd	r27, Z+1	; 0x01
 76e:	9d 01       	movw	r18, r26
 770:	2f 5f       	subi	r18, 0xFF	; 255
 772:	3f 4f       	sbci	r19, 0xFF	; 255
 774:	31 83       	std	Z+1, r19	; 0x01
 776:	20 83       	st	Z, r18
 778:	8c 93       	st	X, r24
 77a:	27 81       	ldd	r18, Z+7	; 0x07
 77c:	30 85       	ldd	r19, Z+8	; 0x08
 77e:	2f 5f       	subi	r18, 0xFF	; 255
 780:	3f 4f       	sbci	r19, 0xFF	; 255
 782:	30 87       	std	Z+8, r19	; 0x08
 784:	27 83       	std	Z+7, r18	; 0x07
 786:	14 c0       	rjmp	.+40     	; 0x7b0 <fputc+0x6e>
 788:	8b 01       	movw	r16, r22
 78a:	ec 01       	movw	r28, r24
 78c:	fb 01       	movw	r30, r22
 78e:	01 84       	ldd	r0, Z+9	; 0x09
 790:	f2 85       	ldd	r31, Z+10	; 0x0a
 792:	e0 2d       	mov	r30, r0
 794:	09 95       	icall
 796:	89 2b       	or	r24, r25
 798:	e1 f6       	brne	.-72     	; 0x752 <fputc+0x10>
 79a:	d8 01       	movw	r26, r16
 79c:	17 96       	adiw	r26, 0x07	; 7
 79e:	8d 91       	ld	r24, X+
 7a0:	9c 91       	ld	r25, X
 7a2:	18 97       	sbiw	r26, 0x08	; 8
 7a4:	01 96       	adiw	r24, 0x01	; 1
 7a6:	18 96       	adiw	r26, 0x08	; 8
 7a8:	9c 93       	st	X, r25
 7aa:	8e 93       	st	-X, r24
 7ac:	17 97       	sbiw	r26, 0x07	; 7
 7ae:	ce 01       	movw	r24, r28
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	1f 91       	pop	r17
 7b6:	0f 91       	pop	r16
 7b8:	08 95       	ret

Disassembly of section .text.avrlibc:

00000686 <__ultoa_invert>:
 686:	fa 01       	movw	r30, r20
 688:	aa 27       	eor	r26, r26
 68a:	28 30       	cpi	r18, 0x08	; 8
 68c:	51 f1       	breq	.+84     	; 0x6e2 <__ultoa_invert+0x5c>
 68e:	20 31       	cpi	r18, 0x10	; 16
 690:	81 f1       	breq	.+96     	; 0x6f2 <__ultoa_invert+0x6c>
 692:	e8 94       	clt
 694:	6f 93       	push	r22
 696:	6e 7f       	andi	r22, 0xFE	; 254
 698:	6e 5f       	subi	r22, 0xFE	; 254
 69a:	7f 4f       	sbci	r23, 0xFF	; 255
 69c:	8f 4f       	sbci	r24, 0xFF	; 255
 69e:	9f 4f       	sbci	r25, 0xFF	; 255
 6a0:	af 4f       	sbci	r26, 0xFF	; 255
 6a2:	b1 e0       	ldi	r27, 0x01	; 1
 6a4:	3e d0       	rcall	.+124    	; 0x722 <__ultoa_invert+0x9c>
 6a6:	b4 e0       	ldi	r27, 0x04	; 4
 6a8:	3c d0       	rcall	.+120    	; 0x722 <__ultoa_invert+0x9c>
 6aa:	67 0f       	add	r22, r23
 6ac:	78 1f       	adc	r23, r24
 6ae:	89 1f       	adc	r24, r25
 6b0:	9a 1f       	adc	r25, r26
 6b2:	a1 1d       	adc	r26, r1
 6b4:	68 0f       	add	r22, r24
 6b6:	79 1f       	adc	r23, r25
 6b8:	8a 1f       	adc	r24, r26
 6ba:	91 1d       	adc	r25, r1
 6bc:	a1 1d       	adc	r26, r1
 6be:	6a 0f       	add	r22, r26
 6c0:	71 1d       	adc	r23, r1
 6c2:	81 1d       	adc	r24, r1
 6c4:	91 1d       	adc	r25, r1
 6c6:	a1 1d       	adc	r26, r1
 6c8:	20 d0       	rcall	.+64     	; 0x70a <__ultoa_invert+0x84>
 6ca:	09 f4       	brne	.+2      	; 0x6ce <__ultoa_invert+0x48>
 6cc:	68 94       	set
 6ce:	3f 91       	pop	r19
 6d0:	2a e0       	ldi	r18, 0x0A	; 10
 6d2:	26 9f       	mul	r18, r22
 6d4:	11 24       	eor	r1, r1
 6d6:	30 19       	sub	r19, r0
 6d8:	30 5d       	subi	r19, 0xD0	; 208
 6da:	31 93       	st	Z+, r19
 6dc:	de f6       	brtc	.-74     	; 0x694 <__ultoa_invert+0xe>
 6de:	cf 01       	movw	r24, r30
 6e0:	08 95       	ret
 6e2:	46 2f       	mov	r20, r22
 6e4:	47 70       	andi	r20, 0x07	; 7
 6e6:	40 5d       	subi	r20, 0xD0	; 208
 6e8:	41 93       	st	Z+, r20
 6ea:	b3 e0       	ldi	r27, 0x03	; 3
 6ec:	0f d0       	rcall	.+30     	; 0x70c <__ultoa_invert+0x86>
 6ee:	c9 f7       	brne	.-14     	; 0x6e2 <__ultoa_invert+0x5c>
 6f0:	f6 cf       	rjmp	.-20     	; 0x6de <__ultoa_invert+0x58>
 6f2:	46 2f       	mov	r20, r22
 6f4:	4f 70       	andi	r20, 0x0F	; 15
 6f6:	40 5d       	subi	r20, 0xD0	; 208
 6f8:	4a 33       	cpi	r20, 0x3A	; 58
 6fa:	18 f0       	brcs	.+6      	; 0x702 <__ultoa_invert+0x7c>
 6fc:	49 5d       	subi	r20, 0xD9	; 217
 6fe:	31 fd       	sbrc	r19, 1
 700:	40 52       	subi	r20, 0x20	; 32
 702:	41 93       	st	Z+, r20
 704:	02 d0       	rcall	.+4      	; 0x70a <__ultoa_invert+0x84>
 706:	a9 f7       	brne	.-22     	; 0x6f2 <__ultoa_invert+0x6c>
 708:	ea cf       	rjmp	.-44     	; 0x6de <__ultoa_invert+0x58>
 70a:	b4 e0       	ldi	r27, 0x04	; 4
 70c:	a6 95       	lsr	r26
 70e:	97 95       	ror	r25
 710:	87 95       	ror	r24
 712:	77 95       	ror	r23
 714:	67 95       	ror	r22
 716:	ba 95       	dec	r27
 718:	c9 f7       	brne	.-14     	; 0x70c <__ultoa_invert+0x86>
 71a:	00 97       	sbiw	r24, 0x00	; 0
 71c:	61 05       	cpc	r22, r1
 71e:	71 05       	cpc	r23, r1
 720:	08 95       	ret
 722:	9b 01       	movw	r18, r22
 724:	ac 01       	movw	r20, r24
 726:	0a 2e       	mov	r0, r26
 728:	06 94       	lsr	r0
 72a:	57 95       	ror	r21
 72c:	47 95       	ror	r20
 72e:	37 95       	ror	r19
 730:	27 95       	ror	r18
 732:	ba 95       	dec	r27
 734:	c9 f7       	brne	.-14     	; 0x728 <__ultoa_invert+0xa2>
 736:	62 0f       	add	r22, r18
 738:	73 1f       	adc	r23, r19
 73a:	84 1f       	adc	r24, r20
 73c:	95 1f       	adc	r25, r21
 73e:	a0 1d       	adc	r26, r0
 740:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000ada <__prologue_saves__>:
 ada:	2f 92       	push	r2
 adc:	3f 92       	push	r3
 ade:	4f 92       	push	r4
 ae0:	5f 92       	push	r5
 ae2:	6f 92       	push	r6
 ae4:	7f 92       	push	r7
 ae6:	8f 92       	push	r8
 ae8:	9f 92       	push	r9
 aea:	af 92       	push	r10
 aec:	bf 92       	push	r11
 aee:	cf 92       	push	r12
 af0:	df 92       	push	r13
 af2:	ef 92       	push	r14
 af4:	ff 92       	push	r15
 af6:	0f 93       	push	r16
 af8:	1f 93       	push	r17
 afa:	cf 93       	push	r28
 afc:	df 93       	push	r29
 afe:	cd b7       	in	r28, 0x3d	; 61
 b00:	de b7       	in	r29, 0x3e	; 62
 b02:	ca 1b       	sub	r28, r26
 b04:	db 0b       	sbc	r29, r27
 b06:	0f b6       	in	r0, 0x3f	; 63
 b08:	f8 94       	cli
 b0a:	de bf       	out	0x3e, r29	; 62
 b0c:	0f be       	out	0x3f, r0	; 63
 b0e:	cd bf       	out	0x3d, r28	; 61
 b10:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00000b48 <__epilogue_restores__>:
 b48:	2a 88       	ldd	r2, Y+18	; 0x12
 b4a:	39 88       	ldd	r3, Y+17	; 0x11
 b4c:	48 88       	ldd	r4, Y+16	; 0x10
 b4e:	5f 84       	ldd	r5, Y+15	; 0x0f
 b50:	6e 84       	ldd	r6, Y+14	; 0x0e
 b52:	7d 84       	ldd	r7, Y+13	; 0x0d
 b54:	8c 84       	ldd	r8, Y+12	; 0x0c
 b56:	9b 84       	ldd	r9, Y+11	; 0x0b
 b58:	aa 84       	ldd	r10, Y+10	; 0x0a
 b5a:	b9 84       	ldd	r11, Y+9	; 0x09
 b5c:	c8 84       	ldd	r12, Y+8	; 0x08
 b5e:	df 80       	ldd	r13, Y+7	; 0x07
 b60:	ee 80       	ldd	r14, Y+6	; 0x06
 b62:	fd 80       	ldd	r15, Y+5	; 0x05
 b64:	0c 81       	ldd	r16, Y+4	; 0x04
 b66:	1b 81       	ldd	r17, Y+3	; 0x03
 b68:	aa 81       	ldd	r26, Y+2	; 0x02
 b6a:	b9 81       	ldd	r27, Y+1	; 0x01
 b6c:	ce 0f       	add	r28, r30
 b6e:	d1 1d       	adc	r29, r1
 b70:	0f b6       	in	r0, 0x3f	; 63
 b72:	f8 94       	cli
 b74:	de bf       	out	0x3e, r29	; 62
 b76:	0f be       	out	0x3f, r0	; 63
 b78:	cd bf       	out	0x3d, r28	; 61
 b7a:	ed 01       	movw	r28, r26
 b7c:	08 95       	ret
