
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000c86  00000d1a  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005b  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000128  00000000  00000000  00000d78  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000225b  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000e51  00000000  00000000  000030fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000a6b  00000000  00000000  00003f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000022c  00000000  00000000  000049b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000466  00000000  00000000  00004be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000775  00000000  00000000  0000504a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b8  00000000  00000000  000057bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000c80  00000c80  00000d14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005878  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000062  00000858  00000858  000008ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.hmi_init 0000000a  00000c6e  00000c6e  00000d02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.output_msg 00000052  000009ca  000009ca  00000a5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.write_4bit_msb 0000001c  00000c0e  00000c0e  00000ca2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_write 00000030  00000b70  00000b70  00000c04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_clear 00000010  00000c52  00000c52  00000ce6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_set_cursor_mode 0000000c  00000c62  00000c62  00000cf6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lcd_init 00000060  000008ba  000008ba  0000094e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.lcd_set_cursor_pos 00000014  00000c2a  00000c2a  00000cbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.lcd_write_str 00000038  00000a62  00000a62  00000af6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data 0000003f  00000108  00000108  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.main    00000124  0000059c  0000059c  00000630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.numkey_init 00000008  00000c78  00000c78  00000d0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.numkey_read 00000056  00000974  00000974  00000a08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .progmemx.data.key_map 0000000c  00000147  00000147  000001db  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 28 .text.__vector_29 00000014  00000c3e  00000c3e  00000cd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.temp_init 00000032  00000b3e  00000b3e  00000bd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.temp_read_celsius 00000064  000007f4  000007f4  00000888  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.temp_read_fahrenheit 0000005a  0000091a  0000091a  000009ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .data.adc     00000002  00800100  00000c84  00000d18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 33 .text.libgcc.div 00000028  00000ba0  00000ba0  00000c34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.libgcc.mul 0000001e  00000bf0  00000bf0  00000c84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.libgcc.div 00000028  00000bc8  00000bc8  00000c5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.avrlibc 00000046  00000a1c  00000a1c  00000ab0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.avrlibc 00000448  00000154  00000154  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.avrlibc 00000036  00000ad2  00000ad2  00000b66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.avrlibc 00000078  0000077c  0000077c  00000810  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc 000000bc  000006c0  000006c0  00000754  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.libgcc.prologue 00000038  00000a9a  00000a9a  00000b2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.libgcc.prologue 00000036  00000b08  00000b08  00000b9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
   8:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
   c:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  10:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  14:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  18:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  1c:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  20:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  24:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  28:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  2c:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  30:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  34:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  38:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  3c:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  40:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  44:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  48:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  4c:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  50:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  54:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  58:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  5c:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  60:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  64:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  68:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  6c:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  70:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  74:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__vector_29>
  78:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  7c:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  80:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  84:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  88:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  8c:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  90:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  94:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  98:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  9c:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  a0:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  a4:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>
  a8:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__bad_interrupt>

000000ac <.dinit>:
  ac:	01 00       	.word	0x0001	; ????
  ae:	01 02       	muls	r16, r17
  b0:	00 0c       	add	r0, r0
  b2:	84 00       	.word	0x0084	; ????

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	da e0       	ldi	r29, 0x0A	; 10
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	ec ea       	ldi	r30, 0xAC	; 172
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	17 c0       	rjmp	.+46     	; 0xf6 <__do_clear_bss+0x8>
  c8:	b5 91       	lpm	r27, Z+
  ca:	a5 91       	lpm	r26, Z+
  cc:	35 91       	lpm	r19, Z+
  ce:	25 91       	lpm	r18, Z+
  d0:	05 91       	lpm	r16, Z+
  d2:	07 fd       	sbrc	r16, 7
  d4:	0c c0       	rjmp	.+24     	; 0xee <__do_clear_bss>
  d6:	95 91       	lpm	r25, Z+
  d8:	85 91       	lpm	r24, Z+
  da:	ef 01       	movw	r28, r30
  dc:	f9 2f       	mov	r31, r25
  de:	e8 2f       	mov	r30, r24
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a2 17       	cp	r26, r18
  e6:	b3 07       	cpc	r27, r19
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0x20>
  ea:	fe 01       	movw	r30, r28
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <__do_clear_bss+0x8>

000000ee <__do_clear_bss>:
  ee:	1d 92       	st	X+, r1
  f0:	a2 17       	cp	r26, r18
  f2:	b3 07       	cpc	r27, r19
  f4:	e1 f7       	brne	.-8      	; 0xee <__do_clear_bss>
  f6:	e3 3b       	cpi	r30, 0xB3	; 179
  f8:	f4 07       	cpc	r31, r20
  fa:	31 f7       	brne	.-52     	; 0xc8 <__do_copy_data+0x8>
  fc:	0e 94 ce 02 	call	0x59c	; 0x59c <main>
 100:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>

Disassembly of section .text:

00000c80 <__bad_interrupt>:
 c80:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text:

00000858 <delay_1_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	RET
 864:	08 95       	ret

00000866 <delay_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	DEC R24
 87e:	8a 95       	dec	r24
	CPI R24, 0			; more loops to do?
 880:	80 30       	cpi	r24, 0x00	; 0
	BRNE delay_micros	;	continue!
 882:	89 f7       	brne	.-30     	; 0x866 <delay_micros>
	RET
 884:	08 95       	ret

00000886 <delay_ms>:
; Delay of X ms
;	LDI + RCALL = 4 cycles
;==============================================================================
.global delay_ms	
delay_ms:
	MOV R18, R24
 886:	28 2f       	mov	r18, r24

00000888 <loop_dms>:
loop_dms:
	LDI R24, 250
 888:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 88a:	ed df       	rcall	.-38     	; 0x866 <delay_micros>
	LDI R24, 250
 88c:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 88e:	eb df       	rcall	.-42     	; 0x866 <delay_micros>
	LDI R24, 250
 890:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 892:	e9 df       	rcall	.-46     	; 0x866 <delay_micros>
	LDI R24, 250
 894:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 896:	e7 df       	rcall	.-50     	; 0x866 <delay_micros>
	DEC R18
 898:	2a 95       	dec	r18
	CPI R18, 0			; more loops to do?
 89a:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 89c:	a9 f7       	brne	.-22     	; 0x888 <loop_dms>
	RET
 89e:	08 95       	ret

000008a0 <delay_s>:
;==============================================================================
; Delay seconds. R24 input.
;==============================================================================
.global delay_s	
delay_s:
	MOV R19, R24
 8a0:	38 2f       	mov	r19, r24

000008a2 <loop_s>:
loop_s:
	LDI R24, 250
 8a2:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 8a4:	f0 df       	rcall	.-32     	; 0x886 <delay_ms>
	LDI R24, 250
 8a6:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 8a8:	ee df       	rcall	.-36     	; 0x886 <delay_ms>
	LDI R24, 250
 8aa:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 8ac:	ec df       	rcall	.-40     	; 0x886 <delay_ms>
	LDI R24, 250
 8ae:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 8b0:	ea df       	rcall	.-44     	; 0x886 <delay_ms>
	DEC R19
 8b2:	3a 95       	dec	r19
	CPI R19, 0
 8b4:	30 30       	cpi	r19, 0x00	; 0
	BRNE loop_s
 8b6:	a9 f7       	brne	.-22     	; 0x8a2 <loop_s>
	RET
 8b8:	08 95       	ret

Disassembly of section .text.hmi_init:

00000c6e <hmi_init>:
 *	- init numeric keyboard
 *	- init LCD
 */
void hmi_init(void)
{
	numkey_init();
 c6e:	0e 94 3c 06 	call	0xc78	; 0xc78 <numkey_init>
	lcd_init();
 c72:	0e 94 5d 04 	call	0x8ba	; 0x8ba <lcd_init>
 c76:	08 95       	ret

Disassembly of section .text.output_msg:

000009ca <output_msg>:
			break;
		}
	}
	// return result from conversion
	*p_nr = result;
}
 9ca:	6f 92       	push	r6
 9cc:	7f 92       	push	r7
 9ce:	8f 92       	push	r8
 9d0:	cf 92       	push	r12
 9d2:	df 92       	push	r13
 9d4:	ef 92       	push	r14
 9d6:	0f 93       	push	r16
 9d8:	3b 01       	movw	r6, r22
 9da:	88 2e       	mov	r8, r24
 9dc:	69 01       	movw	r12, r18
 9de:	e4 2e       	mov	r14, r20
 9e0:	8c e0       	ldi	r24, 0x0C	; 12
 9e2:	0e 94 31 06 	call	0xc62	; 0xc62 <lcd_set_cursor_mode>
 9e6:	0e 94 29 06 	call	0xc52	; 0xc52 <lcd_clear>
 9ea:	88 2d       	mov	r24, r8
 9ec:	b3 01       	movw	r22, r6
 9ee:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_write_str>
 9f2:	60 e0       	ldi	r22, 0x00	; 0
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	0e 94 15 06 	call	0xc2a	; 0xc2a <lcd_set_cursor_pos>
 9fa:	8e 2d       	mov	r24, r14
 9fc:	b6 01       	movw	r22, r12
 9fe:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_write_str>
 a02:	00 23       	and	r16, r16
 a04:	19 f0       	breq	.+6      	; 0xa0c <__DATA_REGION_LENGTH__+0xc>
 a06:	80 2f       	mov	r24, r16
 a08:	0e 94 50 04 	call	0x8a0	; 0x8a0 <delay_s>
 a0c:	0f 91       	pop	r16
 a0e:	ef 90       	pop	r14
 a10:	df 90       	pop	r13
 a12:	cf 90       	pop	r12
 a14:	8f 90       	pop	r8
 a16:	7f 90       	pop	r7
 a18:	6f 90       	pop	r6
 a1a:	08 95       	ret

Disassembly of section .text.write_4bit_msb:

00000c0e <write_4bit_msb>:
*	data: 4 bits of data
*/
static void write_4bit_msb(uint8_t data)
{
	//write data
	SET_BIT_LEVELS(PORTF, 0x0F, data);
 c0e:	91 b3       	in	r25, 0x11	; 17
 c10:	9f 70       	andi	r25, 0x0F	; 15
 c12:	80 7f       	andi	r24, 0xF0	; 240
 c14:	89 2b       	or	r24, r25
 c16:	81 bb       	out	0x11, r24	; 17
	// generate pulse on the Enable pin
	SET_BIT(PORTD, 7);
 c18:	8b b1       	in	r24, 0x0b	; 11
 c1a:	80 68       	ori	r24, 0x80	; 128
 c1c:	8b b9       	out	0x0b, r24	; 11
	delay_1_micros();
 c1e:	0e 94 2c 04 	call	0x858	; 0x858 <delay_1_micros>
	CLR_BIT(PORTD, 7);
 c22:	8b b1       	in	r24, 0x0b	; 11
 c24:	8f 77       	andi	r24, 0x7F	; 127
 c26:	8b b9       	out	0x0b, r24	; 11
 c28:	08 95       	ret

Disassembly of section .text.lcd_write:

00000b70 <lcd_write>:
* parameter:
*	lcd_reg: register to communicate with (Instruction or Data register)
*	data: 8-bit instruction or data (character)
*/
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 b70:	cf 93       	push	r28
 b72:	c6 2f       	mov	r28, r22
	// select register
	if (lcd_reg == INSTRUCTION) {
 b74:	81 11       	cpse	r24, r1
 b76:	04 c0       	rjmp	.+8      	; 0xb80 <lcd_write+0x10>
		CLR_BIT(PORTD, 6);	// Instruction Register
 b78:	8b b1       	in	r24, 0x0b	; 11
 b7a:	8f 7b       	andi	r24, 0xBF	; 191
 b7c:	8b b9       	out	0x0b, r24	; 11
 b7e:	03 c0       	rjmp	.+6      	; 0xb86 <lcd_write+0x16>
		} else {
		SET_BIT(PORTD, 6);	// Data Register
 b80:	8b b1       	in	r24, 0x0b	; 11
 b82:	80 64       	ori	r24, 0x40	; 64
 b84:	8b b9       	out	0x0b, r24	; 11
	}
	// write data
	write_4bit_msb(data);
 b86:	8c 2f       	mov	r24, r28
 b88:	0e 94 07 06 	call	0xc0e	; 0xc0e <write_4bit_msb>
	write_4bit_msb(data << 4);
 b8c:	8c 2f       	mov	r24, r28
 b8e:	82 95       	swap	r24
 b90:	80 7f       	andi	r24, 0xF0	; 240
 b92:	0e 94 07 06 	call	0xc0e	; 0xc0e <write_4bit_msb>
	delay_micros(45);
 b96:	8d e2       	ldi	r24, 0x2D	; 45
 b98:	0e 94 33 04 	call	0x866	; 0x866 <delay_micros>
}
 b9c:	cf 91       	pop	r28
 b9e:	08 95       	ret

Disassembly of section .text.lcd_clear:

00000c52 <lcd_clear>:
/*
* Clears the LCD and moves the cursor to position row 0, column 0.
*/
void lcd_clear(void)
{
	lcd_write(INSTRUCTION, 0x01);
 c52:	61 e0       	ldi	r22, 0x01	; 1
 c54:	80 e0       	ldi	r24, 0x00	; 0
 c56:	0e 94 b8 05 	call	0xb70	; 0xb70 <lcd_write>
	delay_ms(2);
 c5a:	82 e0       	ldi	r24, 0x02	; 2
 c5c:	0e 94 43 04 	call	0x886	; 0x886 <delay_ms>
 c60:	08 95       	ret

Disassembly of section .text.lcd_set_cursor_mode:

00000c62 <lcd_set_cursor_mode>:
*	mode: cursor mode
*/
void lcd_set_cursor_mode(enum lcd_cursor mode)
{
	uint8_t cursor_mode;
	cursor_mode = 0x0C | mode;
 c62:	68 2f       	mov	r22, r24
 c64:	6c 60       	ori	r22, 0x0C	; 12
	lcd_write(INSTRUCTION, cursor_mode);
 c66:	80 e0       	ldi	r24, 0x00	; 0
 c68:	0e 94 b8 05 	call	0xb70	; 0xb70 <lcd_write>
 c6c:	08 95       	ret

Disassembly of section .text.lcd_init:

000008ba <lcd_init>:
*	- configuration of LCD communication
*/
void lcd_init(void)
{
	// PF4-PF7 (A3-A0) as outputs (LCD D4-D7)
	DDRF = 0xF0;
 8ba:	80 ef       	ldi	r24, 0xF0	; 240
 8bc:	80 bb       	out	0x10, r24	; 16
	// PD6 & PD7 (D12 & D6) as outputs (LCD RS & LCD E)
	DDRD = 0xC0;
 8be:	80 ec       	ldi	r24, 0xC0	; 192
 8c0:	8a b9       	out	0x0a, r24	; 10
	
	// wait more than 15 ms after power-up!
	delay_ms(20);
 8c2:	84 e1       	ldi	r24, 0x14	; 20
 8c4:	0e 94 43 04 	call	0x886	; 0x886 <delay_ms>
	// select Instruction Register
	CLR_BIT(PORTD, 6);
 8c8:	8b b1       	in	r24, 0x0b	; 11
 8ca:	8f 7b       	andi	r24, 0xBF	; 191
 8cc:	8b b9       	out	0x0b, r24	; 11

	// Function Set: 8 bit data interface
	write_4bit_msb(0x30);
 8ce:	80 e3       	ldi	r24, 0x30	; 48
 8d0:	0e 94 07 06 	call	0xc0e	; 0xc0e <write_4bit_msb>
	delay_ms(10);
 8d4:	8a e0       	ldi	r24, 0x0A	; 10
 8d6:	0e 94 43 04 	call	0x886	; 0x886 <delay_ms>
	write_4bit_msb(0x30);
 8da:	80 e3       	ldi	r24, 0x30	; 48
 8dc:	0e 94 07 06 	call	0xc0e	; 0xc0e <write_4bit_msb>
	delay_ms(10);
 8e0:	8a e0       	ldi	r24, 0x0A	; 10
 8e2:	0e 94 43 04 	call	0x886	; 0x886 <delay_ms>
	write_4bit_msb(0x30);
 8e6:	80 e3       	ldi	r24, 0x30	; 48
 8e8:	0e 94 07 06 	call	0xc0e	; 0xc0e <write_4bit_msb>
	delay_ms(10);
 8ec:	8a e0       	ldi	r24, 0x0A	; 10
 8ee:	0e 94 43 04 	call	0x886	; 0x886 <delay_ms>

	// Function Set: switch to 4 bit data interface
	write_4bit_msb(0x20);
 8f2:	80 e2       	ldi	r24, 0x20	; 32
 8f4:	0e 94 07 06 	call	0xc0e	; 0xc0e <write_4bit_msb>
	delay_micros(45);
 8f8:	8d e2       	ldi	r24, 0x2D	; 45
 8fa:	0e 94 33 04 	call	0x866	; 0x866 <delay_micros>

	// Function Set: 4 bit data interface, 2 lines, font 5x10
	lcd_write(INSTRUCTION, 0x28);
 8fe:	68 e2       	ldi	r22, 0x28	; 40
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	0e 94 b8 05 	call	0xb70	; 0xb70 <lcd_write>

	// Display on, no cursor
	lcd_set_cursor_mode(CURSOR_OFF);
 906:	8c e0       	ldi	r24, 0x0C	; 12
 908:	0e 94 31 06 	call	0xc62	; 0xc62 <lcd_set_cursor_mode>

	// clear display
	lcd_clear();
 90c:	0e 94 29 06 	call	0xc52	; 0xc52 <lcd_clear>

	// Entry Mode Set: incremental cursor movement, no display shift
	lcd_write(INSTRUCTION, 0x06);
 910:	66 e0       	ldi	r22, 0x06	; 6
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	0e 94 b8 05 	call	0xb70	; 0xb70 <lcd_write>
 918:	08 95       	ret

Disassembly of section .text.lcd_set_cursor_pos:

00000c2a <lcd_set_cursor_pos>:
*	col: 0 is the first column, 15 is the last visible column
*/
void lcd_set_cursor_pos(uint8_t row, uint8_t col)
{
	uint8_t cursor_pos;
	cursor_pos = 0x80 | (row << 6) | col;
 c2a:	20 e4       	ldi	r18, 0x40	; 64
 c2c:	82 9f       	mul	r24, r18
 c2e:	c0 01       	movw	r24, r0
 c30:	11 24       	eor	r1, r1
 c32:	68 2b       	or	r22, r24
 c34:	60 68       	ori	r22, 0x80	; 128
	lcd_write(INSTRUCTION, cursor_pos);
 c36:	80 e0       	ldi	r24, 0x00	; 0
 c38:	0e 94 b8 05 	call	0xb70	; 0xb70 <lcd_write>
 c3c:	08 95       	ret

Disassembly of section .text.lcd_write_str:

00000a62 <lcd_write_str>:
*
* parameter:
*	p_str: pointer to the string's first character
*/
void lcd_write_str(const char *p_str)
{
 a62:	cf 92       	push	r12
 a64:	df 92       	push	r13
 a66:	ef 92       	push	r14
 a68:	cf 93       	push	r28
 a6a:	6b 01       	movw	r12, r22
 a6c:	e8 2e       	mov	r14, r24
	uint8_t i =0;
 a6e:	c0 e0       	ldi	r28, 0x00	; 0
	while (p_str[i] !='\0')
 a70:	04 c0       	rjmp	.+8      	; 0xa7a <lcd_write_str+0x18>
	{
		lcd_write(DATA, p_str[i]);
 a72:	81 e0       	ldi	r24, 0x01	; 1
 a74:	0e 94 b8 05 	call	0xb70	; 0xb70 <lcd_write>
		i++;
 a78:	cf 5f       	subi	r28, 0xFF	; 255
*	p_str: pointer to the string's first character
*/
void lcd_write_str(const char *p_str)
{
	uint8_t i =0;
	while (p_str[i] !='\0')
 a7a:	ae 2d       	mov	r26, r14
 a7c:	c6 01       	movw	r24, r12
 a7e:	8c 0f       	add	r24, r28
 a80:	91 1d       	adc	r25, r1
 a82:	a1 1d       	adc	r26, r1
 a84:	fc 01       	movw	r30, r24
 a86:	64 91       	lpm	r22, Z
 a88:	a7 fd       	sbrc	r26, 7
 a8a:	60 81       	ld	r22, Z
 a8c:	61 11       	cpse	r22, r1
 a8e:	f1 cf       	rjmp	.-30     	; 0xa72 <lcd_write_str+0x10>
	{
		lcd_write(DATA, p_str[i]);
		i++;
	}
 a90:	cf 91       	pop	r28
 a92:	ef 90       	pop	r14
 a94:	df 90       	pop	r13
 a96:	cf 90       	pop	r12
 a98:	08 95       	ret

Disassembly of section .text.main:

0000059c <main>:
};

typedef enum state state_t;

int main(void)
{
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	cd b7       	in	r28, 0x3d	; 61
 5a2:	de b7       	in	r29, 0x3e	; 62
 5a4:	61 97       	sbiw	r28, 0x11	; 17
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	f8 94       	cli
 5aa:	de bf       	out	0x3e, r29	; 62
 5ac:	0f be       	out	0x3f, r0	; 63
 5ae:	cd bf       	out	0x3d, r28	; 61
	hmi_init();
 5b0:	0e 94 37 06 	call	0xc6e	; 0xc6e <hmi_init>
	numkey_init();
 5b4:	0e 94 3c 06 	call	0xc78	; 0xc78 <numkey_init>
	temp_init();
 5b8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <temp_init>
	char temp_str[17]; 
	
	state_t currentState = SHOW_TEMP_C;
	state_t nextState = SHOW_TEMP_C;
	
	output_msg("Press 1-3","To change mode", 0);
 5bc:	00 e0       	ldi	r16, 0x00	; 0
 5be:	28 e0       	ldi	r18, 0x08	; 8
 5c0:	31 e0       	ldi	r19, 0x01	; 1
 5c2:	40 e0       	ldi	r20, 0x00	; 0
 5c4:	67 e1       	ldi	r22, 0x17	; 23
 5c6:	71 e0       	ldi	r23, 0x01	; 1
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	0e 94 e5 04 	call	0x9ca	; 0x9ca <output_msg>
	temp_init();
	
	char key;
	char temp_str[17]; 
	
	state_t currentState = SHOW_TEMP_C;
 5ce:	f1 2c       	mov	r15, r1
	
	output_msg("Press 1-3","To change mode", 0);
	
    while(1)
    {
        switch (currentState)
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	f8 16       	cp	r15, r24
 5d4:	f9 f0       	breq	.+62     	; 0x614 <main+0x78>
 5d6:	f8 16       	cp	r15, r24
 5d8:	20 f0       	brcs	.+8      	; 0x5e2 <main+0x46>
 5da:	92 e0       	ldi	r25, 0x02	; 2
 5dc:	f9 16       	cp	r15, r25
 5de:	99 f1       	breq	.+102    	; 0x646 <main+0xaa>
 5e0:	51 c0       	rjmp	.+162    	; 0x684 <main+0xe8>
        {
	        case SHOW_TEMP_C:
			sprintf(temp_str,"%u%cC",temp_read_celsius(),0xDF);
 5e2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <temp_read_celsius>
 5e6:	1f 92       	push	r1
 5e8:	9f ed       	ldi	r25, 0xDF	; 223
 5ea:	9f 93       	push	r25
 5ec:	1f 92       	push	r1
 5ee:	8f 93       	push	r24
 5f0:	81 e2       	ldi	r24, 0x21	; 33
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	a0 e0       	ldi	r26, 0x00	; 0
 5f6:	af 93       	push	r26
 5f8:	9f 93       	push	r25
 5fa:	8f 93       	push	r24
 5fc:	ce 01       	movw	r24, r28
 5fe:	01 96       	adiw	r24, 0x01	; 1
 600:	9f 93       	push	r25
 602:	8f 93       	push	r24
 604:	0e 94 0e 05 	call	0xa1c	; 0xa1c <sprintf>
			
		
	        break;
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	f8 94       	cli
 60c:	de bf       	out	0x3e, r29	; 62
 60e:	0f be       	out	0x3f, r0	; 63
 610:	cd bf       	out	0x3d, r28	; 61
 612:	38 c0       	rjmp	.+112    	; 0x684 <main+0xe8>
			case SHOW_TEMP_F:
			sprintf(temp_str,"%u%cF",temp_read_fahrenheit(),0xDF);
 614:	0e 94 8d 04 	call	0x91a	; 0x91a <temp_read_fahrenheit>
 618:	1f 92       	push	r1
 61a:	9f ed       	ldi	r25, 0xDF	; 223
 61c:	9f 93       	push	r25
 61e:	1f 92       	push	r1
 620:	8f 93       	push	r24
 622:	87 e2       	ldi	r24, 0x27	; 39
 624:	91 e0       	ldi	r25, 0x01	; 1
 626:	a0 e0       	ldi	r26, 0x00	; 0
 628:	af 93       	push	r26
 62a:	9f 93       	push	r25
 62c:	8f 93       	push	r24
 62e:	ce 01       	movw	r24, r28
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	9f 93       	push	r25
 634:	8f 93       	push	r24
 636:	0e 94 0e 05 	call	0xa1c	; 0xa1c <sprintf>
			
			
			break;
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	f8 94       	cli
 63e:	de bf       	out	0x3e, r29	; 62
 640:	0f be       	out	0x3f, r0	; 63
 642:	cd bf       	out	0x3d, r28	; 61
 644:	1f c0       	rjmp	.+62     	; 0x684 <main+0xe8>
			case SHOW_TEMP_CF:
			sprintf(temp_str,"%u%cC, %u%cF",temp_read_celsius(),0xDF,temp_read_fahrenheit(),0xDF);
 646:	0e 94 8d 04 	call	0x91a	; 0x91a <temp_read_fahrenheit>
 64a:	18 2f       	mov	r17, r24
 64c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <temp_read_celsius>
 650:	1f 92       	push	r1
 652:	9f ed       	ldi	r25, 0xDF	; 223
 654:	9f 93       	push	r25
 656:	1f 92       	push	r1
 658:	1f 93       	push	r17
 65a:	1f 92       	push	r1
 65c:	9f 93       	push	r25
 65e:	1f 92       	push	r1
 660:	8f 93       	push	r24
 662:	8d e2       	ldi	r24, 0x2D	; 45
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	a0 e0       	ldi	r26, 0x00	; 0
 668:	af 93       	push	r26
 66a:	9f 93       	push	r25
 66c:	8f 93       	push	r24
 66e:	ce 01       	movw	r24, r28
 670:	01 96       	adiw	r24, 0x01	; 1
 672:	9f 93       	push	r25
 674:	8f 93       	push	r24
 676:	0e 94 0e 05 	call	0xa1c	; 0xa1c <sprintf>
			

			break;
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	f8 94       	cli
 67e:	de bf       	out	0x3e, r29	; 62
 680:	0f be       	out	0x3f, r0	; 63
 682:	cd bf       	out	0x3d, r28	; 61

        }
		output_msg("TEMPERATURE:", temp_str,0);
 684:	9e 01       	movw	r18, r28
 686:	2f 5f       	subi	r18, 0xFF	; 255
 688:	3f 4f       	sbci	r19, 0xFF	; 255
 68a:	40 e8       	ldi	r20, 0x80	; 128
 68c:	00 e0       	ldi	r16, 0x00	; 0
 68e:	6a e3       	ldi	r22, 0x3A	; 58
 690:	71 e0       	ldi	r23, 0x01	; 1
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	0e 94 e5 04 	call	0x9ca	; 0x9ca <output_msg>
			
		
		while(currentState == nextState)
 698:	1f 2d       	mov	r17, r15
 69a:	0e c0       	rjmp	.+28     	; 0x6b8 <main+0x11c>
		{
			key = numkey_read();
 69c:	0e 94 ba 04 	call	0x974	; 0x974 <numkey_read>
			switch (key)
 6a0:	82 33       	cpi	r24, 0x32	; 50
 6a2:	29 f0       	breq	.+10     	; 0x6ae <main+0x112>
 6a4:	83 33       	cpi	r24, 0x33	; 51
 6a6:	29 f0       	breq	.+10     	; 0x6b2 <main+0x116>
 6a8:	81 33       	cpi	r24, 0x31	; 49
 6aa:	31 f4       	brne	.+12     	; 0x6b8 <main+0x11c>
 6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <main+0x11a>
			{
				case '1':
				nextState = SHOW_TEMP_C;
				break;
				case '2':
				nextState = SHOW_TEMP_F;
 6ae:	11 e0       	ldi	r17, 0x01	; 1
				break;
 6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <main+0x11c>
				case '3':
				nextState = SHOW_TEMP_CF;
 6b2:	12 e0       	ldi	r17, 0x02	; 2
				break;
 6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <main+0x11c>
		{
			key = numkey_read();
			switch (key)
			{
				case '1':
				nextState = SHOW_TEMP_C;
 6b6:	10 e0       	ldi	r17, 0x00	; 0

        }
		output_msg("TEMPERATURE:", temp_str,0);
			
		
		while(currentState == nextState)
 6b8:	f1 16       	cp	r15, r17
 6ba:	81 f3       	breq	.-32     	; 0x69c <main+0x100>
				
				break;
			}
			
		}
		currentState = nextState;
 6bc:	f1 2e       	mov	r15, r17
 6be:	88 cf       	rjmp	.-240    	; 0x5d0 <main+0x34>

Disassembly of section .text.numkey_init:

00000c78 <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// PE6 (D7) as input (key pressed?)
	DDRE = 0x00;
 c78:	1d b8       	out	0x0d, r1	; 13
	// PB4-PB7 (D8-D11) as outputs (MUX and decoder)
	DDRB = 0xF0;
 c7a:	80 ef       	ldi	r24, 0xF0	; 240
 c7c:	84 b9       	out	0x04, r24	; 4
 c7e:	08 95       	ret

Disassembly of section .text.numkey_read:

00000974 <numkey_read>:
 * return:
 *	If a key is pressed, then a character that represents the key is returned.
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
 974:	0f 93       	push	r16
 976:	1f 93       	push	r17
 978:	cf 93       	push	r28
	uint8_t	i;
	for (i = 0; i < sizeof(key_map); i++)
 97a:	c0 e0       	ldi	r28, 0x00	; 0
 97c:	1f c0       	rjmp	.+62     	; 0x9bc <numkey_read+0x48>
	{
		SET_BIT_LEVELS(PORTB,0x0F, i << 4); // skickar till portb
 97e:	25 b1       	in	r18, 0x05	; 5
 980:	0c 2f       	mov	r16, r28
 982:	10 e0       	ldi	r17, 0x00	; 0
 984:	c8 01       	movw	r24, r16
 986:	82 95       	swap	r24
 988:	92 95       	swap	r25
 98a:	90 7f       	andi	r25, 0xF0	; 240
 98c:	98 27       	eor	r25, r24
 98e:	80 7f       	andi	r24, 0xF0	; 240
 990:	98 27       	eor	r25, r24
 992:	92 2f       	mov	r25, r18
 994:	9f 70       	andi	r25, 0x0F	; 15
 996:	89 2b       	or	r24, r25
 998:	85 b9       	out	0x05, r24	; 5
		delay_ms(1);						// delay för knappstuds
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	0e 94 43 04 	call	0x886	; 0x886 <delay_ms>
		if (PINE & 0b01000000)				// kolla på PINE,6 om == 1
 9a0:	66 9b       	sbis	0x0c, 6	; 12
 9a2:	0b c0       	rjmp	.+22     	; 0x9ba <numkey_read+0x46>
		{
			return key_map[i];
 9a4:	c8 01       	movw	r24, r16
 9a6:	11 0f       	add	r17, r17
 9a8:	aa 0b       	sbc	r26, r26
 9aa:	89 5b       	subi	r24, 0xB9	; 185
 9ac:	9e 4f       	sbci	r25, 0xFE	; 254
 9ae:	af 4f       	sbci	r26, 0xFF	; 255
 9b0:	fc 01       	movw	r30, r24
 9b2:	84 91       	lpm	r24, Z
 9b4:	a7 fd       	sbrc	r26, 7
 9b6:	80 81       	ld	r24, Z
 9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <numkey_read+0x4e>
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
	uint8_t	i;
	for (i = 0; i < sizeof(key_map); i++)
 9ba:	cf 5f       	subi	r28, 0xFF	; 255
 9bc:	cc 30       	cpi	r28, 0x0C	; 12
 9be:	f8 f2       	brcs	.-66     	; 0x97e <numkey_read+0xa>
			//}
	}
	
	
	// no key was pressed!
	return NO_KEY;
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	cf 91       	pop	r28
 9c4:	1f 91       	pop	r17
 9c6:	0f 91       	pop	r16
 9c8:	08 95       	ret

Disassembly of section .text.__vector_29:

00000c3e <__vector_29>:
/*
 * Interrupt Service Routine for the ADC.
 * The ISR will execute when a A/D conversion is complete.
 */
ISR(ADC_vect)
{
 c3e:	1f 92       	push	r1
 c40:	0f 92       	push	r0
 c42:	0f b6       	in	r0, 0x3f	; 63
 c44:	0f 92       	push	r0
 c46:	11 24       	eor	r1, r1
	// read ADC value
					// UPPGIFT: Läs in ADC-värdet. Börja med att läsa av det "låga" registret, därefter det "höga" registret!
}
 c48:	0f 90       	pop	r0
 c4a:	0f be       	out	0x3f, r0	; 63
 c4c:	0f 90       	pop	r0
 c4e:	1f 90       	pop	r1
 c50:	18 95       	reti

Disassembly of section .text.temp_init:

00000b3e <temp_init>:
 * Initialize the ADC and ISR.
 */
void temp_init(void)
{
	// UPPGIFT: konfigurera ADC-enheten genom ställa in ADMUX och ADCSRA enligt kommentarerna nedanför!
	ADMUX |= 0;		// set reference voltage (internal 5V)
 b3e:	ec e7       	ldi	r30, 0x7C	; 124
 b40:	f0 e0       	ldi	r31, 0x00	; 0
 b42:	80 81       	ld	r24, Z
 b44:	80 83       	st	Z, r24
	ADMUX |= 0;					// select diff.amp 10x on ADC0 & ADC1
 b46:	80 81       	ld	r24, Z
 b48:	80 83       	st	Z, r24
								// right adjustment of ADC value
	
	ADCSRA |= 0;				// prescaler 128
 b4a:	ea e7       	ldi	r30, 0x7A	; 122
 b4c:	f0 e0       	ldi	r31, 0x00	; 0
 b4e:	80 81       	ld	r24, Z
 b50:	80 83       	st	Z, r24
	ADCSRA |= 0;		// enable Auto Trigger
 b52:	80 81       	ld	r24, Z
 b54:	80 83       	st	Z, r24
	ADCSRA |= 0;		// enable Interrupt
 b56:	80 81       	ld	r24, Z
 b58:	80 83       	st	Z, r24
	ADCSRA |= 0;		// enable ADC
 b5a:	80 81       	ld	r24, Z
 b5c:	80 83       	st	Z, r24

	// disable digital input on ADC0 and ADC1
	DIDR0 = 3;
 b5e:	83 e0       	ldi	r24, 0x03	; 3
 b60:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
		
	// disable USB controller (to make interrupts possible)
	USBCON = 0;	
 b64:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	// enable global interrupts
	sei();
 b68:	78 94       	sei

	// start initial conversion
	ADCSRA |= 0;	// UPPGIFT: gör så att den initiala A/D-omvandlingen sker
 b6a:	80 81       	ld	r24, Z
 b6c:	80 83       	st	Z, r24
 b6e:	08 95       	ret

Disassembly of section .text.temp_read_celsius:

000007f4 <temp_read_celsius>:

/*
 * Returns the temperature in Celsius.
 */
uint8_t temp_read_celsius(void)
{
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29
	uint16_t adc_correction = adc * 98;
 7f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 800:	22 e6       	ldi	r18, 0x62	; 98
 802:	28 9f       	mul	r18, r24
 804:	a0 01       	movw	r20, r0
 806:	29 9f       	mul	r18, r25
 808:	50 0d       	add	r21, r0
 80a:	11 24       	eor	r1, r1
	uint16_t temp = adc_correction / 1000;
 80c:	ea 01       	movw	r28, r20
 80e:	d6 95       	lsr	r29
 810:	c7 95       	ror	r28
 812:	d6 95       	lsr	r29
 814:	c7 95       	ror	r28
 816:	d6 95       	lsr	r29
 818:	c7 95       	ror	r28
 81a:	9e 01       	movw	r18, r28
 81c:	a5 ec       	ldi	r26, 0xC5	; 197
 81e:	b0 e2       	ldi	r27, 0x20	; 32
 820:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__umulhisi3>
 824:	fc 01       	movw	r30, r24
 826:	f2 95       	swap	r31
 828:	e2 95       	swap	r30
 82a:	ef 70       	andi	r30, 0x0F	; 15
 82c:	ef 27       	eor	r30, r31
 82e:	ff 70       	andi	r31, 0x0F	; 15
 830:	ef 27       	eor	r30, r31
	// round up?
	if ((adc_correction % 1000) >= 500) {
 832:	28 ee       	ldi	r18, 0xE8	; 232
 834:	33 e0       	ldi	r19, 0x03	; 3
 836:	e2 9f       	mul	r30, r18
 838:	c0 01       	movw	r24, r0
 83a:	e3 9f       	mul	r30, r19
 83c:	90 0d       	add	r25, r0
 83e:	f2 9f       	mul	r31, r18
 840:	90 0d       	add	r25, r0
 842:	11 24       	eor	r1, r1
 844:	48 1b       	sub	r20, r24
 846:	59 0b       	sbc	r21, r25
 848:	44 3f       	cpi	r20, 0xF4	; 244
 84a:	51 40       	sbci	r21, 0x01	; 1
 84c:	08 f0       	brcs	.+2      	; 0x850 <temp_read_celsius+0x5c>
		temp++;
 84e:	31 96       	adiw	r30, 0x01	; 1
	}
	return (uint8_t) temp;
}
 850:	8e 2f       	mov	r24, r30
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	08 95       	ret

Disassembly of section .text.temp_read_fahrenheit:

0000091a <temp_read_fahrenheit>:
 * Returns the temperature in Fahrenheit.
 */
uint8_t temp_read_fahrenheit(void)
{
	
	uint16_t convert = ((temp_read_celsius() * 90) / 5) + 320;
 91a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <temp_read_celsius>
 91e:	2a e5       	ldi	r18, 0x5A	; 90
 920:	82 9f       	mul	r24, r18
 922:	c0 01       	movw	r24, r0
 924:	11 24       	eor	r1, r1
 926:	65 e0       	ldi	r22, 0x05	; 5
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__divmodhi4>
 92e:	ab 01       	movw	r20, r22
 930:	40 5c       	subi	r20, 0xC0	; 192
 932:	5e 4f       	sbci	r21, 0xFE	; 254
	uint16_t temp = convert / 10;
 934:	9a 01       	movw	r18, r20
 936:	ad ec       	ldi	r26, 0xCD	; 205
 938:	bc ec       	ldi	r27, 0xCC	; 204
 93a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__umulhisi3>
 93e:	fc 01       	movw	r30, r24
 940:	f6 95       	lsr	r31
 942:	e7 95       	ror	r30
 944:	f6 95       	lsr	r31
 946:	e7 95       	ror	r30
 948:	f6 95       	lsr	r31
 94a:	e7 95       	ror	r30
	// round up?
	if ((convert % 10) >= 5) {
 94c:	9f 01       	movw	r18, r30
 94e:	22 0f       	add	r18, r18
 950:	33 1f       	adc	r19, r19
 952:	cf 01       	movw	r24, r30
 954:	88 0f       	add	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	88 0f       	add	r24, r24
 95a:	99 1f       	adc	r25, r25
 95c:	88 0f       	add	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	82 0f       	add	r24, r18
 962:	93 1f       	adc	r25, r19
 964:	48 1b       	sub	r20, r24
 966:	59 0b       	sbc	r21, r25
 968:	45 30       	cpi	r20, 0x05	; 5
 96a:	51 05       	cpc	r21, r1
 96c:	08 f0       	brcs	.+2      	; 0x970 <temp_read_fahrenheit+0x56>
		temp++;
 96e:	31 96       	adiw	r30, 0x01	; 1
	}
	return (uint8_t) temp;
 970:	8e 2f       	mov	r24, r30
 972:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000ba0 <__divmodhi4>:
 ba0:	97 fb       	bst	r25, 7
 ba2:	07 2e       	mov	r0, r23
 ba4:	16 f4       	brtc	.+4      	; 0xbaa <__divmodhi4+0xa>
 ba6:	00 94       	com	r0
 ba8:	07 d0       	rcall	.+14     	; 0xbb8 <__divmodhi4_neg1>
 baa:	77 fd       	sbrc	r23, 7
 bac:	09 d0       	rcall	.+18     	; 0xbc0 <__divmodhi4_neg2>
 bae:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__udivmodhi4>
 bb2:	07 fc       	sbrc	r0, 7
 bb4:	05 d0       	rcall	.+10     	; 0xbc0 <__divmodhi4_neg2>
 bb6:	3e f4       	brtc	.+14     	; 0xbc6 <__divmodhi4_exit>

00000bb8 <__divmodhi4_neg1>:
 bb8:	90 95       	com	r25
 bba:	81 95       	neg	r24
 bbc:	9f 4f       	sbci	r25, 0xFF	; 255
 bbe:	08 95       	ret

00000bc0 <__divmodhi4_neg2>:
 bc0:	70 95       	com	r23
 bc2:	61 95       	neg	r22
 bc4:	7f 4f       	sbci	r23, 0xFF	; 255

00000bc6 <__divmodhi4_exit>:
 bc6:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000bf0 <__umulhisi3>:
 bf0:	a2 9f       	mul	r26, r18
 bf2:	b0 01       	movw	r22, r0
 bf4:	b3 9f       	mul	r27, r19
 bf6:	c0 01       	movw	r24, r0
 bf8:	a3 9f       	mul	r26, r19
 bfa:	70 0d       	add	r23, r0
 bfc:	81 1d       	adc	r24, r1
 bfe:	11 24       	eor	r1, r1
 c00:	91 1d       	adc	r25, r1
 c02:	b2 9f       	mul	r27, r18
 c04:	70 0d       	add	r23, r0
 c06:	81 1d       	adc	r24, r1
 c08:	11 24       	eor	r1, r1
 c0a:	91 1d       	adc	r25, r1
 c0c:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000bc8 <__udivmodhi4>:
 bc8:	aa 1b       	sub	r26, r26
 bca:	bb 1b       	sub	r27, r27
 bcc:	51 e1       	ldi	r21, 0x11	; 17
 bce:	07 c0       	rjmp	.+14     	; 0xbde <__udivmodhi4_ep>

00000bd0 <__udivmodhi4_loop>:
 bd0:	aa 1f       	adc	r26, r26
 bd2:	bb 1f       	adc	r27, r27
 bd4:	a6 17       	cp	r26, r22
 bd6:	b7 07       	cpc	r27, r23
 bd8:	10 f0       	brcs	.+4      	; 0xbde <__udivmodhi4_ep>
 bda:	a6 1b       	sub	r26, r22
 bdc:	b7 0b       	sbc	r27, r23

00000bde <__udivmodhi4_ep>:
 bde:	88 1f       	adc	r24, r24
 be0:	99 1f       	adc	r25, r25
 be2:	5a 95       	dec	r21
 be4:	a9 f7       	brne	.-22     	; 0xbd0 <__udivmodhi4_loop>
 be6:	80 95       	com	r24
 be8:	90 95       	com	r25
 bea:	bc 01       	movw	r22, r24
 bec:	cd 01       	movw	r24, r26
 bee:	08 95       	ret

Disassembly of section .text.avrlibc:

00000a1c <sprintf>:
 a1c:	af e0       	ldi	r26, 0x0F	; 15
 a1e:	b0 e0       	ldi	r27, 0x00	; 0
 a20:	e4 e1       	ldi	r30, 0x14	; 20
 a22:	f5 e0       	ldi	r31, 0x05	; 5
 a24:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__prologue_saves__+0x1c>
 a28:	0e 89       	ldd	r16, Y+22	; 0x16
 a2a:	1f 89       	ldd	r17, Y+23	; 0x17
 a2c:	86 e0       	ldi	r24, 0x06	; 6
 a2e:	8d 83       	std	Y+5, r24	; 0x05
 a30:	1a 83       	std	Y+2, r17	; 0x02
 a32:	09 83       	std	Y+1, r16	; 0x01
 a34:	8f ef       	ldi	r24, 0xFF	; 255
 a36:	9f e7       	ldi	r25, 0x7F	; 127
 a38:	9f 83       	std	Y+7, r25	; 0x07
 a3a:	8e 83       	std	Y+6, r24	; 0x06
 a3c:	9e 01       	movw	r18, r28
 a3e:	25 5e       	subi	r18, 0xE5	; 229
 a40:	3f 4f       	sbci	r19, 0xFF	; 255
 a42:	48 8d       	ldd	r20, Y+24	; 0x18
 a44:	59 8d       	ldd	r21, Y+25	; 0x19
 a46:	6a 8d       	ldd	r22, Y+26	; 0x1a
 a48:	ce 01       	movw	r24, r28
 a4a:	01 96       	adiw	r24, 0x01	; 1
 a4c:	0e 94 aa 00 	call	0x154	; 0x154 <vfprintf>
 a50:	e8 85       	ldd	r30, Y+8	; 0x08
 a52:	f9 85       	ldd	r31, Y+9	; 0x09
 a54:	e0 0f       	add	r30, r16
 a56:	f1 1f       	adc	r31, r17
 a58:	10 82       	st	Z, r1
 a5a:	2f 96       	adiw	r28, 0x0f	; 15
 a5c:	e4 e0       	ldi	r30, 0x04	; 4
 a5e:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00000154 <vfprintf>:
 154:	2f 92       	push	r2
 156:	3f 92       	push	r3
 158:	4f 92       	push	r4
 15a:	6f 92       	push	r6
 15c:	7f 92       	push	r7
 15e:	8f 92       	push	r8
 160:	9f 92       	push	r9
 162:	af 92       	push	r10
 164:	bf 92       	push	r11
 166:	cf 92       	push	r12
 168:	df 92       	push	r13
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	62 97       	sbiw	r28, 0x12	; 18
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
 186:	6c 01       	movw	r12, r24
 188:	3a 01       	movw	r6, r20
 18a:	86 2e       	mov	r8, r22
 18c:	79 01       	movw	r14, r18
 18e:	fc 01       	movw	r30, r24
 190:	10 86       	std	Z+8, r1	; 0x08
 192:	17 82       	std	Z+7, r1	; 0x07
 194:	84 81       	ldd	r24, Z+4	; 0x04
 196:	81 ff       	sbrs	r24, 1
 198:	e7 c1       	rjmp	.+974    	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 19a:	9e 01       	movw	r18, r28
 19c:	2f 5f       	subi	r18, 0xFF	; 255
 19e:	3f 4f       	sbci	r19, 0xFF	; 255
 1a0:	3d 87       	std	Y+13, r19	; 0x0d
 1a2:	2c 87       	std	Y+12, r18	; 0x0c
 1a4:	c9 01       	movw	r24, r18
 1a6:	a0 e8       	ldi	r26, 0x80	; 128
 1a8:	88 8b       	std	Y+16, r24	; 0x10
 1aa:	99 8b       	std	Y+17, r25	; 0x11
 1ac:	aa 8b       	std	Y+18, r26	; 0x12
 1ae:	9f e3       	ldi	r25, 0x3F	; 63
 1b0:	99 2e       	mov	r9, r25
 1b2:	f3 01       	movw	r30, r6
 1b4:	84 91       	lpm	r24, Z
 1b6:	87 fc       	sbrc	r8, 7
 1b8:	80 81       	ld	r24, Z
 1ba:	88 23       	and	r24, r24
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <vfprintf+0x6c>
 1be:	d0 c1       	rjmp	.+928    	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
 1c0:	48 2d       	mov	r20, r8
 1c2:	93 01       	movw	r18, r6
 1c4:	2f 5f       	subi	r18, 0xFF	; 255
 1c6:	3f 4f       	sbci	r19, 0xFF	; 255
 1c8:	4f 4f       	sbci	r20, 0xFF	; 255
 1ca:	85 32       	cpi	r24, 0x25	; 37
 1cc:	19 f0       	breq	.+6      	; 0x1d4 <vfprintf+0x80>
 1ce:	39 01       	movw	r6, r18
 1d0:	84 2e       	mov	r8, r20
 1d2:	0a c0       	rjmp	.+20     	; 0x1e8 <vfprintf+0x94>
 1d4:	f9 01       	movw	r30, r18
 1d6:	84 91       	lpm	r24, Z
 1d8:	47 fd       	sbrc	r20, 7
 1da:	80 81       	ld	r24, Z
 1dc:	92 e0       	ldi	r25, 0x02	; 2
 1de:	69 0e       	add	r6, r25
 1e0:	71 1c       	adc	r7, r1
 1e2:	81 1c       	adc	r8, r1
 1e4:	85 32       	cpi	r24, 0x25	; 37
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <vfprintf+0x9e>
 1e8:	b6 01       	movw	r22, r12
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 1f0:	e0 cf       	rjmp	.-64     	; 0x1b2 <vfprintf+0x5e>
 1f2:	b1 2c       	mov	r11, r1
 1f4:	00 e0       	ldi	r16, 0x00	; 0
 1f6:	10 e0       	ldi	r17, 0x00	; 0
 1f8:	10 32       	cpi	r17, 0x20	; 32
 1fa:	a0 f4       	brcc	.+40     	; 0x224 <vfprintf+0xd0>
 1fc:	8b 32       	cpi	r24, 0x2B	; 43
 1fe:	69 f0       	breq	.+26     	; 0x21a <vfprintf+0xc6>
 200:	30 f4       	brcc	.+12     	; 0x20e <vfprintf+0xba>
 202:	80 32       	cpi	r24, 0x20	; 32
 204:	59 f0       	breq	.+22     	; 0x21c <vfprintf+0xc8>
 206:	83 32       	cpi	r24, 0x23	; 35
 208:	69 f4       	brne	.+26     	; 0x224 <vfprintf+0xd0>
 20a:	10 61       	ori	r17, 0x10	; 16
 20c:	2c c0       	rjmp	.+88     	; 0x266 <vfprintf+0x112>
 20e:	8d 32       	cpi	r24, 0x2D	; 45
 210:	39 f0       	breq	.+14     	; 0x220 <vfprintf+0xcc>
 212:	80 33       	cpi	r24, 0x30	; 48
 214:	39 f4       	brne	.+14     	; 0x224 <vfprintf+0xd0>
 216:	11 60       	ori	r17, 0x01	; 1
 218:	26 c0       	rjmp	.+76     	; 0x266 <vfprintf+0x112>
 21a:	12 60       	ori	r17, 0x02	; 2
 21c:	14 60       	ori	r17, 0x04	; 4
 21e:	23 c0       	rjmp	.+70     	; 0x266 <vfprintf+0x112>
 220:	18 60       	ori	r17, 0x08	; 8
 222:	21 c0       	rjmp	.+66     	; 0x266 <vfprintf+0x112>
 224:	17 fd       	sbrc	r17, 7
 226:	29 c0       	rjmp	.+82     	; 0x27a <vfprintf+0x126>
 228:	90 ed       	ldi	r25, 0xD0	; 208
 22a:	98 0f       	add	r25, r24
 22c:	9a 30       	cpi	r25, 0x0A	; 10
 22e:	78 f4       	brcc	.+30     	; 0x24e <vfprintf+0xfa>
 230:	16 ff       	sbrs	r17, 6
 232:	06 c0       	rjmp	.+12     	; 0x240 <vfprintf+0xec>
 234:	aa e0       	ldi	r26, 0x0A	; 10
 236:	ba 9e       	mul	r11, r26
 238:	90 0d       	add	r25, r0
 23a:	11 24       	eor	r1, r1
 23c:	b9 2e       	mov	r11, r25
 23e:	13 c0       	rjmp	.+38     	; 0x266 <vfprintf+0x112>
 240:	ea e0       	ldi	r30, 0x0A	; 10
 242:	0e 9f       	mul	r16, r30
 244:	90 0d       	add	r25, r0
 246:	11 24       	eor	r1, r1
 248:	09 2f       	mov	r16, r25
 24a:	10 62       	ori	r17, 0x20	; 32
 24c:	0c c0       	rjmp	.+24     	; 0x266 <vfprintf+0x112>
 24e:	8e 32       	cpi	r24, 0x2E	; 46
 250:	21 f4       	brne	.+8      	; 0x25a <vfprintf+0x106>
 252:	16 fd       	sbrc	r17, 6
 254:	85 c1       	rjmp	.+778    	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
 256:	10 64       	ori	r17, 0x40	; 64
 258:	06 c0       	rjmp	.+12     	; 0x266 <vfprintf+0x112>
 25a:	8c 36       	cpi	r24, 0x6C	; 108
 25c:	11 f4       	brne	.+4      	; 0x262 <vfprintf+0x10e>
 25e:	10 68       	ori	r17, 0x80	; 128
 260:	02 c0       	rjmp	.+4      	; 0x266 <vfprintf+0x112>
 262:	88 36       	cpi	r24, 0x68	; 104
 264:	51 f4       	brne	.+20     	; 0x27a <vfprintf+0x126>
 266:	f3 01       	movw	r30, r6
 268:	84 91       	lpm	r24, Z
 26a:	87 fc       	sbrc	r8, 7
 26c:	80 81       	ld	r24, Z
 26e:	ff ef       	ldi	r31, 0xFF	; 255
 270:	6f 1a       	sub	r6, r31
 272:	7f 0a       	sbc	r7, r31
 274:	8f 0a       	sbc	r8, r31
 276:	81 11       	cpse	r24, r1
 278:	bf cf       	rjmp	.-130    	; 0x1f8 <vfprintf+0xa4>
 27a:	98 2f       	mov	r25, r24
 27c:	9f 7d       	andi	r25, 0xDF	; 223
 27e:	95 54       	subi	r25, 0x45	; 69
 280:	93 30       	cpi	r25, 0x03	; 3
 282:	28 f4       	brcc	.+10     	; 0x28e <vfprintf+0x13a>
 284:	24 e0       	ldi	r18, 0x04	; 4
 286:	e2 0e       	add	r14, r18
 288:	f1 1c       	adc	r15, r1
 28a:	99 82       	std	Y+1, r9	; 0x01
 28c:	0f c0       	rjmp	.+30     	; 0x2ac <vfprintf+0x158>
 28e:	83 36       	cpi	r24, 0x63	; 99
 290:	31 f0       	breq	.+12     	; 0x29e <vfprintf+0x14a>
 292:	83 37       	cpi	r24, 0x73	; 115
 294:	91 f0       	breq	.+36     	; 0x2ba <vfprintf+0x166>
 296:	83 35       	cpi	r24, 0x53	; 83
 298:	09 f0       	breq	.+2      	; 0x29c <vfprintf+0x148>
 29a:	63 c0       	rjmp	.+198    	; 0x362 <vfprintf+0x20e>
 29c:	27 c0       	rjmp	.+78     	; 0x2ec <vfprintf+0x198>
 29e:	f7 01       	movw	r30, r14
 2a0:	80 81       	ld	r24, Z
 2a2:	89 83       	std	Y+1, r24	; 0x01
 2a4:	97 01       	movw	r18, r14
 2a6:	2e 5f       	subi	r18, 0xFE	; 254
 2a8:	3f 4f       	sbci	r19, 0xFF	; 255
 2aa:	79 01       	movw	r14, r18
 2ac:	28 88       	ldd	r2, Y+16	; 0x10
 2ae:	39 88       	ldd	r3, Y+17	; 0x11
 2b0:	4a 88       	ldd	r4, Y+18	; 0x12
 2b2:	aa 24       	eor	r10, r10
 2b4:	a3 94       	inc	r10
 2b6:	b1 2c       	mov	r11, r1
 2b8:	17 c0       	rjmp	.+46     	; 0x2e8 <vfprintf+0x194>
 2ba:	a7 01       	movw	r20, r14
 2bc:	4d 5f       	subi	r20, 0xFD	; 253
 2be:	5f 4f       	sbci	r21, 0xFF	; 255
 2c0:	5f 87       	std	Y+15, r21	; 0x0f
 2c2:	4e 87       	std	Y+14, r20	; 0x0e
 2c4:	f7 01       	movw	r30, r14
 2c6:	20 80       	ld	r2, Z
 2c8:	31 80       	ldd	r3, Z+1	; 0x01
 2ca:	42 80       	ldd	r4, Z+2	; 0x02
 2cc:	16 ff       	sbrs	r17, 6
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <vfprintf+0x182>
 2d0:	4b 2d       	mov	r20, r11
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <vfprintf+0x186>
 2d6:	4f ef       	ldi	r20, 0xFF	; 255
 2d8:	5f ef       	ldi	r21, 0xFF	; 255
 2da:	84 2d       	mov	r24, r4
 2dc:	b1 01       	movw	r22, r2
 2de:	0e 94 69 05 	call	0xad2	; 0xad2 <strnlen>
 2e2:	5c 01       	movw	r10, r24
 2e4:	ee 84       	ldd	r14, Y+14	; 0x0e
 2e6:	ff 84       	ldd	r15, Y+15	; 0x0f
 2e8:	1f 77       	andi	r17, 0x7F	; 127
 2ea:	18 c0       	rjmp	.+48     	; 0x31c <vfprintf+0x1c8>
 2ec:	97 01       	movw	r18, r14
 2ee:	2d 5f       	subi	r18, 0xFD	; 253
 2f0:	3f 4f       	sbci	r19, 0xFF	; 255
 2f2:	3f 87       	std	Y+15, r19	; 0x0f
 2f4:	2e 87       	std	Y+14, r18	; 0x0e
 2f6:	f7 01       	movw	r30, r14
 2f8:	20 80       	ld	r2, Z
 2fa:	31 80       	ldd	r3, Z+1	; 0x01
 2fc:	42 80       	ldd	r4, Z+2	; 0x02
 2fe:	16 ff       	sbrs	r17, 6
 300:	03 c0       	rjmp	.+6      	; 0x308 <vfprintf+0x1b4>
 302:	4b 2d       	mov	r20, r11
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <vfprintf+0x1b8>
 308:	4f ef       	ldi	r20, 0xFF	; 255
 30a:	5f ef       	ldi	r21, 0xFF	; 255
 30c:	84 2d       	mov	r24, r4
 30e:	b1 01       	movw	r22, r2
 310:	0e 94 69 05 	call	0xad2	; 0xad2 <strnlen>
 314:	5c 01       	movw	r10, r24
 316:	10 68       	ori	r17, 0x80	; 128
 318:	ee 84       	ldd	r14, Y+14	; 0x0e
 31a:	ff 84       	ldd	r15, Y+15	; 0x0f
 31c:	13 fd       	sbrc	r17, 3
 31e:	1d c0       	rjmp	.+58     	; 0x35a <vfprintf+0x206>
 320:	80 2f       	mov	r24, r16
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	a8 16       	cp	r10, r24
 326:	b9 06       	cpc	r11, r25
 328:	c0 f4       	brcc	.+48     	; 0x35a <vfprintf+0x206>
 32a:	b6 01       	movw	r22, r12
 32c:	80 e2       	ldi	r24, 0x20	; 32
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 334:	01 50       	subi	r16, 0x01	; 1
 336:	f4 cf       	rjmp	.-24     	; 0x320 <vfprintf+0x1cc>
 338:	f1 01       	movw	r30, r2
 33a:	84 91       	lpm	r24, Z
 33c:	47 fc       	sbrc	r4, 7
 33e:	80 81       	ld	r24, Z
 340:	ff ef       	ldi	r31, 0xFF	; 255
 342:	2f 1a       	sub	r2, r31
 344:	3f 0a       	sbc	r3, r31
 346:	4f 0a       	sbc	r4, r31
 348:	b6 01       	movw	r22, r12
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 350:	01 11       	cpse	r16, r1
 352:	01 50       	subi	r16, 0x01	; 1
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	a2 1a       	sub	r10, r18
 358:	b1 08       	sbc	r11, r1
 35a:	a1 14       	cp	r10, r1
 35c:	b1 04       	cpc	r11, r1
 35e:	61 f7       	brne	.-40     	; 0x338 <vfprintf+0x1e4>
 360:	f5 c0       	rjmp	.+490    	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 362:	84 36       	cpi	r24, 0x64	; 100
 364:	11 f0       	breq	.+4      	; 0x36a <vfprintf+0x216>
 366:	89 36       	cpi	r24, 0x69	; 105
 368:	71 f5       	brne	.+92     	; 0x3c6 <vfprintf+0x272>
 36a:	f7 01       	movw	r30, r14
 36c:	17 ff       	sbrs	r17, 7
 36e:	08 c0       	rjmp	.+16     	; 0x380 <vfprintf+0x22c>
 370:	60 81       	ld	r22, Z
 372:	71 81       	ldd	r23, Z+1	; 0x01
 374:	82 81       	ldd	r24, Z+2	; 0x02
 376:	93 81       	ldd	r25, Z+3	; 0x03
 378:	97 01       	movw	r18, r14
 37a:	2c 5f       	subi	r18, 0xFC	; 252
 37c:	3f 4f       	sbci	r19, 0xFF	; 255
 37e:	09 c0       	rjmp	.+18     	; 0x392 <vfprintf+0x23e>
 380:	60 81       	ld	r22, Z
 382:	71 81       	ldd	r23, Z+1	; 0x01
 384:	07 2e       	mov	r0, r23
 386:	00 0c       	add	r0, r0
 388:	88 0b       	sbc	r24, r24
 38a:	99 0b       	sbc	r25, r25
 38c:	97 01       	movw	r18, r14
 38e:	2e 5f       	subi	r18, 0xFE	; 254
 390:	3f 4f       	sbci	r19, 0xFF	; 255
 392:	79 01       	movw	r14, r18
 394:	1f 76       	andi	r17, 0x6F	; 111
 396:	31 2e       	mov	r3, r17
 398:	97 ff       	sbrs	r25, 7
 39a:	0a c0       	rjmp	.+20     	; 0x3b0 <vfprintf+0x25c>
 39c:	90 95       	com	r25
 39e:	80 95       	com	r24
 3a0:	70 95       	com	r23
 3a2:	61 95       	neg	r22
 3a4:	7f 4f       	sbci	r23, 0xFF	; 255
 3a6:	8f 4f       	sbci	r24, 0xFF	; 255
 3a8:	9f 4f       	sbci	r25, 0xFF	; 255
 3aa:	31 2f       	mov	r19, r17
 3ac:	30 68       	ori	r19, 0x80	; 128
 3ae:	33 2e       	mov	r3, r19
 3b0:	2a e0       	ldi	r18, 0x0A	; 10
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	ae 01       	movw	r20, r28
 3b6:	4f 5f       	subi	r20, 0xFF	; 255
 3b8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ba:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__ultoa_invert>
 3be:	48 2e       	mov	r4, r24
 3c0:	4c 85       	ldd	r20, Y+12	; 0x0c
 3c2:	44 1a       	sub	r4, r20
 3c4:	4a c0       	rjmp	.+148    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 3c6:	85 37       	cpi	r24, 0x75	; 117
 3c8:	29 f4       	brne	.+10     	; 0x3d4 <vfprintf+0x280>
 3ca:	1f 7e       	andi	r17, 0xEF	; 239
 3cc:	a1 2e       	mov	r10, r17
 3ce:	2a e0       	ldi	r18, 0x0A	; 10
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	25 c0       	rjmp	.+74     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3d4:	51 2f       	mov	r21, r17
 3d6:	59 7f       	andi	r21, 0xF9	; 249
 3d8:	a5 2e       	mov	r10, r21
 3da:	8f 36       	cpi	r24, 0x6F	; 111
 3dc:	c1 f0       	breq	.+48     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3de:	18 f4       	brcc	.+6      	; 0x3e6 <vfprintf+0x292>
 3e0:	88 35       	cpi	r24, 0x58	; 88
 3e2:	79 f0       	breq	.+30     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3e4:	bd c0       	rjmp	.+378    	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
 3e6:	80 37       	cpi	r24, 0x70	; 112
 3e8:	19 f0       	breq	.+6      	; 0x3f0 <vfprintf+0x29c>
 3ea:	88 37       	cpi	r24, 0x78	; 120
 3ec:	21 f0       	breq	.+8      	; 0x3f6 <vfprintf+0x2a2>
 3ee:	b8 c0       	rjmp	.+368    	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
 3f0:	85 2f       	mov	r24, r21
 3f2:	80 61       	ori	r24, 0x10	; 16
 3f4:	a8 2e       	mov	r10, r24
 3f6:	a4 fe       	sbrs	r10, 4
 3f8:	0d c0       	rjmp	.+26     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3fa:	9a 2d       	mov	r25, r10
 3fc:	94 60       	ori	r25, 0x04	; 4
 3fe:	a9 2e       	mov	r10, r25
 400:	09 c0       	rjmp	.+18     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 402:	14 ff       	sbrs	r17, 4
 404:	0a c0       	rjmp	.+20     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 406:	a5 2f       	mov	r26, r21
 408:	a6 60       	ori	r26, 0x06	; 6
 40a:	aa 2e       	mov	r10, r26
 40c:	06 c0       	rjmp	.+12     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 40e:	28 e0       	ldi	r18, 0x08	; 8
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	05 c0       	rjmp	.+10     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 414:	20 e1       	ldi	r18, 0x10	; 16
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41a:	20 e1       	ldi	r18, 0x10	; 16
 41c:	32 e0       	ldi	r19, 0x02	; 2
 41e:	f7 01       	movw	r30, r14
 420:	a7 fe       	sbrs	r10, 7
 422:	08 c0       	rjmp	.+16     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 424:	60 81       	ld	r22, Z
 426:	71 81       	ldd	r23, Z+1	; 0x01
 428:	82 81       	ldd	r24, Z+2	; 0x02
 42a:	93 81       	ldd	r25, Z+3	; 0x03
 42c:	a7 01       	movw	r20, r14
 42e:	4c 5f       	subi	r20, 0xFC	; 252
 430:	5f 4f       	sbci	r21, 0xFF	; 255
 432:	07 c0       	rjmp	.+14     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 434:	60 81       	ld	r22, Z
 436:	71 81       	ldd	r23, Z+1	; 0x01
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	a7 01       	movw	r20, r14
 43e:	4e 5f       	subi	r20, 0xFE	; 254
 440:	5f 4f       	sbci	r21, 0xFF	; 255
 442:	7a 01       	movw	r14, r20
 444:	ae 01       	movw	r20, r28
 446:	4f 5f       	subi	r20, 0xFF	; 255
 448:	5f 4f       	sbci	r21, 0xFF	; 255
 44a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__ultoa_invert>
 44e:	48 2e       	mov	r4, r24
 450:	5c 85       	ldd	r21, Y+12	; 0x0c
 452:	45 1a       	sub	r4, r21
 454:	8a 2d       	mov	r24, r10
 456:	8f 77       	andi	r24, 0x7F	; 127
 458:	38 2e       	mov	r3, r24
 45a:	36 fe       	sbrs	r3, 6
 45c:	0d c0       	rjmp	.+26     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 45e:	93 2d       	mov	r25, r3
 460:	9e 7f       	andi	r25, 0xFE	; 254
 462:	a9 2e       	mov	r10, r25
 464:	4b 14       	cp	r4, r11
 466:	58 f4       	brcc	.+22     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 468:	34 fe       	sbrs	r3, 4
 46a:	0b c0       	rjmp	.+22     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 46c:	32 fc       	sbrc	r3, 2
 46e:	09 c0       	rjmp	.+18     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 470:	a3 2d       	mov	r26, r3
 472:	ae 7e       	andi	r26, 0xEE	; 238
 474:	aa 2e       	mov	r10, r26
 476:	05 c0       	rjmp	.+10     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 478:	14 2d       	mov	r17, r4
 47a:	a3 2c       	mov	r10, r3
 47c:	03 c0       	rjmp	.+6      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 47e:	14 2d       	mov	r17, r4
 480:	01 c0       	rjmp	.+2      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 482:	1b 2d       	mov	r17, r11
 484:	a4 fe       	sbrs	r10, 4
 486:	0e c0       	rjmp	.+28     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 488:	fe 01       	movw	r30, r28
 48a:	e4 0d       	add	r30, r4
 48c:	f1 1d       	adc	r31, r1
 48e:	80 81       	ld	r24, Z
 490:	80 33       	cpi	r24, 0x30	; 48
 492:	21 f4       	brne	.+8      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 494:	ea 2d       	mov	r30, r10
 496:	e9 7e       	andi	r30, 0xE9	; 233
 498:	ae 2e       	mov	r10, r30
 49a:	08 c0       	rjmp	.+16     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 49c:	a2 fe       	sbrs	r10, 2
 49e:	05 c0       	rjmp	.+10     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4a0:	1e 5f       	subi	r17, 0xFE	; 254
 4a2:	04 c0       	rjmp	.+8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4a4:	8a 2d       	mov	r24, r10
 4a6:	86 78       	andi	r24, 0x86	; 134
 4a8:	09 f0       	breq	.+2      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4aa:	1f 5f       	subi	r17, 0xFF	; 255
 4ac:	a3 fc       	sbrc	r10, 3
 4ae:	11 c0       	rjmp	.+34     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4b0:	a0 fe       	sbrs	r10, 0
 4b2:	06 c0       	rjmp	.+12     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4b4:	10 17       	cp	r17, r16
 4b6:	88 f4       	brcc	.+34     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4b8:	04 0d       	add	r16, r4
 4ba:	b0 2e       	mov	r11, r16
 4bc:	b1 1a       	sub	r11, r17
 4be:	0e c0       	rjmp	.+28     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4c0:	10 17       	cp	r17, r16
 4c2:	60 f4       	brcc	.+24     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4c4:	b6 01       	movw	r22, r12
 4c6:	80 e2       	ldi	r24, 0x20	; 32
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 4ce:	1f 5f       	subi	r17, 0xFF	; 255
 4d0:	f7 cf       	rjmp	.-18     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4d2:	10 17       	cp	r17, r16
 4d4:	18 f4       	brcc	.+6      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4d6:	01 1b       	sub	r16, r17
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4da:	b4 2c       	mov	r11, r4
 4dc:	00 e0       	ldi	r16, 0x00	; 0
 4de:	a4 fe       	sbrs	r10, 4
 4e0:	10 c0       	rjmp	.+32     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 4e2:	b6 01       	movw	r22, r12
 4e4:	80 e3       	ldi	r24, 0x30	; 48
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 4ec:	a2 fe       	sbrs	r10, 2
 4ee:	17 c0       	rjmp	.+46     	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
 4f0:	a1 fc       	sbrc	r10, 1
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4f4:	88 e7       	ldi	r24, 0x78	; 120
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4fa:	88 e5       	ldi	r24, 0x58	; 88
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	b6 01       	movw	r22, r12
 500:	0c c0       	rjmp	.+24     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 502:	8a 2d       	mov	r24, r10
 504:	86 78       	andi	r24, 0x86	; 134
 506:	59 f0       	breq	.+22     	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
 508:	a1 fe       	sbrs	r10, 1
 50a:	02 c0       	rjmp	.+4      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 50c:	8b e2       	ldi	r24, 0x2B	; 43
 50e:	01 c0       	rjmp	.+2      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
 510:	80 e2       	ldi	r24, 0x20	; 32
 512:	a7 fc       	sbrc	r10, 7
 514:	8d e2       	ldi	r24, 0x2D	; 45
 516:	b6 01       	movw	r22, r12
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 51e:	4b 14       	cp	r4, r11
 520:	38 f4       	brcc	.+14     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 522:	b6 01       	movw	r22, r12
 524:	80 e3       	ldi	r24, 0x30	; 48
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 52c:	ba 94       	dec	r11
 52e:	f7 cf       	rjmp	.-18     	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
 530:	4a 94       	dec	r4
 532:	e1 e0       	ldi	r30, 0x01	; 1
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	ec 0f       	add	r30, r28
 538:	fd 1f       	adc	r31, r29
 53a:	e4 0d       	add	r30, r4
 53c:	f1 1d       	adc	r31, r1
 53e:	80 81       	ld	r24, Z
 540:	b6 01       	movw	r22, r12
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 548:	41 10       	cpse	r4, r1
 54a:	f2 cf       	rjmp	.-28     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 54c:	00 23       	and	r16, r16
 54e:	09 f4       	brne	.+2      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
 550:	30 ce       	rjmp	.-928    	; 0x1b2 <vfprintf+0x5e>
 552:	b6 01       	movw	r22, r12
 554:	80 e2       	ldi	r24, 0x20	; 32
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 be 03 	call	0x77c	; 0x77c <fputc>
 55c:	01 50       	subi	r16, 0x01	; 1
 55e:	f6 cf       	rjmp	.-20     	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 560:	f6 01       	movw	r30, r12
 562:	87 81       	ldd	r24, Z+7	; 0x07
 564:	90 85       	ldd	r25, Z+8	; 0x08
 566:	02 c0       	rjmp	.+4      	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
 568:	8f ef       	ldi	r24, 0xFF	; 255
 56a:	9f ef       	ldi	r25, 0xFF	; 255
 56c:	62 96       	adiw	r28, 0x12	; 18
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	f8 94       	cli
 572:	de bf       	out	0x3e, r29	; 62
 574:	0f be       	out	0x3f, r0	; 63
 576:	cd bf       	out	0x3d, r28	; 61
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	1f 91       	pop	r17
 57e:	0f 91       	pop	r16
 580:	ff 90       	pop	r15
 582:	ef 90       	pop	r14
 584:	df 90       	pop	r13
 586:	cf 90       	pop	r12
 588:	bf 90       	pop	r11
 58a:	af 90       	pop	r10
 58c:	9f 90       	pop	r9
 58e:	8f 90       	pop	r8
 590:	7f 90       	pop	r7
 592:	6f 90       	pop	r6
 594:	4f 90       	pop	r4
 596:	3f 90       	pop	r3
 598:	2f 90       	pop	r2
 59a:	08 95       	ret

Disassembly of section .text.avrlibc:

00000ad2 <strnlen>:
 ad2:	cf 92       	push	r12
 ad4:	df 92       	push	r13
 ad6:	ef 92       	push	r14
 ad8:	6b 01       	movw	r12, r22
 ada:	e8 2e       	mov	r14, r24
 adc:	a8 2f       	mov	r26, r24
 ade:	cb 01       	movw	r24, r22
 ae0:	41 15       	cp	r20, r1
 ae2:	51 05       	cpc	r21, r1
 ae4:	31 f4       	brne	.+12     	; 0xaf2 <strnlen+0x20>
 ae6:	8c 19       	sub	r24, r12
 ae8:	9d 09       	sbc	r25, r13
 aea:	ef 90       	pop	r14
 aec:	df 90       	pop	r13
 aee:	cf 90       	pop	r12
 af0:	08 95       	ret
 af2:	fc 01       	movw	r30, r24
 af4:	24 91       	lpm	r18, Z
 af6:	a7 fd       	sbrc	r26, 7
 af8:	20 81       	ld	r18, Z
 afa:	22 23       	and	r18, r18
 afc:	a1 f3       	breq	.-24     	; 0xae6 <strnlen+0x14>
 afe:	01 96       	adiw	r24, 0x01	; 1
 b00:	a1 1d       	adc	r26, r1
 b02:	41 50       	subi	r20, 0x01	; 1
 b04:	51 09       	sbc	r21, r1
 b06:	ec cf       	rjmp	.-40     	; 0xae0 <strnlen+0xe>

Disassembly of section .text.avrlibc:

0000077c <fputc>:
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	fb 01       	movw	r30, r22
 786:	24 81       	ldd	r18, Z+4	; 0x04
 788:	21 fd       	sbrc	r18, 1
 78a:	03 c0       	rjmp	.+6      	; 0x792 <fputc+0x16>
 78c:	8f ef       	ldi	r24, 0xFF	; 255
 78e:	9f ef       	ldi	r25, 0xFF	; 255
 790:	2c c0       	rjmp	.+88     	; 0x7ea <fputc+0x6e>
 792:	22 ff       	sbrs	r18, 2
 794:	16 c0       	rjmp	.+44     	; 0x7c2 <fputc+0x46>
 796:	47 81       	ldd	r20, Z+7	; 0x07
 798:	50 85       	ldd	r21, Z+8	; 0x08
 79a:	25 81       	ldd	r18, Z+5	; 0x05
 79c:	36 81       	ldd	r19, Z+6	; 0x06
 79e:	42 17       	cp	r20, r18
 7a0:	53 07       	cpc	r21, r19
 7a2:	44 f4       	brge	.+16     	; 0x7b4 <fputc+0x38>
 7a4:	a0 81       	ld	r26, Z
 7a6:	b1 81       	ldd	r27, Z+1	; 0x01
 7a8:	9d 01       	movw	r18, r26
 7aa:	2f 5f       	subi	r18, 0xFF	; 255
 7ac:	3f 4f       	sbci	r19, 0xFF	; 255
 7ae:	31 83       	std	Z+1, r19	; 0x01
 7b0:	20 83       	st	Z, r18
 7b2:	8c 93       	st	X, r24
 7b4:	27 81       	ldd	r18, Z+7	; 0x07
 7b6:	30 85       	ldd	r19, Z+8	; 0x08
 7b8:	2f 5f       	subi	r18, 0xFF	; 255
 7ba:	3f 4f       	sbci	r19, 0xFF	; 255
 7bc:	30 87       	std	Z+8, r19	; 0x08
 7be:	27 83       	std	Z+7, r18	; 0x07
 7c0:	14 c0       	rjmp	.+40     	; 0x7ea <fputc+0x6e>
 7c2:	8b 01       	movw	r16, r22
 7c4:	ec 01       	movw	r28, r24
 7c6:	fb 01       	movw	r30, r22
 7c8:	01 84       	ldd	r0, Z+9	; 0x09
 7ca:	f2 85       	ldd	r31, Z+10	; 0x0a
 7cc:	e0 2d       	mov	r30, r0
 7ce:	09 95       	icall
 7d0:	89 2b       	or	r24, r25
 7d2:	e1 f6       	brne	.-72     	; 0x78c <fputc+0x10>
 7d4:	d8 01       	movw	r26, r16
 7d6:	17 96       	adiw	r26, 0x07	; 7
 7d8:	8d 91       	ld	r24, X+
 7da:	9c 91       	ld	r25, X
 7dc:	18 97       	sbiw	r26, 0x08	; 8
 7de:	01 96       	adiw	r24, 0x01	; 1
 7e0:	18 96       	adiw	r26, 0x08	; 8
 7e2:	9c 93       	st	X, r25
 7e4:	8e 93       	st	-X, r24
 7e6:	17 97       	sbiw	r26, 0x07	; 7
 7e8:	ce 01       	movw	r24, r28
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	1f 91       	pop	r17
 7f0:	0f 91       	pop	r16
 7f2:	08 95       	ret

Disassembly of section .text.avrlibc:

000006c0 <__ultoa_invert>:
 6c0:	fa 01       	movw	r30, r20
 6c2:	aa 27       	eor	r26, r26
 6c4:	28 30       	cpi	r18, 0x08	; 8
 6c6:	51 f1       	breq	.+84     	; 0x71c <__ultoa_invert+0x5c>
 6c8:	20 31       	cpi	r18, 0x10	; 16
 6ca:	81 f1       	breq	.+96     	; 0x72c <__ultoa_invert+0x6c>
 6cc:	e8 94       	clt
 6ce:	6f 93       	push	r22
 6d0:	6e 7f       	andi	r22, 0xFE	; 254
 6d2:	6e 5f       	subi	r22, 0xFE	; 254
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255
 6d6:	8f 4f       	sbci	r24, 0xFF	; 255
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	af 4f       	sbci	r26, 0xFF	; 255
 6dc:	b1 e0       	ldi	r27, 0x01	; 1
 6de:	3e d0       	rcall	.+124    	; 0x75c <__ultoa_invert+0x9c>
 6e0:	b4 e0       	ldi	r27, 0x04	; 4
 6e2:	3c d0       	rcall	.+120    	; 0x75c <__ultoa_invert+0x9c>
 6e4:	67 0f       	add	r22, r23
 6e6:	78 1f       	adc	r23, r24
 6e8:	89 1f       	adc	r24, r25
 6ea:	9a 1f       	adc	r25, r26
 6ec:	a1 1d       	adc	r26, r1
 6ee:	68 0f       	add	r22, r24
 6f0:	79 1f       	adc	r23, r25
 6f2:	8a 1f       	adc	r24, r26
 6f4:	91 1d       	adc	r25, r1
 6f6:	a1 1d       	adc	r26, r1
 6f8:	6a 0f       	add	r22, r26
 6fa:	71 1d       	adc	r23, r1
 6fc:	81 1d       	adc	r24, r1
 6fe:	91 1d       	adc	r25, r1
 700:	a1 1d       	adc	r26, r1
 702:	20 d0       	rcall	.+64     	; 0x744 <__ultoa_invert+0x84>
 704:	09 f4       	brne	.+2      	; 0x708 <__ultoa_invert+0x48>
 706:	68 94       	set
 708:	3f 91       	pop	r19
 70a:	2a e0       	ldi	r18, 0x0A	; 10
 70c:	26 9f       	mul	r18, r22
 70e:	11 24       	eor	r1, r1
 710:	30 19       	sub	r19, r0
 712:	30 5d       	subi	r19, 0xD0	; 208
 714:	31 93       	st	Z+, r19
 716:	de f6       	brtc	.-74     	; 0x6ce <__ultoa_invert+0xe>
 718:	cf 01       	movw	r24, r30
 71a:	08 95       	ret
 71c:	46 2f       	mov	r20, r22
 71e:	47 70       	andi	r20, 0x07	; 7
 720:	40 5d       	subi	r20, 0xD0	; 208
 722:	41 93       	st	Z+, r20
 724:	b3 e0       	ldi	r27, 0x03	; 3
 726:	0f d0       	rcall	.+30     	; 0x746 <__ultoa_invert+0x86>
 728:	c9 f7       	brne	.-14     	; 0x71c <__ultoa_invert+0x5c>
 72a:	f6 cf       	rjmp	.-20     	; 0x718 <__ultoa_invert+0x58>
 72c:	46 2f       	mov	r20, r22
 72e:	4f 70       	andi	r20, 0x0F	; 15
 730:	40 5d       	subi	r20, 0xD0	; 208
 732:	4a 33       	cpi	r20, 0x3A	; 58
 734:	18 f0       	brcs	.+6      	; 0x73c <__ultoa_invert+0x7c>
 736:	49 5d       	subi	r20, 0xD9	; 217
 738:	31 fd       	sbrc	r19, 1
 73a:	40 52       	subi	r20, 0x20	; 32
 73c:	41 93       	st	Z+, r20
 73e:	02 d0       	rcall	.+4      	; 0x744 <__ultoa_invert+0x84>
 740:	a9 f7       	brne	.-22     	; 0x72c <__ultoa_invert+0x6c>
 742:	ea cf       	rjmp	.-44     	; 0x718 <__ultoa_invert+0x58>
 744:	b4 e0       	ldi	r27, 0x04	; 4
 746:	a6 95       	lsr	r26
 748:	97 95       	ror	r25
 74a:	87 95       	ror	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	ba 95       	dec	r27
 752:	c9 f7       	brne	.-14     	; 0x746 <__ultoa_invert+0x86>
 754:	00 97       	sbiw	r24, 0x00	; 0
 756:	61 05       	cpc	r22, r1
 758:	71 05       	cpc	r23, r1
 75a:	08 95       	ret
 75c:	9b 01       	movw	r18, r22
 75e:	ac 01       	movw	r20, r24
 760:	0a 2e       	mov	r0, r26
 762:	06 94       	lsr	r0
 764:	57 95       	ror	r21
 766:	47 95       	ror	r20
 768:	37 95       	ror	r19
 76a:	27 95       	ror	r18
 76c:	ba 95       	dec	r27
 76e:	c9 f7       	brne	.-14     	; 0x762 <__ultoa_invert+0xa2>
 770:	62 0f       	add	r22, r18
 772:	73 1f       	adc	r23, r19
 774:	84 1f       	adc	r24, r20
 776:	95 1f       	adc	r25, r21
 778:	a0 1d       	adc	r26, r0
 77a:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000a9a <__prologue_saves__>:
 a9a:	2f 92       	push	r2
 a9c:	3f 92       	push	r3
 a9e:	4f 92       	push	r4
 aa0:	5f 92       	push	r5
 aa2:	6f 92       	push	r6
 aa4:	7f 92       	push	r7
 aa6:	8f 92       	push	r8
 aa8:	9f 92       	push	r9
 aaa:	af 92       	push	r10
 aac:	bf 92       	push	r11
 aae:	cf 92       	push	r12
 ab0:	df 92       	push	r13
 ab2:	ef 92       	push	r14
 ab4:	ff 92       	push	r15
 ab6:	0f 93       	push	r16
 ab8:	1f 93       	push	r17
 aba:	cf 93       	push	r28
 abc:	df 93       	push	r29
 abe:	cd b7       	in	r28, 0x3d	; 61
 ac0:	de b7       	in	r29, 0x3e	; 62
 ac2:	ca 1b       	sub	r28, r26
 ac4:	db 0b       	sbc	r29, r27
 ac6:	0f b6       	in	r0, 0x3f	; 63
 ac8:	f8 94       	cli
 aca:	de bf       	out	0x3e, r29	; 62
 acc:	0f be       	out	0x3f, r0	; 63
 ace:	cd bf       	out	0x3d, r28	; 61
 ad0:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00000b08 <__epilogue_restores__>:
 b08:	2a 88       	ldd	r2, Y+18	; 0x12
 b0a:	39 88       	ldd	r3, Y+17	; 0x11
 b0c:	48 88       	ldd	r4, Y+16	; 0x10
 b0e:	5f 84       	ldd	r5, Y+15	; 0x0f
 b10:	6e 84       	ldd	r6, Y+14	; 0x0e
 b12:	7d 84       	ldd	r7, Y+13	; 0x0d
 b14:	8c 84       	ldd	r8, Y+12	; 0x0c
 b16:	9b 84       	ldd	r9, Y+11	; 0x0b
 b18:	aa 84       	ldd	r10, Y+10	; 0x0a
 b1a:	b9 84       	ldd	r11, Y+9	; 0x09
 b1c:	c8 84       	ldd	r12, Y+8	; 0x08
 b1e:	df 80       	ldd	r13, Y+7	; 0x07
 b20:	ee 80       	ldd	r14, Y+6	; 0x06
 b22:	fd 80       	ldd	r15, Y+5	; 0x05
 b24:	0c 81       	ldd	r16, Y+4	; 0x04
 b26:	1b 81       	ldd	r17, Y+3	; 0x03
 b28:	aa 81       	ldd	r26, Y+2	; 0x02
 b2a:	b9 81       	ldd	r27, Y+1	; 0x01
 b2c:	ce 0f       	add	r28, r30
 b2e:	d1 1d       	adc	r29, r1
 b30:	0f b6       	in	r0, 0x3f	; 63
 b32:	f8 94       	cli
 b34:	de bf       	out	0x3e, r29	; 62
 b36:	0f be       	out	0x3f, r0	; 63
 b38:	cd bf       	out	0x3d, r28	; 61
 b3a:	ed 01       	movw	r28, r26
 b3c:	08 95       	ret
