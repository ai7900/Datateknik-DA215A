
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000014a  000001be  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  000001ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001014  00000000  00000000  00000245  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000a70  00000000  00000000  00001259  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000031f  00000000  00000000  00001cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000371  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000010b  00000000  00000000  000023f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00002504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000142  00000142  000001b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000253c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    00000002  00000146  00000146  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_29 0000003a  00000108  00000108  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .data.adc     00000002  00800100  00000148  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
   8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
   c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  40:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  48:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  4c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  68:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  6c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  70:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <_etext>
  78:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  7c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  80:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  84:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  88:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  8c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  90:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  94:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  98:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  9c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  a0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  a4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  a8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>

000000ac <.dinit>:
  ac:	01 00       	.word	0x0001	; ????
  ae:	01 02       	muls	r16, r17
  b0:	00 01       	movw	r0, r0
  b2:	48 00       	.word	0x0048	; ????

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	da e0       	ldi	r29, 0x0A	; 10
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	ec ea       	ldi	r30, 0xAC	; 172
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	17 c0       	rjmp	.+46     	; 0xf6 <__do_clear_bss+0x8>
  c8:	b5 91       	lpm	r27, Z+
  ca:	a5 91       	lpm	r26, Z+
  cc:	35 91       	lpm	r19, Z+
  ce:	25 91       	lpm	r18, Z+
  d0:	05 91       	lpm	r16, Z+
  d2:	07 fd       	sbrc	r16, 7
  d4:	0c c0       	rjmp	.+24     	; 0xee <__do_clear_bss>
  d6:	95 91       	lpm	r25, Z+
  d8:	85 91       	lpm	r24, Z+
  da:	ef 01       	movw	r28, r30
  dc:	f9 2f       	mov	r31, r25
  de:	e8 2f       	mov	r30, r24
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a2 17       	cp	r26, r18
  e6:	b3 07       	cpc	r27, r19
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0x20>
  ea:	fe 01       	movw	r30, r28
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <__do_clear_bss+0x8>

000000ee <__do_clear_bss>:
  ee:	1d 92       	st	X+, r1
  f0:	a2 17       	cp	r26, r18
  f2:	b3 07       	cpc	r27, r19
  f4:	e1 f7       	brne	.-8      	; 0xee <__do_clear_bss>
  f6:	e3 3b       	cpi	r30, 0xB3	; 179
  f8:	f4 07       	cpc	r31, r20
  fa:	31 f7       	brne	.-52     	; 0xc8 <__do_copy_data+0x8>
  fc:	0e 94 a3 00 	call	0x146	; 0x146 <main>
 100:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>

Disassembly of section .text:

00000142 <__bad_interrupt>:
 142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

00000146 <main>:
#include "numkey/numkey.h"
#include "regulator/regulator.h"


int main(void)
{
 146:	ff cf       	rjmp	.-2      	; 0x146 <main>

Disassembly of section .text.__vector_29:

00000108 <__vector_29>:
/*
 * Interrupt Service Routine for the ADC.
 * The ISR will execute when a A/D conversion is complete.
 */
ISR(ADC_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	2f 93       	push	r18
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
	// read ADC value
	unsigned char low,high;

	low = ADCL;
 118:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
 11c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

	adc = (high << 8 ) + low;
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	98 2f       	mov	r25, r24
 124:	88 27       	eor	r24, r24
 126:	82 0f       	add	r24, r18
 128:	91 1d       	adc	r25, r1
 12a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 12e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	2f 91       	pop	r18
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti
