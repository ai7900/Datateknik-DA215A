
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c62  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800100  00800100  00000c62  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000c62  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002283  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e4b  00000000  00000000  0000307b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aaa  00000000  00000000  00003ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000274  00000000  00000000  00004970  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042d  00000000  00000000  00004be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000801  00000000  00000000  00005011  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00005812  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000bc6  00000bc6  00000c5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000058dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000062  000007a0  000007a0  00000834  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.hmi_init 0000000a  00000bb4  00000bb4  00000c48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.output_msg 00000052  000008b8  000008b8  0000094c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.init    0000000e  00000b9a  00000b9a  00000c2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .progmemx.data 00000028  0000010c  0000010c  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 19 .text.main    000000e4  00000588  00000588  0000061c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .data.nextState 00000001  00800125  00000bcc  00000c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .data.currentState 00000001  00800126  00000bcd  00000c61  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .text.write_4bit_msb 0000001c  00000b5a  00000b5a  00000bee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.lcd_write 00000030  00000b0c  00000b0c  00000ba0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.lcd_clear 00000010  00000b8a  00000b8a  00000c1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.lcd_set_cursor_mode 0000000c  00000ba8  00000ba8  00000c3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.lcd_init 00000060  00000802  00000802  00000896  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.lcd_set_cursor_pos 00000014  00000b76  00000b76  00000c0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.lcd_write_str 00000038  000009ca  000009ca  00000a5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.numkey_init 00000008  00000bbe  00000bbe  00000c52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.numkey_read 00000056  00000862  00000862  000008f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .progmemx.data.key_map 0000000c  00000134  00000134  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 32 .text.__vector_29 0000003a  00000990  00000990  00000a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.regulator_init 00000040  00000950  00000950  000009e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.regulator_read_power 00000034  00000aa6  00000aa6  00000b3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .data.adc     00000002  00800123  00000bca  00000c5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 36 .text.libgcc.mul 0000001e  00000b3c  00000b3c  00000bd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.avrlibc 00000032  00000ada  00000ada  00000b6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.avrlibc 00000046  0000090a  0000090a  0000099e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.avrlibc 00000448  00000140  00000140  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc 00000036  00000a3a  00000a3a  00000ace  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.avrlibc 00000078  00000728  00000728  000007bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.avrlibc 000000bc  0000066c  0000066c  00000700  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.libgcc.prologue 00000038  00000a02  00000a02  00000a96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.libgcc.prologue 00000036  00000a70  00000a70  00000b04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
   8:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
   c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  10:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  14:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  18:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  1c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  20:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  24:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  28:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  2c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  30:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  34:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  38:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  3c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  40:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  44:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  48:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  4c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  50:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  54:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  58:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  5c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  60:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  64:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  68:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  6c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  70:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  74:	0c 94 c8 04 	jmp	0x990	; 0x990 <__vector_29>
  78:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  7c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  80:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  84:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  88:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  8c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  90:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  94:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  98:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  9c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  a0:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  a4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>
  a8:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__bad_interrupt>

000000ac <.dinit>:
  ac:	01 00       	.word	0x0001	; ????
  ae:	01 23       	and	r16, r17
  b0:	80 01       	movw	r16, r0
  b2:	23 01       	movw	r4, r6
  b4:	27 00       	.word	0x0027	; ????
  b6:	0b ca       	rjmp	.-3050   	; 0xfffff4ce <__eeprom_end+0xff7ef4ce>

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	da e0       	ldi	r29, 0x0A	; 10
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	ec ea       	ldi	r30, 0xAC	; 172
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	17 c0       	rjmp	.+46     	; 0xfa <__do_clear_bss+0x8>
  cc:	b5 91       	lpm	r27, Z+
  ce:	a5 91       	lpm	r26, Z+
  d0:	35 91       	lpm	r19, Z+
  d2:	25 91       	lpm	r18, Z+
  d4:	05 91       	lpm	r16, Z+
  d6:	07 fd       	sbrc	r16, 7
  d8:	0c c0       	rjmp	.+24     	; 0xf2 <__do_clear_bss>
  da:	95 91       	lpm	r25, Z+
  dc:	85 91       	lpm	r24, Z+
  de:	ef 01       	movw	r28, r30
  e0:	f9 2f       	mov	r31, r25
  e2:	e8 2f       	mov	r30, r24
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a2 17       	cp	r26, r18
  ea:	b3 07       	cpc	r27, r19
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0x20>
  ee:	fe 01       	movw	r30, r28
  f0:	04 c0       	rjmp	.+8      	; 0xfa <__do_clear_bss+0x8>

000000f2 <__do_clear_bss>:
  f2:	1d 92       	st	X+, r1
  f4:	a2 17       	cp	r26, r18
  f6:	b3 07       	cpc	r27, r19
  f8:	e1 f7       	brne	.-8      	; 0xf2 <__do_clear_bss>
  fa:	e8 3b       	cpi	r30, 0xB8	; 184
  fc:	f4 07       	cpc	r31, r20
  fe:	31 f7       	brne	.-52     	; 0xcc <__do_copy_data+0x8>
 100:	0e 94 c4 02 	call	0x588	; 0x588 <main>
 104:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>

Disassembly of section .text:

00000bc6 <__bad_interrupt>:
 bc6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text:

000007a0 <delay_1_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	RET
 7ac:	08 95       	ret

000007ae <delay_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	DEC R24
 7c6:	8a 95       	dec	r24
	CPI R24, 0			; more loops to do?
 7c8:	80 30       	cpi	r24, 0x00	; 0
	BRNE delay_micros	;	continue!
 7ca:	89 f7       	brne	.-30     	; 0x7ae <delay_micros>
	RET
 7cc:	08 95       	ret

000007ce <delay_ms>:
; Delay of X ms
;	LDI + RCALL = 4 cycles
;==============================================================================
.global delay_ms	
delay_ms:
	MOV R18, R24
 7ce:	28 2f       	mov	r18, r24

000007d0 <loop_dms>:
loop_dms:
	LDI R24, 250
 7d0:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 7d2:	ed df       	rcall	.-38     	; 0x7ae <delay_micros>
	LDI R24, 250
 7d4:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 7d6:	eb df       	rcall	.-42     	; 0x7ae <delay_micros>
	LDI R24, 250
 7d8:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 7da:	e9 df       	rcall	.-46     	; 0x7ae <delay_micros>
	LDI R24, 250
 7dc:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 7de:	e7 df       	rcall	.-50     	; 0x7ae <delay_micros>
	DEC R18
 7e0:	2a 95       	dec	r18
	CPI R18, 0			; more loops to do?
 7e2:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 7e4:	a9 f7       	brne	.-22     	; 0x7d0 <loop_dms>
	RET
 7e6:	08 95       	ret

000007e8 <delay_s>:
;==============================================================================
; Delay seconds. R24 input.
;==============================================================================
.global delay_s	
delay_s:
	MOV R19, R24
 7e8:	38 2f       	mov	r19, r24

000007ea <loop_s>:
loop_s:
	LDI R24, 250
 7ea:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 7ec:	f0 df       	rcall	.-32     	; 0x7ce <delay_ms>
	LDI R24, 250
 7ee:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 7f0:	ee df       	rcall	.-36     	; 0x7ce <delay_ms>
	LDI R24, 250
 7f2:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 7f4:	ec df       	rcall	.-40     	; 0x7ce <delay_ms>
	LDI R24, 250
 7f6:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 7f8:	ea df       	rcall	.-44     	; 0x7ce <delay_ms>
	DEC R19
 7fa:	3a 95       	dec	r19
	CPI R19, 0
 7fc:	30 30       	cpi	r19, 0x00	; 0
	BRNE loop_s
 7fe:	a9 f7       	brne	.-22     	; 0x7ea <loop_s>
	RET
 800:	08 95       	ret

Disassembly of section .text.hmi_init:

00000bb4 <hmi_init>:
 *	- init numeric keyboard
 *	- init LCD
 */
void hmi_init(void)
{
	numkey_init();
 bb4:	0e 94 df 05 	call	0xbbe	; 0xbbe <numkey_init>
	lcd_init();
 bb8:	0e 94 01 04 	call	0x802	; 0x802 <lcd_init>
 bbc:	08 95       	ret

Disassembly of section .text.output_msg:

000008b8 <output_msg>:
			break;
		}
	}
	// return result from conversion
	*p_nr = result;
}
 8b8:	6f 92       	push	r6
 8ba:	7f 92       	push	r7
 8bc:	8f 92       	push	r8
 8be:	cf 92       	push	r12
 8c0:	df 92       	push	r13
 8c2:	ef 92       	push	r14
 8c4:	0f 93       	push	r16
 8c6:	3b 01       	movw	r6, r22
 8c8:	88 2e       	mov	r8, r24
 8ca:	69 01       	movw	r12, r18
 8cc:	e4 2e       	mov	r14, r20
 8ce:	8c e0       	ldi	r24, 0x0C	; 12
 8d0:	0e 94 d4 05 	call	0xba8	; 0xba8 <lcd_set_cursor_mode>
 8d4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <lcd_clear>
 8d8:	88 2d       	mov	r24, r8
 8da:	b3 01       	movw	r22, r6
 8dc:	0e 94 e5 04 	call	0x9ca	; 0x9ca <lcd_write_str>
 8e0:	60 e0       	ldi	r22, 0x00	; 0
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	0e 94 bb 05 	call	0xb76	; 0xb76 <lcd_set_cursor_pos>
 8e8:	8e 2d       	mov	r24, r14
 8ea:	b6 01       	movw	r22, r12
 8ec:	0e 94 e5 04 	call	0x9ca	; 0x9ca <lcd_write_str>
 8f0:	00 23       	and	r16, r16
 8f2:	19 f0       	breq	.+6      	; 0x8fa <output_msg+0x42>
 8f4:	80 2f       	mov	r24, r16
 8f6:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <delay_s>
 8fa:	0f 91       	pop	r16
 8fc:	ef 90       	pop	r14
 8fe:	df 90       	pop	r13
 900:	cf 90       	pop	r12
 902:	8f 90       	pop	r8
 904:	7f 90       	pop	r7
 906:	6f 90       	pop	r6
 908:	08 95       	ret

Disassembly of section .text.init:

00000b9a <init>:
    }
}

int init()
{
	hmi_init();
 b9a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <hmi_init>
	numkey_init();
 b9e:	0e 94 df 05 	call	0xbbe	; 0xbbe <numkey_init>
	regulator_init();
 ba2:	0e 94 a8 04 	call	0x950	; 0x950 <regulator_init>
 ba6:	08 95       	ret

Disassembly of section .text.main:

00000588 <main>:
char reg_str[17];


int main(void)
{
	init();
 588:	0e 94 cd 05 	call	0xb9a	; 0xb9a <init>
	
    while(1)
    {
		
		key = numkey_read();
 58c:	0e 94 31 04 	call	0x862	; 0x862 <numkey_read>
 590:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <key>
        switch(currentState)
 594:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <currentState>
 598:	91 30       	cpi	r25, 0x01	; 1
 59a:	e9 f0       	breq	.+58     	; 0x5d6 <main+0x4e>
 59c:	18 f0       	brcs	.+6      	; 0x5a4 <main+0x1c>
 59e:	92 30       	cpi	r25, 0x02	; 2
 5a0:	61 f1       	breq	.+88     	; 0x5fa <main+0x72>
 5a2:	39 c0       	rjmp	.+114    	; 0x616 <main+0x8e>
		{
			///////////MOTOR ON/////////////
			case MOTOR_ON:
			if (regulator_read_power() > 0)
 5a4:	0e 94 53 05 	call	0xaa6	; 0xaa6 <regulator_read_power>
 5a8:	88 23       	and	r24, r24
 5aa:	21 f0       	breq	.+8      	; 0x5b4 <main+0x2c>
			{
				nextState = MOTOR_RUNNING;
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <nextState>
 5b2:	07 c0       	rjmp	.+14     	; 0x5c2 <main+0x3a>
			}
			else if (key == '1')
 5b4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <key>
 5b8:	81 33       	cpi	r24, 0x31	; 49
 5ba:	19 f4       	brne	.+6      	; 0x5c2 <main+0x3a>
			{
				nextState = MOTOR_OFF;
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <nextState>
			}
			sprintf(mode_str, "MOTOR ON");
 5c2:	29 e0       	ldi	r18, 0x09	; 9
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	4c e0       	ldi	r20, 0x0C	; 12
 5c8:	51 e0       	ldi	r21, 0x01	; 1
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	0e 94 6d 05 	call	0xada	; 0xada <memcpy>
			break;
 5d4:	20 c0       	rjmp	.+64     	; 0x616 <main+0x8e>
			////////////MOTOR OFF/////////////
			case MOTOR_OFF:
				if(key == '2' && regulator_read_power() == 0)
 5d6:	82 33       	cpi	r24, 0x32	; 50
 5d8:	31 f4       	brne	.+12     	; 0x5e6 <main+0x5e>
 5da:	0e 94 53 05 	call	0xaa6	; 0xaa6 <regulator_read_power>
 5de:	81 11       	cpse	r24, r1
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <main+0x5e>
				nextState = MOTOR_ON;
 5e2:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <nextState>
				sprintf(mode_str, "MOTOR OFF");
 5e6:	2a e0       	ldi	r18, 0x0A	; 10
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	45 e1       	ldi	r20, 0x15	; 21
 5ec:	51 e0       	ldi	r21, 0x01	; 1
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	0e 94 6d 05 	call	0xada	; 0xada <memcpy>
			break;
 5f8:	0e c0       	rjmp	.+28     	; 0x616 <main+0x8e>
			////////////MOTOR RUNNING/////////////
			case MOTOR_RUNNING:
			
			if (key == '1')
 5fa:	81 33       	cpi	r24, 0x31	; 49
 5fc:	19 f4       	brne	.+6      	; 0x604 <main+0x7c>
			nextState= MOTOR_OFF;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <nextState>
			sprintf(mode_str, "MOTOR RUNNING");
 604:	2e e0       	ldi	r18, 0x0E	; 14
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	4f e1       	ldi	r20, 0x1F	; 31
 60a:	51 e0       	ldi	r21, 0x01	; 1
 60c:	60 e0       	ldi	r22, 0x00	; 0
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	91 e0       	ldi	r25, 0x01	; 1
 612:	0e 94 6d 05 	call	0xada	; 0xada <memcpy>
			break;
		}
		sprintf(reg_str,"%u%c%c",regulator_read_power(), '%', 'h');
 616:	0e 94 53 05 	call	0xaa6	; 0xaa6 <regulator_read_power>
 61a:	1f 92       	push	r1
 61c:	98 e6       	ldi	r25, 0x68	; 104
 61e:	9f 93       	push	r25
 620:	1f 92       	push	r1
 622:	95 e2       	ldi	r25, 0x25	; 37
 624:	9f 93       	push	r25
 626:	1f 92       	push	r1
 628:	8f 93       	push	r24
 62a:	8d e2       	ldi	r24, 0x2D	; 45
 62c:	91 e0       	ldi	r25, 0x01	; 1
 62e:	a0 e0       	ldi	r26, 0x00	; 0
 630:	af 93       	push	r26
 632:	9f 93       	push	r25
 634:	8f 93       	push	r24
 636:	c2 e1       	ldi	r28, 0x12	; 18
 638:	d1 e0       	ldi	r29, 0x01	; 1
 63a:	df 93       	push	r29
 63c:	cf 93       	push	r28
 63e:	0e 94 85 04 	call	0x90a	; 0x90a <sprintf>
		output_msg(mode_str,reg_str,0);
 642:	9e 01       	movw	r18, r28
 644:	40 e8       	ldi	r20, 0x80	; 128
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	71 e0       	ldi	r23, 0x01	; 1
 64a:	80 e8       	ldi	r24, 0x80	; 128
 64c:	00 e0       	ldi	r16, 0x00	; 0
 64e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <output_msg>
		currentState = nextState;
 652:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <nextState>
 656:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <currentState>
    }
 65a:	8d b7       	in	r24, 0x3d	; 61
 65c:	9e b7       	in	r25, 0x3e	; 62
 65e:	0b 96       	adiw	r24, 0x0b	; 11
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	f8 94       	cli
 664:	9e bf       	out	0x3e, r25	; 62
 666:	0f be       	out	0x3f, r0	; 63
 668:	8d bf       	out	0x3d, r24	; 61
 66a:	90 cf       	rjmp	.-224    	; 0x58c <main+0x4>

Disassembly of section .text.write_4bit_msb:

00000b5a <write_4bit_msb>:
*	data: 4 bits of data
*/
static void write_4bit_msb(uint8_t data)
{
	//write data
	SET_BIT_LEVELS(PORTF, 0x0F, data);
 b5a:	91 b3       	in	r25, 0x11	; 17
 b5c:	9f 70       	andi	r25, 0x0F	; 15
 b5e:	80 7f       	andi	r24, 0xF0	; 240
 b60:	89 2b       	or	r24, r25
 b62:	81 bb       	out	0x11, r24	; 17
	// generate pulse on the Enable pin
	SET_BIT(PORTD, 7);
 b64:	8b b1       	in	r24, 0x0b	; 11
 b66:	80 68       	ori	r24, 0x80	; 128
 b68:	8b b9       	out	0x0b, r24	; 11
	delay_1_micros();
 b6a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <delay_1_micros>
	CLR_BIT(PORTD, 7);
 b6e:	8b b1       	in	r24, 0x0b	; 11
 b70:	8f 77       	andi	r24, 0x7F	; 127
 b72:	8b b9       	out	0x0b, r24	; 11
 b74:	08 95       	ret

Disassembly of section .text.lcd_write:

00000b0c <lcd_write>:
* parameter:
*	lcd_reg: register to communicate with (Instruction or Data register)
*	data: 8-bit instruction or data (character)
*/
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 b0c:	cf 93       	push	r28
 b0e:	c6 2f       	mov	r28, r22
	// select register
	if (lcd_reg == INSTRUCTION) {
 b10:	81 11       	cpse	r24, r1
 b12:	04 c0       	rjmp	.+8      	; 0xb1c <lcd_write+0x10>
		CLR_BIT(PORTD, 6);	// Instruction Register
 b14:	8b b1       	in	r24, 0x0b	; 11
 b16:	8f 7b       	andi	r24, 0xBF	; 191
 b18:	8b b9       	out	0x0b, r24	; 11
 b1a:	03 c0       	rjmp	.+6      	; 0xb22 <lcd_write+0x16>
		} else {
		SET_BIT(PORTD, 6);	// Data Register
 b1c:	8b b1       	in	r24, 0x0b	; 11
 b1e:	80 64       	ori	r24, 0x40	; 64
 b20:	8b b9       	out	0x0b, r24	; 11
	}
	// write data
	write_4bit_msb(data);
 b22:	8c 2f       	mov	r24, r28
 b24:	0e 94 ad 05 	call	0xb5a	; 0xb5a <write_4bit_msb>
	write_4bit_msb(data << 4);
 b28:	8c 2f       	mov	r24, r28
 b2a:	82 95       	swap	r24
 b2c:	80 7f       	andi	r24, 0xF0	; 240
 b2e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <write_4bit_msb>
	delay_micros(45);
 b32:	8d e2       	ldi	r24, 0x2D	; 45
 b34:	0e 94 d7 03 	call	0x7ae	; 0x7ae <delay_micros>
}
 b38:	cf 91       	pop	r28
 b3a:	08 95       	ret

Disassembly of section .text.lcd_clear:

00000b8a <lcd_clear>:
/*
* Clears the LCD and moves the cursor to position row 0, column 0.
*/
void lcd_clear(void)
{
	lcd_write(INSTRUCTION, 0x01);
 b8a:	61 e0       	ldi	r22, 0x01	; 1
 b8c:	80 e0       	ldi	r24, 0x00	; 0
 b8e:	0e 94 86 05 	call	0xb0c	; 0xb0c <lcd_write>
	delay_ms(2);
 b92:	82 e0       	ldi	r24, 0x02	; 2
 b94:	0e 94 e7 03 	call	0x7ce	; 0x7ce <delay_ms>
 b98:	08 95       	ret

Disassembly of section .text.lcd_set_cursor_mode:

00000ba8 <lcd_set_cursor_mode>:
*	mode: cursor mode
*/
void lcd_set_cursor_mode(enum lcd_cursor mode)
{
	uint8_t cursor_mode;
	cursor_mode = 0x0C | mode;
 ba8:	68 2f       	mov	r22, r24
 baa:	6c 60       	ori	r22, 0x0C	; 12
	lcd_write(INSTRUCTION, cursor_mode);
 bac:	80 e0       	ldi	r24, 0x00	; 0
 bae:	0e 94 86 05 	call	0xb0c	; 0xb0c <lcd_write>
 bb2:	08 95       	ret

Disassembly of section .text.lcd_init:

00000802 <lcd_init>:
*	- configuration of LCD communication
*/
void lcd_init(void)
{
	// PF4-PF7 (A3-A0) as outputs (LCD D4-D7)
	DDRF = 0xF0;
 802:	80 ef       	ldi	r24, 0xF0	; 240
 804:	80 bb       	out	0x10, r24	; 16
	// PD6 & PD7 (D12 & D6) as outputs (LCD RS & LCD E)
	DDRD = 0xC0;
 806:	80 ec       	ldi	r24, 0xC0	; 192
 808:	8a b9       	out	0x0a, r24	; 10
	
	// wait more than 15 ms after power-up!
	delay_ms(20);
 80a:	84 e1       	ldi	r24, 0x14	; 20
 80c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <delay_ms>
	// select Instruction Register
	CLR_BIT(PORTD, 6);
 810:	8b b1       	in	r24, 0x0b	; 11
 812:	8f 7b       	andi	r24, 0xBF	; 191
 814:	8b b9       	out	0x0b, r24	; 11

	// Function Set: 8 bit data interface
	write_4bit_msb(0x30);
 816:	80 e3       	ldi	r24, 0x30	; 48
 818:	0e 94 ad 05 	call	0xb5a	; 0xb5a <write_4bit_msb>
	delay_ms(10);
 81c:	8a e0       	ldi	r24, 0x0A	; 10
 81e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <delay_ms>
	write_4bit_msb(0x30);
 822:	80 e3       	ldi	r24, 0x30	; 48
 824:	0e 94 ad 05 	call	0xb5a	; 0xb5a <write_4bit_msb>
	delay_ms(10);
 828:	8a e0       	ldi	r24, 0x0A	; 10
 82a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <delay_ms>
	write_4bit_msb(0x30);
 82e:	80 e3       	ldi	r24, 0x30	; 48
 830:	0e 94 ad 05 	call	0xb5a	; 0xb5a <write_4bit_msb>
	delay_ms(10);
 834:	8a e0       	ldi	r24, 0x0A	; 10
 836:	0e 94 e7 03 	call	0x7ce	; 0x7ce <delay_ms>

	// Function Set: switch to 4 bit data interface
	write_4bit_msb(0x20);
 83a:	80 e2       	ldi	r24, 0x20	; 32
 83c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <write_4bit_msb>
	delay_micros(45);
 840:	8d e2       	ldi	r24, 0x2D	; 45
 842:	0e 94 d7 03 	call	0x7ae	; 0x7ae <delay_micros>

	// Function Set: 4 bit data interface, 2 lines, font 5x10
	lcd_write(INSTRUCTION, 0x28);
 846:	68 e2       	ldi	r22, 0x28	; 40
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	0e 94 86 05 	call	0xb0c	; 0xb0c <lcd_write>

	// Display on, no cursor
	lcd_set_cursor_mode(CURSOR_OFF);
 84e:	8c e0       	ldi	r24, 0x0C	; 12
 850:	0e 94 d4 05 	call	0xba8	; 0xba8 <lcd_set_cursor_mode>

	// clear display
	lcd_clear();
 854:	0e 94 c5 05 	call	0xb8a	; 0xb8a <lcd_clear>

	// Entry Mode Set: incremental cursor movement, no display shift
	lcd_write(INSTRUCTION, 0x06);
 858:	66 e0       	ldi	r22, 0x06	; 6
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	0e 94 86 05 	call	0xb0c	; 0xb0c <lcd_write>
 860:	08 95       	ret

Disassembly of section .text.lcd_set_cursor_pos:

00000b76 <lcd_set_cursor_pos>:
*	col: 0 is the first column, 15 is the last visible column
*/
void lcd_set_cursor_pos(uint8_t row, uint8_t col)
{
	uint8_t cursor_pos;
	cursor_pos = 0x80 | (row << 6) | col;
 b76:	20 e4       	ldi	r18, 0x40	; 64
 b78:	82 9f       	mul	r24, r18
 b7a:	c0 01       	movw	r24, r0
 b7c:	11 24       	eor	r1, r1
 b7e:	68 2b       	or	r22, r24
 b80:	60 68       	ori	r22, 0x80	; 128
	lcd_write(INSTRUCTION, cursor_pos);
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	0e 94 86 05 	call	0xb0c	; 0xb0c <lcd_write>
 b88:	08 95       	ret

Disassembly of section .text.lcd_write_str:

000009ca <lcd_write_str>:
*
* parameter:
*	p_str: pointer to the string's first character
*/
void lcd_write_str(const char *p_str)
{
 9ca:	cf 92       	push	r12
 9cc:	df 92       	push	r13
 9ce:	ef 92       	push	r14
 9d0:	cf 93       	push	r28
 9d2:	6b 01       	movw	r12, r22
 9d4:	e8 2e       	mov	r14, r24
	uint8_t i =0;
 9d6:	c0 e0       	ldi	r28, 0x00	; 0
	while (p_str[i] !='\0')
 9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <lcd_write_str+0x18>
	{
		lcd_write(DATA, p_str[i]);
 9da:	81 e0       	ldi	r24, 0x01	; 1
 9dc:	0e 94 86 05 	call	0xb0c	; 0xb0c <lcd_write>
		i++;
 9e0:	cf 5f       	subi	r28, 0xFF	; 255
*	p_str: pointer to the string's first character
*/
void lcd_write_str(const char *p_str)
{
	uint8_t i =0;
	while (p_str[i] !='\0')
 9e2:	ae 2d       	mov	r26, r14
 9e4:	c6 01       	movw	r24, r12
 9e6:	8c 0f       	add	r24, r28
 9e8:	91 1d       	adc	r25, r1
 9ea:	a1 1d       	adc	r26, r1
 9ec:	fc 01       	movw	r30, r24
 9ee:	64 91       	lpm	r22, Z
 9f0:	a7 fd       	sbrc	r26, 7
 9f2:	60 81       	ld	r22, Z
 9f4:	61 11       	cpse	r22, r1
 9f6:	f1 cf       	rjmp	.-30     	; 0x9da <lcd_write_str+0x10>
	{
		lcd_write(DATA, p_str[i]);
		i++;
	}
 9f8:	cf 91       	pop	r28
 9fa:	ef 90       	pop	r14
 9fc:	df 90       	pop	r13
 9fe:	cf 90       	pop	r12
 a00:	08 95       	ret

Disassembly of section .text.numkey_init:

00000bbe <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// PE6 (D7) as input (key pressed?)
	DDRE = 0x00;
 bbe:	1d b8       	out	0x0d, r1	; 13
	// PB4-PB7 (D8-D11) as outputs (MUX and decoder)
	DDRB = 0xF0;
 bc0:	80 ef       	ldi	r24, 0xF0	; 240
 bc2:	84 b9       	out	0x04, r24	; 4
 bc4:	08 95       	ret

Disassembly of section .text.numkey_read:

00000862 <numkey_read>:
 * return:
 *	If a key is pressed, then a character that represents the key is returned.
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
 862:	0f 93       	push	r16
 864:	1f 93       	push	r17
 866:	cf 93       	push	r28
	uint8_t	i;
	for (i = 0; i < sizeof(key_map); i++)
 868:	c0 e0       	ldi	r28, 0x00	; 0
 86a:	1f c0       	rjmp	.+62     	; 0x8aa <numkey_read+0x48>
	{
		SET_BIT_LEVELS(PORTB,0x0F, i << 4); // skickar till portb
 86c:	25 b1       	in	r18, 0x05	; 5
 86e:	0c 2f       	mov	r16, r28
 870:	10 e0       	ldi	r17, 0x00	; 0
 872:	c8 01       	movw	r24, r16
 874:	82 95       	swap	r24
 876:	92 95       	swap	r25
 878:	90 7f       	andi	r25, 0xF0	; 240
 87a:	98 27       	eor	r25, r24
 87c:	80 7f       	andi	r24, 0xF0	; 240
 87e:	98 27       	eor	r25, r24
 880:	92 2f       	mov	r25, r18
 882:	9f 70       	andi	r25, 0x0F	; 15
 884:	89 2b       	or	r24, r25
 886:	85 b9       	out	0x05, r24	; 5
		delay_ms(1);						// delay för knappstuds
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <delay_ms>
		if (PINE & 0b01000000)				// kolla på PINE,6 om == 1
 88e:	66 9b       	sbis	0x0c, 6	; 12
 890:	0b c0       	rjmp	.+22     	; 0x8a8 <numkey_read+0x46>
		{
			return key_map[i];
 892:	c8 01       	movw	r24, r16
 894:	11 0f       	add	r17, r17
 896:	aa 0b       	sbc	r26, r26
 898:	8c 5c       	subi	r24, 0xCC	; 204
 89a:	9e 4f       	sbci	r25, 0xFE	; 254
 89c:	af 4f       	sbci	r26, 0xFF	; 255
 89e:	fc 01       	movw	r30, r24
 8a0:	84 91       	lpm	r24, Z
 8a2:	a7 fd       	sbrc	r26, 7
 8a4:	80 81       	ld	r24, Z
 8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <numkey_read+0x4e>
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
	uint8_t	i;
	for (i = 0; i < sizeof(key_map); i++)
 8a8:	cf 5f       	subi	r28, 0xFF	; 255
 8aa:	cc 30       	cpi	r28, 0x0C	; 12
 8ac:	f8 f2       	brcs	.-66     	; 0x86c <numkey_read+0xa>
			//}
	}
	
	
	// no key was pressed!
	return NO_KEY;
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	cf 91       	pop	r28
 8b2:	1f 91       	pop	r17
 8b4:	0f 91       	pop	r16
 8b6:	08 95       	ret

Disassembly of section .text.__vector_29:

00000990 <__vector_29>:
	// round up?
	if ((convert % 10) >= 5) {
		temp++;
	}
	return (uint8_t) temp;
}
 990:	1f 92       	push	r1
 992:	0f 92       	push	r0
 994:	0f b6       	in	r0, 0x3f	; 63
 996:	0f 92       	push	r0
 998:	11 24       	eor	r1, r1
 99a:	2f 93       	push	r18
 99c:	8f 93       	push	r24
 99e:	9f 93       	push	r25
 9a0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 9a4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	98 2f       	mov	r25, r24
 9ac:	88 27       	eor	r24, r24
 9ae:	82 0f       	add	r24, r18
 9b0:	91 1d       	adc	r25, r1
 9b2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <_end+0x1>
 9b6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_end>
 9ba:	9f 91       	pop	r25
 9bc:	8f 91       	pop	r24
 9be:	2f 91       	pop	r18
 9c0:	0f 90       	pop	r0
 9c2:	0f be       	out	0x3f, r0	; 63
 9c4:	0f 90       	pop	r0
 9c6:	1f 90       	pop	r1
 9c8:	18 95       	reti

Disassembly of section .text.regulator_init:

00000950 <regulator_init>:
 950:	ec e7       	ldi	r30, 0x7C	; 124
 952:	f0 e0       	ldi	r31, 0x00	; 0
 954:	80 81       	ld	r24, Z
 956:	80 64       	ori	r24, 0x40	; 64
 958:	80 83       	st	Z, r24
 95a:	80 81       	ld	r24, Z
 95c:	89 60       	ori	r24, 0x09	; 9
 95e:	80 83       	st	Z, r24
 960:	ea e7       	ldi	r30, 0x7A	; 122
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	80 81       	ld	r24, Z
 966:	87 60       	ori	r24, 0x07	; 7
 968:	80 83       	st	Z, r24
 96a:	80 81       	ld	r24, Z
 96c:	80 62       	ori	r24, 0x20	; 32
 96e:	80 83       	st	Z, r24
 970:	80 81       	ld	r24, Z
 972:	88 60       	ori	r24, 0x08	; 8
 974:	80 83       	st	Z, r24
 976:	80 81       	ld	r24, Z
 978:	80 68       	ori	r24, 0x80	; 128
 97a:	80 83       	st	Z, r24
 97c:	83 e0       	ldi	r24, 0x03	; 3
 97e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 982:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
 986:	78 94       	sei
 988:	80 81       	ld	r24, Z
 98a:	80 64       	ori	r24, 0x40	; 64
 98c:	80 83       	st	Z, r24
 98e:	08 95       	ret

Disassembly of section .text.regulator_read_power:

00000aa6 <regulator_read_power>:
	//return (uint8_t) regulator;
	
	//uint16_t regulator = adc;
	//return (uint8_t)regulator;
	
	uint16_t temp = adc - 528; //adc returns interval between 528 and 1019
 aa6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <_end>
 aaa:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <_end+0x1>
 aae:	80 51       	subi	r24, 0x10	; 16
 ab0:	92 40       	sbci	r25, 0x02	; 2
	temp = temp * 100;
 ab2:	44 e6       	ldi	r20, 0x64	; 100
 ab4:	48 9f       	mul	r20, r24
 ab6:	90 01       	movw	r18, r0
 ab8:	49 9f       	mul	r20, r25
 aba:	30 0d       	add	r19, r0
 abc:	11 24       	eor	r1, r1
	temp = temp / 491;
 abe:	ad eb       	ldi	r26, 0xBD	; 189
 ac0:	b2 e4       	ldi	r27, 0x42	; 66
 ac2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__umulhisi3>
 ac6:	88 0f       	add	r24, r24
 ac8:	89 2f       	mov	r24, r25
 aca:	88 1f       	adc	r24, r24
 acc:	99 0b       	sbc	r25, r25
 ace:	91 95       	neg	r25

	if(temp >= 0 && temp <= 100)
 ad0:	85 36       	cpi	r24, 0x65	; 101
 ad2:	91 05       	cpc	r25, r1
 ad4:	08 f0       	brcs	.+2      	; 0xad8 <regulator_read_power+0x32>
	return (uint8_t)temp;

	return 0;
 ad6:	80 e0       	ldi	r24, 0x00	; 0
 ad8:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000b3c <__umulhisi3>:
 b3c:	a2 9f       	mul	r26, r18
 b3e:	b0 01       	movw	r22, r0
 b40:	b3 9f       	mul	r27, r19
 b42:	c0 01       	movw	r24, r0
 b44:	a3 9f       	mul	r26, r19
 b46:	70 0d       	add	r23, r0
 b48:	81 1d       	adc	r24, r1
 b4a:	11 24       	eor	r1, r1
 b4c:	91 1d       	adc	r25, r1
 b4e:	b2 9f       	mul	r27, r18
 b50:	70 0d       	add	r23, r0
 b52:	81 1d       	adc	r24, r1
 b54:	11 24       	eor	r1, r1
 b56:	91 1d       	adc	r25, r1
 b58:	08 95       	ret

Disassembly of section .text.avrlibc:

00000ada <memcpy>:
 ada:	cf 92       	push	r12
 adc:	df 92       	push	r13
 ade:	ef 92       	push	r14
 ae0:	dc 01       	movw	r26, r24
 ae2:	6a 01       	movw	r12, r20
 ae4:	e6 2e       	mov	r14, r22
 ae6:	28 0f       	add	r18, r24
 ae8:	39 1f       	adc	r19, r25
 aea:	a2 17       	cp	r26, r18
 aec:	b3 07       	cpc	r27, r19
 aee:	51 f0       	breq	.+20     	; 0xb04 <__stack+0x5>
 af0:	f6 01       	movw	r30, r12
 af2:	44 91       	lpm	r20, Z
 af4:	e7 fc       	sbrc	r14, 7
 af6:	40 81       	ld	r20, Z
 af8:	4d 93       	st	X+, r20
 afa:	4f ef       	ldi	r20, 0xFF	; 255
 afc:	c4 1a       	sub	r12, r20
 afe:	d4 0a       	sbc	r13, r20
 b00:	e4 0a       	sbc	r14, r20
 b02:	f3 cf       	rjmp	.-26     	; 0xaea <memcpy+0x10>
 b04:	ef 90       	pop	r14
 b06:	df 90       	pop	r13
 b08:	cf 90       	pop	r12
 b0a:	08 95       	ret

Disassembly of section .text.avrlibc:

0000090a <sprintf>:
 90a:	af e0       	ldi	r26, 0x0F	; 15
 90c:	b0 e0       	ldi	r27, 0x00	; 0
 90e:	eb e8       	ldi	r30, 0x8B	; 139
 910:	f4 e0       	ldi	r31, 0x04	; 4
 912:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__prologue_saves__+0x1c>
 916:	0e 89       	ldd	r16, Y+22	; 0x16
 918:	1f 89       	ldd	r17, Y+23	; 0x17
 91a:	86 e0       	ldi	r24, 0x06	; 6
 91c:	8d 83       	std	Y+5, r24	; 0x05
 91e:	1a 83       	std	Y+2, r17	; 0x02
 920:	09 83       	std	Y+1, r16	; 0x01
 922:	8f ef       	ldi	r24, 0xFF	; 255
 924:	9f e7       	ldi	r25, 0x7F	; 127
 926:	9f 83       	std	Y+7, r25	; 0x07
 928:	8e 83       	std	Y+6, r24	; 0x06
 92a:	9e 01       	movw	r18, r28
 92c:	25 5e       	subi	r18, 0xE5	; 229
 92e:	3f 4f       	sbci	r19, 0xFF	; 255
 930:	48 8d       	ldd	r20, Y+24	; 0x18
 932:	59 8d       	ldd	r21, Y+25	; 0x19
 934:	6a 8d       	ldd	r22, Y+26	; 0x1a
 936:	ce 01       	movw	r24, r28
 938:	01 96       	adiw	r24, 0x01	; 1
 93a:	0e 94 a0 00 	call	0x140	; 0x140 <vfprintf>
 93e:	e8 85       	ldd	r30, Y+8	; 0x08
 940:	f9 85       	ldd	r31, Y+9	; 0x09
 942:	e0 0f       	add	r30, r16
 944:	f1 1f       	adc	r31, r17
 946:	10 82       	st	Z, r1
 948:	2f 96       	adiw	r28, 0x0f	; 15
 94a:	e4 e0       	ldi	r30, 0x04	; 4
 94c:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00000140 <vfprintf>:
 140:	2f 92       	push	r2
 142:	3f 92       	push	r3
 144:	4f 92       	push	r4
 146:	6f 92       	push	r6
 148:	7f 92       	push	r7
 14a:	8f 92       	push	r8
 14c:	9f 92       	push	r9
 14e:	af 92       	push	r10
 150:	bf 92       	push	r11
 152:	cf 92       	push	r12
 154:	df 92       	push	r13
 156:	ef 92       	push	r14
 158:	ff 92       	push	r15
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	62 97       	sbiw	r28, 0x12	; 18
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
 172:	6c 01       	movw	r12, r24
 174:	3a 01       	movw	r6, r20
 176:	86 2e       	mov	r8, r22
 178:	79 01       	movw	r14, r18
 17a:	fc 01       	movw	r30, r24
 17c:	10 86       	std	Z+8, r1	; 0x08
 17e:	17 82       	std	Z+7, r1	; 0x07
 180:	84 81       	ldd	r24, Z+4	; 0x04
 182:	81 ff       	sbrs	r24, 1
 184:	e7 c1       	rjmp	.+974    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
 186:	9e 01       	movw	r18, r28
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
 18c:	3d 87       	std	Y+13, r19	; 0x0d
 18e:	2c 87       	std	Y+12, r18	; 0x0c
 190:	c9 01       	movw	r24, r18
 192:	a0 e8       	ldi	r26, 0x80	; 128
 194:	88 8b       	std	Y+16, r24	; 0x10
 196:	99 8b       	std	Y+17, r25	; 0x11
 198:	aa 8b       	std	Y+18, r26	; 0x12
 19a:	9f e3       	ldi	r25, 0x3F	; 63
 19c:	99 2e       	mov	r9, r25
 19e:	f3 01       	movw	r30, r6
 1a0:	84 91       	lpm	r24, Z
 1a2:	87 fc       	sbrc	r8, 7
 1a4:	80 81       	ld	r24, Z
 1a6:	88 23       	and	r24, r24
 1a8:	09 f4       	brne	.+2      	; 0x1ac <vfprintf+0x6c>
 1aa:	d0 c1       	rjmp	.+928    	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 1ac:	48 2d       	mov	r20, r8
 1ae:	93 01       	movw	r18, r6
 1b0:	2f 5f       	subi	r18, 0xFF	; 255
 1b2:	3f 4f       	sbci	r19, 0xFF	; 255
 1b4:	4f 4f       	sbci	r20, 0xFF	; 255
 1b6:	85 32       	cpi	r24, 0x25	; 37
 1b8:	19 f0       	breq	.+6      	; 0x1c0 <vfprintf+0x80>
 1ba:	39 01       	movw	r6, r18
 1bc:	84 2e       	mov	r8, r20
 1be:	0a c0       	rjmp	.+20     	; 0x1d4 <vfprintf+0x94>
 1c0:	f9 01       	movw	r30, r18
 1c2:	84 91       	lpm	r24, Z
 1c4:	47 fd       	sbrc	r20, 7
 1c6:	80 81       	ld	r24, Z
 1c8:	92 e0       	ldi	r25, 0x02	; 2
 1ca:	69 0e       	add	r6, r25
 1cc:	71 1c       	adc	r7, r1
 1ce:	81 1c       	adc	r8, r1
 1d0:	85 32       	cpi	r24, 0x25	; 37
 1d2:	29 f4       	brne	.+10     	; 0x1de <vfprintf+0x9e>
 1d4:	b6 01       	movw	r22, r12
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 1dc:	e0 cf       	rjmp	.-64     	; 0x19e <vfprintf+0x5e>
 1de:	b1 2c       	mov	r11, r1
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	10 32       	cpi	r17, 0x20	; 32
 1e6:	a0 f4       	brcc	.+40     	; 0x210 <vfprintf+0xd0>
 1e8:	8b 32       	cpi	r24, 0x2B	; 43
 1ea:	69 f0       	breq	.+26     	; 0x206 <vfprintf+0xc6>
 1ec:	30 f4       	brcc	.+12     	; 0x1fa <vfprintf+0xba>
 1ee:	80 32       	cpi	r24, 0x20	; 32
 1f0:	59 f0       	breq	.+22     	; 0x208 <vfprintf+0xc8>
 1f2:	83 32       	cpi	r24, 0x23	; 35
 1f4:	69 f4       	brne	.+26     	; 0x210 <vfprintf+0xd0>
 1f6:	10 61       	ori	r17, 0x10	; 16
 1f8:	2c c0       	rjmp	.+88     	; 0x252 <vfprintf+0x112>
 1fa:	8d 32       	cpi	r24, 0x2D	; 45
 1fc:	39 f0       	breq	.+14     	; 0x20c <vfprintf+0xcc>
 1fe:	80 33       	cpi	r24, 0x30	; 48
 200:	39 f4       	brne	.+14     	; 0x210 <vfprintf+0xd0>
 202:	11 60       	ori	r17, 0x01	; 1
 204:	26 c0       	rjmp	.+76     	; 0x252 <vfprintf+0x112>
 206:	12 60       	ori	r17, 0x02	; 2
 208:	14 60       	ori	r17, 0x04	; 4
 20a:	23 c0       	rjmp	.+70     	; 0x252 <vfprintf+0x112>
 20c:	18 60       	ori	r17, 0x08	; 8
 20e:	21 c0       	rjmp	.+66     	; 0x252 <vfprintf+0x112>
 210:	17 fd       	sbrc	r17, 7
 212:	29 c0       	rjmp	.+82     	; 0x266 <vfprintf+0x126>
 214:	90 ed       	ldi	r25, 0xD0	; 208
 216:	98 0f       	add	r25, r24
 218:	9a 30       	cpi	r25, 0x0A	; 10
 21a:	78 f4       	brcc	.+30     	; 0x23a <vfprintf+0xfa>
 21c:	16 ff       	sbrs	r17, 6
 21e:	06 c0       	rjmp	.+12     	; 0x22c <vfprintf+0xec>
 220:	aa e0       	ldi	r26, 0x0A	; 10
 222:	ba 9e       	mul	r11, r26
 224:	90 0d       	add	r25, r0
 226:	11 24       	eor	r1, r1
 228:	b9 2e       	mov	r11, r25
 22a:	13 c0       	rjmp	.+38     	; 0x252 <vfprintf+0x112>
 22c:	ea e0       	ldi	r30, 0x0A	; 10
 22e:	0e 9f       	mul	r16, r30
 230:	90 0d       	add	r25, r0
 232:	11 24       	eor	r1, r1
 234:	09 2f       	mov	r16, r25
 236:	10 62       	ori	r17, 0x20	; 32
 238:	0c c0       	rjmp	.+24     	; 0x252 <vfprintf+0x112>
 23a:	8e 32       	cpi	r24, 0x2E	; 46
 23c:	21 f4       	brne	.+8      	; 0x246 <vfprintf+0x106>
 23e:	16 fd       	sbrc	r17, 6
 240:	85 c1       	rjmp	.+778    	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 242:	10 64       	ori	r17, 0x40	; 64
 244:	06 c0       	rjmp	.+12     	; 0x252 <vfprintf+0x112>
 246:	8c 36       	cpi	r24, 0x6C	; 108
 248:	11 f4       	brne	.+4      	; 0x24e <vfprintf+0x10e>
 24a:	10 68       	ori	r17, 0x80	; 128
 24c:	02 c0       	rjmp	.+4      	; 0x252 <vfprintf+0x112>
 24e:	88 36       	cpi	r24, 0x68	; 104
 250:	51 f4       	brne	.+20     	; 0x266 <vfprintf+0x126>
 252:	f3 01       	movw	r30, r6
 254:	84 91       	lpm	r24, Z
 256:	87 fc       	sbrc	r8, 7
 258:	80 81       	ld	r24, Z
 25a:	ff ef       	ldi	r31, 0xFF	; 255
 25c:	6f 1a       	sub	r6, r31
 25e:	7f 0a       	sbc	r7, r31
 260:	8f 0a       	sbc	r8, r31
 262:	81 11       	cpse	r24, r1
 264:	bf cf       	rjmp	.-130    	; 0x1e4 <vfprintf+0xa4>
 266:	98 2f       	mov	r25, r24
 268:	9f 7d       	andi	r25, 0xDF	; 223
 26a:	95 54       	subi	r25, 0x45	; 69
 26c:	93 30       	cpi	r25, 0x03	; 3
 26e:	28 f4       	brcc	.+10     	; 0x27a <vfprintf+0x13a>
 270:	24 e0       	ldi	r18, 0x04	; 4
 272:	e2 0e       	add	r14, r18
 274:	f1 1c       	adc	r15, r1
 276:	99 82       	std	Y+1, r9	; 0x01
 278:	0f c0       	rjmp	.+30     	; 0x298 <vfprintf+0x158>
 27a:	83 36       	cpi	r24, 0x63	; 99
 27c:	31 f0       	breq	.+12     	; 0x28a <vfprintf+0x14a>
 27e:	83 37       	cpi	r24, 0x73	; 115
 280:	91 f0       	breq	.+36     	; 0x2a6 <vfprintf+0x166>
 282:	83 35       	cpi	r24, 0x53	; 83
 284:	09 f0       	breq	.+2      	; 0x288 <vfprintf+0x148>
 286:	63 c0       	rjmp	.+198    	; 0x34e <vfprintf+0x20e>
 288:	27 c0       	rjmp	.+78     	; 0x2d8 <vfprintf+0x198>
 28a:	f7 01       	movw	r30, r14
 28c:	80 81       	ld	r24, Z
 28e:	89 83       	std	Y+1, r24	; 0x01
 290:	97 01       	movw	r18, r14
 292:	2e 5f       	subi	r18, 0xFE	; 254
 294:	3f 4f       	sbci	r19, 0xFF	; 255
 296:	79 01       	movw	r14, r18
 298:	28 88       	ldd	r2, Y+16	; 0x10
 29a:	39 88       	ldd	r3, Y+17	; 0x11
 29c:	4a 88       	ldd	r4, Y+18	; 0x12
 29e:	aa 24       	eor	r10, r10
 2a0:	a3 94       	inc	r10
 2a2:	b1 2c       	mov	r11, r1
 2a4:	17 c0       	rjmp	.+46     	; 0x2d4 <vfprintf+0x194>
 2a6:	a7 01       	movw	r20, r14
 2a8:	4d 5f       	subi	r20, 0xFD	; 253
 2aa:	5f 4f       	sbci	r21, 0xFF	; 255
 2ac:	5f 87       	std	Y+15, r21	; 0x0f
 2ae:	4e 87       	std	Y+14, r20	; 0x0e
 2b0:	f7 01       	movw	r30, r14
 2b2:	20 80       	ld	r2, Z
 2b4:	31 80       	ldd	r3, Z+1	; 0x01
 2b6:	42 80       	ldd	r4, Z+2	; 0x02
 2b8:	16 ff       	sbrs	r17, 6
 2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <vfprintf+0x182>
 2bc:	4b 2d       	mov	r20, r11
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <vfprintf+0x186>
 2c2:	4f ef       	ldi	r20, 0xFF	; 255
 2c4:	5f ef       	ldi	r21, 0xFF	; 255
 2c6:	84 2d       	mov	r24, r4
 2c8:	b1 01       	movw	r22, r2
 2ca:	0e 94 1d 05 	call	0xa3a	; 0xa3a <strnlen>
 2ce:	5c 01       	movw	r10, r24
 2d0:	ee 84       	ldd	r14, Y+14	; 0x0e
 2d2:	ff 84       	ldd	r15, Y+15	; 0x0f
 2d4:	1f 77       	andi	r17, 0x7F	; 127
 2d6:	18 c0       	rjmp	.+48     	; 0x308 <vfprintf+0x1c8>
 2d8:	97 01       	movw	r18, r14
 2da:	2d 5f       	subi	r18, 0xFD	; 253
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
 2de:	3f 87       	std	Y+15, r19	; 0x0f
 2e0:	2e 87       	std	Y+14, r18	; 0x0e
 2e2:	f7 01       	movw	r30, r14
 2e4:	20 80       	ld	r2, Z
 2e6:	31 80       	ldd	r3, Z+1	; 0x01
 2e8:	42 80       	ldd	r4, Z+2	; 0x02
 2ea:	16 ff       	sbrs	r17, 6
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <vfprintf+0x1b4>
 2ee:	4b 2d       	mov	r20, r11
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <vfprintf+0x1b8>
 2f4:	4f ef       	ldi	r20, 0xFF	; 255
 2f6:	5f ef       	ldi	r21, 0xFF	; 255
 2f8:	84 2d       	mov	r24, r4
 2fa:	b1 01       	movw	r22, r2
 2fc:	0e 94 1d 05 	call	0xa3a	; 0xa3a <strnlen>
 300:	5c 01       	movw	r10, r24
 302:	10 68       	ori	r17, 0x80	; 128
 304:	ee 84       	ldd	r14, Y+14	; 0x0e
 306:	ff 84       	ldd	r15, Y+15	; 0x0f
 308:	13 fd       	sbrc	r17, 3
 30a:	1d c0       	rjmp	.+58     	; 0x346 <vfprintf+0x206>
 30c:	80 2f       	mov	r24, r16
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	a8 16       	cp	r10, r24
 312:	b9 06       	cpc	r11, r25
 314:	c0 f4       	brcc	.+48     	; 0x346 <vfprintf+0x206>
 316:	b6 01       	movw	r22, r12
 318:	80 e2       	ldi	r24, 0x20	; 32
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 320:	01 50       	subi	r16, 0x01	; 1
 322:	f4 cf       	rjmp	.-24     	; 0x30c <vfprintf+0x1cc>
 324:	f1 01       	movw	r30, r2
 326:	84 91       	lpm	r24, Z
 328:	47 fc       	sbrc	r4, 7
 32a:	80 81       	ld	r24, Z
 32c:	ff ef       	ldi	r31, 0xFF	; 255
 32e:	2f 1a       	sub	r2, r31
 330:	3f 0a       	sbc	r3, r31
 332:	4f 0a       	sbc	r4, r31
 334:	b6 01       	movw	r22, r12
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 33c:	01 11       	cpse	r16, r1
 33e:	01 50       	subi	r16, 0x01	; 1
 340:	21 e0       	ldi	r18, 0x01	; 1
 342:	a2 1a       	sub	r10, r18
 344:	b1 08       	sbc	r11, r1
 346:	a1 14       	cp	r10, r1
 348:	b1 04       	cpc	r11, r1
 34a:	61 f7       	brne	.-40     	; 0x324 <vfprintf+0x1e4>
 34c:	f5 c0       	rjmp	.+490    	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 34e:	84 36       	cpi	r24, 0x64	; 100
 350:	11 f0       	breq	.+4      	; 0x356 <vfprintf+0x216>
 352:	89 36       	cpi	r24, 0x69	; 105
 354:	71 f5       	brne	.+92     	; 0x3b2 <vfprintf+0x272>
 356:	f7 01       	movw	r30, r14
 358:	17 ff       	sbrs	r17, 7
 35a:	08 c0       	rjmp	.+16     	; 0x36c <vfprintf+0x22c>
 35c:	60 81       	ld	r22, Z
 35e:	71 81       	ldd	r23, Z+1	; 0x01
 360:	82 81       	ldd	r24, Z+2	; 0x02
 362:	93 81       	ldd	r25, Z+3	; 0x03
 364:	97 01       	movw	r18, r14
 366:	2c 5f       	subi	r18, 0xFC	; 252
 368:	3f 4f       	sbci	r19, 0xFF	; 255
 36a:	09 c0       	rjmp	.+18     	; 0x37e <vfprintf+0x23e>
 36c:	60 81       	ld	r22, Z
 36e:	71 81       	ldd	r23, Z+1	; 0x01
 370:	07 2e       	mov	r0, r23
 372:	00 0c       	add	r0, r0
 374:	88 0b       	sbc	r24, r24
 376:	99 0b       	sbc	r25, r25
 378:	97 01       	movw	r18, r14
 37a:	2e 5f       	subi	r18, 0xFE	; 254
 37c:	3f 4f       	sbci	r19, 0xFF	; 255
 37e:	79 01       	movw	r14, r18
 380:	1f 76       	andi	r17, 0x6F	; 111
 382:	31 2e       	mov	r3, r17
 384:	97 ff       	sbrs	r25, 7
 386:	0a c0       	rjmp	.+20     	; 0x39c <vfprintf+0x25c>
 388:	90 95       	com	r25
 38a:	80 95       	com	r24
 38c:	70 95       	com	r23
 38e:	61 95       	neg	r22
 390:	7f 4f       	sbci	r23, 0xFF	; 255
 392:	8f 4f       	sbci	r24, 0xFF	; 255
 394:	9f 4f       	sbci	r25, 0xFF	; 255
 396:	31 2f       	mov	r19, r17
 398:	30 68       	ori	r19, 0x80	; 128
 39a:	33 2e       	mov	r3, r19
 39c:	2a e0       	ldi	r18, 0x0A	; 10
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	ae 01       	movw	r20, r28
 3a2:	4f 5f       	subi	r20, 0xFF	; 255
 3a4:	5f 4f       	sbci	r21, 0xFF	; 255
 3a6:	0e 94 36 03 	call	0x66c	; 0x66c <__ultoa_invert>
 3aa:	48 2e       	mov	r4, r24
 3ac:	4c 85       	ldd	r20, Y+12	; 0x0c
 3ae:	44 1a       	sub	r4, r20
 3b0:	4a c0       	rjmp	.+148    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 3b2:	85 37       	cpi	r24, 0x75	; 117
 3b4:	29 f4       	brne	.+10     	; 0x3c0 <vfprintf+0x280>
 3b6:	1f 7e       	andi	r17, 0xEF	; 239
 3b8:	a1 2e       	mov	r10, r17
 3ba:	2a e0       	ldi	r18, 0x0A	; 10
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	25 c0       	rjmp	.+74     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3c0:	51 2f       	mov	r21, r17
 3c2:	59 7f       	andi	r21, 0xF9	; 249
 3c4:	a5 2e       	mov	r10, r21
 3c6:	8f 36       	cpi	r24, 0x6F	; 111
 3c8:	c1 f0       	breq	.+48     	; 0x3fa <vfprintf+0x2ba>
 3ca:	18 f4       	brcc	.+6      	; 0x3d2 <vfprintf+0x292>
 3cc:	88 35       	cpi	r24, 0x58	; 88
 3ce:	79 f0       	breq	.+30     	; 0x3ee <vfprintf+0x2ae>
 3d0:	bd c0       	rjmp	.+378    	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 3d2:	80 37       	cpi	r24, 0x70	; 112
 3d4:	19 f0       	breq	.+6      	; 0x3dc <vfprintf+0x29c>
 3d6:	88 37       	cpi	r24, 0x78	; 120
 3d8:	21 f0       	breq	.+8      	; 0x3e2 <vfprintf+0x2a2>
 3da:	b8 c0       	rjmp	.+368    	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 3dc:	85 2f       	mov	r24, r21
 3de:	80 61       	ori	r24, 0x10	; 16
 3e0:	a8 2e       	mov	r10, r24
 3e2:	a4 fe       	sbrs	r10, 4
 3e4:	0d c0       	rjmp	.+26     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3e6:	9a 2d       	mov	r25, r10
 3e8:	94 60       	ori	r25, 0x04	; 4
 3ea:	a9 2e       	mov	r10, r25
 3ec:	09 c0       	rjmp	.+18     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3ee:	14 ff       	sbrs	r17, 4
 3f0:	0a c0       	rjmp	.+20     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3f2:	a5 2f       	mov	r26, r21
 3f4:	a6 60       	ori	r26, 0x06	; 6
 3f6:	aa 2e       	mov	r10, r26
 3f8:	06 c0       	rjmp	.+12     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fa:	28 e0       	ldi	r18, 0x08	; 8
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	05 c0       	rjmp	.+10     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 400:	20 e1       	ldi	r18, 0x10	; 16
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	20 e1       	ldi	r18, 0x10	; 16
 408:	32 e0       	ldi	r19, 0x02	; 2
 40a:	f7 01       	movw	r30, r14
 40c:	a7 fe       	sbrs	r10, 7
 40e:	08 c0       	rjmp	.+16     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 410:	60 81       	ld	r22, Z
 412:	71 81       	ldd	r23, Z+1	; 0x01
 414:	82 81       	ldd	r24, Z+2	; 0x02
 416:	93 81       	ldd	r25, Z+3	; 0x03
 418:	a7 01       	movw	r20, r14
 41a:	4c 5f       	subi	r20, 0xFC	; 252
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	07 c0       	rjmp	.+14     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 420:	60 81       	ld	r22, Z
 422:	71 81       	ldd	r23, Z+1	; 0x01
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	a7 01       	movw	r20, r14
 42a:	4e 5f       	subi	r20, 0xFE	; 254
 42c:	5f 4f       	sbci	r21, 0xFF	; 255
 42e:	7a 01       	movw	r14, r20
 430:	ae 01       	movw	r20, r28
 432:	4f 5f       	subi	r20, 0xFF	; 255
 434:	5f 4f       	sbci	r21, 0xFF	; 255
 436:	0e 94 36 03 	call	0x66c	; 0x66c <__ultoa_invert>
 43a:	48 2e       	mov	r4, r24
 43c:	5c 85       	ldd	r21, Y+12	; 0x0c
 43e:	45 1a       	sub	r4, r21
 440:	8a 2d       	mov	r24, r10
 442:	8f 77       	andi	r24, 0x7F	; 127
 444:	38 2e       	mov	r3, r24
 446:	36 fe       	sbrs	r3, 6
 448:	0d c0       	rjmp	.+26     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 44a:	93 2d       	mov	r25, r3
 44c:	9e 7f       	andi	r25, 0xFE	; 254
 44e:	a9 2e       	mov	r10, r25
 450:	4b 14       	cp	r4, r11
 452:	58 f4       	brcc	.+22     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 454:	34 fe       	sbrs	r3, 4
 456:	0b c0       	rjmp	.+22     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 458:	32 fc       	sbrc	r3, 2
 45a:	09 c0       	rjmp	.+18     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 45c:	a3 2d       	mov	r26, r3
 45e:	ae 7e       	andi	r26, 0xEE	; 238
 460:	aa 2e       	mov	r10, r26
 462:	05 c0       	rjmp	.+10     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 464:	14 2d       	mov	r17, r4
 466:	a3 2c       	mov	r10, r3
 468:	03 c0       	rjmp	.+6      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46a:	14 2d       	mov	r17, r4
 46c:	01 c0       	rjmp	.+2      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46e:	1b 2d       	mov	r17, r11
 470:	a4 fe       	sbrs	r10, 4
 472:	0e c0       	rjmp	.+28     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 474:	fe 01       	movw	r30, r28
 476:	e4 0d       	add	r30, r4
 478:	f1 1d       	adc	r31, r1
 47a:	80 81       	ld	r24, Z
 47c:	80 33       	cpi	r24, 0x30	; 48
 47e:	21 f4       	brne	.+8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 480:	ea 2d       	mov	r30, r10
 482:	e9 7e       	andi	r30, 0xE9	; 233
 484:	ae 2e       	mov	r10, r30
 486:	08 c0       	rjmp	.+16     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 488:	a2 fe       	sbrs	r10, 2
 48a:	05 c0       	rjmp	.+10     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 48c:	1e 5f       	subi	r17, 0xFE	; 254
 48e:	04 c0       	rjmp	.+8      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 490:	8a 2d       	mov	r24, r10
 492:	86 78       	andi	r24, 0x86	; 134
 494:	09 f0       	breq	.+2      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 496:	1f 5f       	subi	r17, 0xFF	; 255
 498:	a3 fc       	sbrc	r10, 3
 49a:	11 c0       	rjmp	.+34     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 49c:	a0 fe       	sbrs	r10, 0
 49e:	06 c0       	rjmp	.+12     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4a0:	10 17       	cp	r17, r16
 4a2:	88 f4       	brcc	.+34     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4a4:	04 0d       	add	r16, r4
 4a6:	b0 2e       	mov	r11, r16
 4a8:	b1 1a       	sub	r11, r17
 4aa:	0e c0       	rjmp	.+28     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4ac:	10 17       	cp	r17, r16
 4ae:	60 f4       	brcc	.+24     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4b0:	b6 01       	movw	r22, r12
 4b2:	80 e2       	ldi	r24, 0x20	; 32
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 4ba:	1f 5f       	subi	r17, 0xFF	; 255
 4bc:	f7 cf       	rjmp	.-18     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4be:	10 17       	cp	r17, r16
 4c0:	18 f4       	brcc	.+6      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4c2:	01 1b       	sub	r16, r17
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4c6:	b4 2c       	mov	r11, r4
 4c8:	00 e0       	ldi	r16, 0x00	; 0
 4ca:	a4 fe       	sbrs	r10, 4
 4cc:	10 c0       	rjmp	.+32     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4ce:	b6 01       	movw	r22, r12
 4d0:	80 e3       	ldi	r24, 0x30	; 48
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 4d8:	a2 fe       	sbrs	r10, 2
 4da:	17 c0       	rjmp	.+46     	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 4dc:	a1 fc       	sbrc	r10, 1
 4de:	03 c0       	rjmp	.+6      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4e0:	88 e7       	ldi	r24, 0x78	; 120
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4e6:	88 e5       	ldi	r24, 0x58	; 88
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	b6 01       	movw	r22, r12
 4ec:	0c c0       	rjmp	.+24     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 4ee:	8a 2d       	mov	r24, r10
 4f0:	86 78       	andi	r24, 0x86	; 134
 4f2:	59 f0       	breq	.+22     	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 4f4:	a1 fe       	sbrs	r10, 1
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4f8:	8b e2       	ldi	r24, 0x2B	; 43
 4fa:	01 c0       	rjmp	.+2      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4fc:	80 e2       	ldi	r24, 0x20	; 32
 4fe:	a7 fc       	sbrc	r10, 7
 500:	8d e2       	ldi	r24, 0x2D	; 45
 502:	b6 01       	movw	r22, r12
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 50a:	4b 14       	cp	r4, r11
 50c:	38 f4       	brcc	.+14     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 50e:	b6 01       	movw	r22, r12
 510:	80 e3       	ldi	r24, 0x30	; 48
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 518:	ba 94       	dec	r11
 51a:	f7 cf       	rjmp	.-18     	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 51c:	4a 94       	dec	r4
 51e:	e1 e0       	ldi	r30, 0x01	; 1
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	ec 0f       	add	r30, r28
 524:	fd 1f       	adc	r31, r29
 526:	e4 0d       	add	r30, r4
 528:	f1 1d       	adc	r31, r1
 52a:	80 81       	ld	r24, Z
 52c:	b6 01       	movw	r22, r12
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 534:	41 10       	cpse	r4, r1
 536:	f2 cf       	rjmp	.-28     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 538:	00 23       	and	r16, r16
 53a:	09 f4       	brne	.+2      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
 53c:	30 ce       	rjmp	.-928    	; 0x19e <vfprintf+0x5e>
 53e:	b6 01       	movw	r22, r12
 540:	80 e2       	ldi	r24, 0x20	; 32
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 94 03 	call	0x728	; 0x728 <fputc>
 548:	01 50       	subi	r16, 0x01	; 1
 54a:	f6 cf       	rjmp	.-20     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 54c:	f6 01       	movw	r30, r12
 54e:	87 81       	ldd	r24, Z+7	; 0x07
 550:	90 85       	ldd	r25, Z+8	; 0x08
 552:	02 c0       	rjmp	.+4      	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	9f ef       	ldi	r25, 0xFF	; 255
 558:	62 96       	adiw	r28, 0x12	; 18
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	de bf       	out	0x3e, r29	; 62
 560:	0f be       	out	0x3f, r0	; 63
 562:	cd bf       	out	0x3d, r28	; 61
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	ff 90       	pop	r15
 56e:	ef 90       	pop	r14
 570:	df 90       	pop	r13
 572:	cf 90       	pop	r12
 574:	bf 90       	pop	r11
 576:	af 90       	pop	r10
 578:	9f 90       	pop	r9
 57a:	8f 90       	pop	r8
 57c:	7f 90       	pop	r7
 57e:	6f 90       	pop	r6
 580:	4f 90       	pop	r4
 582:	3f 90       	pop	r3
 584:	2f 90       	pop	r2
 586:	08 95       	ret

Disassembly of section .text.avrlibc:

00000a3a <strnlen>:
 a3a:	cf 92       	push	r12
 a3c:	df 92       	push	r13
 a3e:	ef 92       	push	r14
 a40:	6b 01       	movw	r12, r22
 a42:	e8 2e       	mov	r14, r24
 a44:	a8 2f       	mov	r26, r24
 a46:	cb 01       	movw	r24, r22
 a48:	41 15       	cp	r20, r1
 a4a:	51 05       	cpc	r21, r1
 a4c:	31 f4       	brne	.+12     	; 0xa5a <strnlen+0x20>
 a4e:	8c 19       	sub	r24, r12
 a50:	9d 09       	sbc	r25, r13
 a52:	ef 90       	pop	r14
 a54:	df 90       	pop	r13
 a56:	cf 90       	pop	r12
 a58:	08 95       	ret
 a5a:	fc 01       	movw	r30, r24
 a5c:	24 91       	lpm	r18, Z
 a5e:	a7 fd       	sbrc	r26, 7
 a60:	20 81       	ld	r18, Z
 a62:	22 23       	and	r18, r18
 a64:	a1 f3       	breq	.-24     	; 0xa4e <strnlen+0x14>
 a66:	01 96       	adiw	r24, 0x01	; 1
 a68:	a1 1d       	adc	r26, r1
 a6a:	41 50       	subi	r20, 0x01	; 1
 a6c:	51 09       	sbc	r21, r1
 a6e:	ec cf       	rjmp	.-40     	; 0xa48 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00000728 <fputc>:
 728:	0f 93       	push	r16
 72a:	1f 93       	push	r17
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	fb 01       	movw	r30, r22
 732:	24 81       	ldd	r18, Z+4	; 0x04
 734:	21 fd       	sbrc	r18, 1
 736:	03 c0       	rjmp	.+6      	; 0x73e <fputc+0x16>
 738:	8f ef       	ldi	r24, 0xFF	; 255
 73a:	9f ef       	ldi	r25, 0xFF	; 255
 73c:	2c c0       	rjmp	.+88     	; 0x796 <fputc+0x6e>
 73e:	22 ff       	sbrs	r18, 2
 740:	16 c0       	rjmp	.+44     	; 0x76e <fputc+0x46>
 742:	47 81       	ldd	r20, Z+7	; 0x07
 744:	50 85       	ldd	r21, Z+8	; 0x08
 746:	25 81       	ldd	r18, Z+5	; 0x05
 748:	36 81       	ldd	r19, Z+6	; 0x06
 74a:	42 17       	cp	r20, r18
 74c:	53 07       	cpc	r21, r19
 74e:	44 f4       	brge	.+16     	; 0x760 <fputc+0x38>
 750:	a0 81       	ld	r26, Z
 752:	b1 81       	ldd	r27, Z+1	; 0x01
 754:	9d 01       	movw	r18, r26
 756:	2f 5f       	subi	r18, 0xFF	; 255
 758:	3f 4f       	sbci	r19, 0xFF	; 255
 75a:	31 83       	std	Z+1, r19	; 0x01
 75c:	20 83       	st	Z, r18
 75e:	8c 93       	st	X, r24
 760:	27 81       	ldd	r18, Z+7	; 0x07
 762:	30 85       	ldd	r19, Z+8	; 0x08
 764:	2f 5f       	subi	r18, 0xFF	; 255
 766:	3f 4f       	sbci	r19, 0xFF	; 255
 768:	30 87       	std	Z+8, r19	; 0x08
 76a:	27 83       	std	Z+7, r18	; 0x07
 76c:	14 c0       	rjmp	.+40     	; 0x796 <fputc+0x6e>
 76e:	8b 01       	movw	r16, r22
 770:	ec 01       	movw	r28, r24
 772:	fb 01       	movw	r30, r22
 774:	01 84       	ldd	r0, Z+9	; 0x09
 776:	f2 85       	ldd	r31, Z+10	; 0x0a
 778:	e0 2d       	mov	r30, r0
 77a:	09 95       	icall
 77c:	89 2b       	or	r24, r25
 77e:	e1 f6       	brne	.-72     	; 0x738 <fputc+0x10>
 780:	d8 01       	movw	r26, r16
 782:	17 96       	adiw	r26, 0x07	; 7
 784:	8d 91       	ld	r24, X+
 786:	9c 91       	ld	r25, X
 788:	18 97       	sbiw	r26, 0x08	; 8
 78a:	01 96       	adiw	r24, 0x01	; 1
 78c:	18 96       	adiw	r26, 0x08	; 8
 78e:	9c 93       	st	X, r25
 790:	8e 93       	st	-X, r24
 792:	17 97       	sbiw	r26, 0x07	; 7
 794:	ce 01       	movw	r24, r28
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	1f 91       	pop	r17
 79c:	0f 91       	pop	r16
 79e:	08 95       	ret

Disassembly of section .text.avrlibc:

0000066c <__ultoa_invert>:
 66c:	fa 01       	movw	r30, r20
 66e:	aa 27       	eor	r26, r26
 670:	28 30       	cpi	r18, 0x08	; 8
 672:	51 f1       	breq	.+84     	; 0x6c8 <__ultoa_invert+0x5c>
 674:	20 31       	cpi	r18, 0x10	; 16
 676:	81 f1       	breq	.+96     	; 0x6d8 <__ultoa_invert+0x6c>
 678:	e8 94       	clt
 67a:	6f 93       	push	r22
 67c:	6e 7f       	andi	r22, 0xFE	; 254
 67e:	6e 5f       	subi	r22, 0xFE	; 254
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	8f 4f       	sbci	r24, 0xFF	; 255
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	af 4f       	sbci	r26, 0xFF	; 255
 688:	b1 e0       	ldi	r27, 0x01	; 1
 68a:	3e d0       	rcall	.+124    	; 0x708 <__ultoa_invert+0x9c>
 68c:	b4 e0       	ldi	r27, 0x04	; 4
 68e:	3c d0       	rcall	.+120    	; 0x708 <__ultoa_invert+0x9c>
 690:	67 0f       	add	r22, r23
 692:	78 1f       	adc	r23, r24
 694:	89 1f       	adc	r24, r25
 696:	9a 1f       	adc	r25, r26
 698:	a1 1d       	adc	r26, r1
 69a:	68 0f       	add	r22, r24
 69c:	79 1f       	adc	r23, r25
 69e:	8a 1f       	adc	r24, r26
 6a0:	91 1d       	adc	r25, r1
 6a2:	a1 1d       	adc	r26, r1
 6a4:	6a 0f       	add	r22, r26
 6a6:	71 1d       	adc	r23, r1
 6a8:	81 1d       	adc	r24, r1
 6aa:	91 1d       	adc	r25, r1
 6ac:	a1 1d       	adc	r26, r1
 6ae:	20 d0       	rcall	.+64     	; 0x6f0 <__ultoa_invert+0x84>
 6b0:	09 f4       	brne	.+2      	; 0x6b4 <__ultoa_invert+0x48>
 6b2:	68 94       	set
 6b4:	3f 91       	pop	r19
 6b6:	2a e0       	ldi	r18, 0x0A	; 10
 6b8:	26 9f       	mul	r18, r22
 6ba:	11 24       	eor	r1, r1
 6bc:	30 19       	sub	r19, r0
 6be:	30 5d       	subi	r19, 0xD0	; 208
 6c0:	31 93       	st	Z+, r19
 6c2:	de f6       	brtc	.-74     	; 0x67a <__ultoa_invert+0xe>
 6c4:	cf 01       	movw	r24, r30
 6c6:	08 95       	ret
 6c8:	46 2f       	mov	r20, r22
 6ca:	47 70       	andi	r20, 0x07	; 7
 6cc:	40 5d       	subi	r20, 0xD0	; 208
 6ce:	41 93       	st	Z+, r20
 6d0:	b3 e0       	ldi	r27, 0x03	; 3
 6d2:	0f d0       	rcall	.+30     	; 0x6f2 <__ultoa_invert+0x86>
 6d4:	c9 f7       	brne	.-14     	; 0x6c8 <__ultoa_invert+0x5c>
 6d6:	f6 cf       	rjmp	.-20     	; 0x6c4 <__ultoa_invert+0x58>
 6d8:	46 2f       	mov	r20, r22
 6da:	4f 70       	andi	r20, 0x0F	; 15
 6dc:	40 5d       	subi	r20, 0xD0	; 208
 6de:	4a 33       	cpi	r20, 0x3A	; 58
 6e0:	18 f0       	brcs	.+6      	; 0x6e8 <__ultoa_invert+0x7c>
 6e2:	49 5d       	subi	r20, 0xD9	; 217
 6e4:	31 fd       	sbrc	r19, 1
 6e6:	40 52       	subi	r20, 0x20	; 32
 6e8:	41 93       	st	Z+, r20
 6ea:	02 d0       	rcall	.+4      	; 0x6f0 <__ultoa_invert+0x84>
 6ec:	a9 f7       	brne	.-22     	; 0x6d8 <__ultoa_invert+0x6c>
 6ee:	ea cf       	rjmp	.-44     	; 0x6c4 <__ultoa_invert+0x58>
 6f0:	b4 e0       	ldi	r27, 0x04	; 4
 6f2:	a6 95       	lsr	r26
 6f4:	97 95       	ror	r25
 6f6:	87 95       	ror	r24
 6f8:	77 95       	ror	r23
 6fa:	67 95       	ror	r22
 6fc:	ba 95       	dec	r27
 6fe:	c9 f7       	brne	.-14     	; 0x6f2 <__ultoa_invert+0x86>
 700:	00 97       	sbiw	r24, 0x00	; 0
 702:	61 05       	cpc	r22, r1
 704:	71 05       	cpc	r23, r1
 706:	08 95       	ret
 708:	9b 01       	movw	r18, r22
 70a:	ac 01       	movw	r20, r24
 70c:	0a 2e       	mov	r0, r26
 70e:	06 94       	lsr	r0
 710:	57 95       	ror	r21
 712:	47 95       	ror	r20
 714:	37 95       	ror	r19
 716:	27 95       	ror	r18
 718:	ba 95       	dec	r27
 71a:	c9 f7       	brne	.-14     	; 0x70e <__ultoa_invert+0xa2>
 71c:	62 0f       	add	r22, r18
 71e:	73 1f       	adc	r23, r19
 720:	84 1f       	adc	r24, r20
 722:	95 1f       	adc	r25, r21
 724:	a0 1d       	adc	r26, r0
 726:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000a02 <__prologue_saves__>:
 a02:	2f 92       	push	r2
 a04:	3f 92       	push	r3
 a06:	4f 92       	push	r4
 a08:	5f 92       	push	r5
 a0a:	6f 92       	push	r6
 a0c:	7f 92       	push	r7
 a0e:	8f 92       	push	r8
 a10:	9f 92       	push	r9
 a12:	af 92       	push	r10
 a14:	bf 92       	push	r11
 a16:	cf 92       	push	r12
 a18:	df 92       	push	r13
 a1a:	ef 92       	push	r14
 a1c:	ff 92       	push	r15
 a1e:	0f 93       	push	r16
 a20:	1f 93       	push	r17
 a22:	cf 93       	push	r28
 a24:	df 93       	push	r29
 a26:	cd b7       	in	r28, 0x3d	; 61
 a28:	de b7       	in	r29, 0x3e	; 62
 a2a:	ca 1b       	sub	r28, r26
 a2c:	db 0b       	sbc	r29, r27
 a2e:	0f b6       	in	r0, 0x3f	; 63
 a30:	f8 94       	cli
 a32:	de bf       	out	0x3e, r29	; 62
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	cd bf       	out	0x3d, r28	; 61
 a38:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00000a70 <__epilogue_restores__>:
 a70:	2a 88       	ldd	r2, Y+18	; 0x12
 a72:	39 88       	ldd	r3, Y+17	; 0x11
 a74:	48 88       	ldd	r4, Y+16	; 0x10
 a76:	5f 84       	ldd	r5, Y+15	; 0x0f
 a78:	6e 84       	ldd	r6, Y+14	; 0x0e
 a7a:	7d 84       	ldd	r7, Y+13	; 0x0d
 a7c:	8c 84       	ldd	r8, Y+12	; 0x0c
 a7e:	9b 84       	ldd	r9, Y+11	; 0x0b
 a80:	aa 84       	ldd	r10, Y+10	; 0x0a
 a82:	b9 84       	ldd	r11, Y+9	; 0x09
 a84:	c8 84       	ldd	r12, Y+8	; 0x08
 a86:	df 80       	ldd	r13, Y+7	; 0x07
 a88:	ee 80       	ldd	r14, Y+6	; 0x06
 a8a:	fd 80       	ldd	r15, Y+5	; 0x05
 a8c:	0c 81       	ldd	r16, Y+4	; 0x04
 a8e:	1b 81       	ldd	r17, Y+3	; 0x03
 a90:	aa 81       	ldd	r26, Y+2	; 0x02
 a92:	b9 81       	ldd	r27, Y+1	; 0x01
 a94:	ce 0f       	add	r28, r30
 a96:	d1 1d       	adc	r29, r1
 a98:	0f b6       	in	r0, 0x3f	; 63
 a9a:	f8 94       	cli
 a9c:	de bf       	out	0x3e, r29	; 62
 a9e:	0f be       	out	0x3f, r0	; 63
 aa0:	cd bf       	out	0x3d, r28	; 61
 aa2:	ed 01       	movw	r28, r26
 aa4:	08 95       	ret
