
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c84  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800100  00800100  00000c84  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000228c  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e5a  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aa4  00000000  00000000  00003efe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000274  00000000  00000000  000049a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043c  00000000  00000000  00004c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007d8  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  0000582c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000be8  00000be8  00000c7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000058f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text         00000062  000007f6  000007f6  0000088a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.hmi_init 0000000a  00000bd6  00000bd6  00000c6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.output_msg 00000052  0000090e  0000090e  000009a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.init    0000000e  00000bbc  00000bbc  00000c50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .progmemx.data 00000026  0000010c  0000010c  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 19 .text.main    000000d8  00000586  00000586  0000061a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .data.nextState 00000001  00800125  00000bee  00000c82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .data.currentState 00000001  00800126  00000bef  00000c83  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .text.write_4bit_msb 0000001c  00000b7c  00000b7c  00000c10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.lcd_write 00000030  00000b2e  00000b2e  00000bc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.lcd_clear 00000010  00000bac  00000bac  00000c40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.lcd_set_cursor_mode 0000000c  00000bca  00000bca  00000c5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.lcd_init 00000060  00000858  00000858  000008ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.lcd_set_cursor_pos 00000014  00000b98  00000b98  00000c2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.lcd_write_str 00000038  00000a20  00000a20  00000ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.numkey_init 00000008  00000be0  00000be0  00000c74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.numkey_read 00000056  000008b8  000008b8  0000094c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .progmemx.data.key_map 0000000c  00000132  00000132  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 32 .text.__vector_29 0000003a  000009e6  000009e6  00000a7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.regulator_init 00000040  000009a6  000009a6  00000a3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.regulator_read_power 00000064  00000792  00000792  00000826  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .data.adc     00000002  00800123  00000bec  00000c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 36 .text.libgcc.mul 0000001e  00000b5e  00000b5e  00000bf2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.avrlibc 00000032  00000afc  00000afc  00000b90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.avrlibc 00000046  00000960  00000960  000009f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.avrlibc 00000448  0000013e  0000013e  000001d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc 00000036  00000a90  00000a90  00000b24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.avrlibc 00000078  0000071a  0000071a  000007ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.avrlibc 000000bc  0000065e  0000065e  000006f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.libgcc.prologue 00000038  00000a58  00000a58  00000aec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.libgcc.prologue 00000036  00000ac6  00000ac6  00000b5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
   8:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
   c:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  10:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  14:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  18:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  1c:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  20:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  24:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  28:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  2c:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  30:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  34:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  38:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  3c:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  40:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  44:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  48:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  4c:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  50:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  54:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  58:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  5c:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  60:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  64:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  68:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  6c:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  70:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  74:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__vector_29>
  78:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  7c:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  80:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  84:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  88:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  8c:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  90:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  94:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  98:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  9c:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  a0:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  a4:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>
  a8:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__bad_interrupt>

000000ac <.dinit>:
  ac:	01 00       	.word	0x0001	; ????
  ae:	01 23       	and	r16, r17
  b0:	80 01       	movw	r16, r0
  b2:	23 01       	movw	r4, r6
  b4:	27 00       	.word	0x0027	; ????
  b6:	0b ec       	ldi	r16, 0xCB	; 203

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	da e0       	ldi	r29, 0x0A	; 10
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	ec ea       	ldi	r30, 0xAC	; 172
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	17 c0       	rjmp	.+46     	; 0xfa <__do_clear_bss+0x8>
  cc:	b5 91       	lpm	r27, Z+
  ce:	a5 91       	lpm	r26, Z+
  d0:	35 91       	lpm	r19, Z+
  d2:	25 91       	lpm	r18, Z+
  d4:	05 91       	lpm	r16, Z+
  d6:	07 fd       	sbrc	r16, 7
  d8:	0c c0       	rjmp	.+24     	; 0xf2 <__do_clear_bss>
  da:	95 91       	lpm	r25, Z+
  dc:	85 91       	lpm	r24, Z+
  de:	ef 01       	movw	r28, r30
  e0:	f9 2f       	mov	r31, r25
  e2:	e8 2f       	mov	r30, r24
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a2 17       	cp	r26, r18
  ea:	b3 07       	cpc	r27, r19
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0x20>
  ee:	fe 01       	movw	r30, r28
  f0:	04 c0       	rjmp	.+8      	; 0xfa <__do_clear_bss+0x8>

000000f2 <__do_clear_bss>:
  f2:	1d 92       	st	X+, r1
  f4:	a2 17       	cp	r26, r18
  f6:	b3 07       	cpc	r27, r19
  f8:	e1 f7       	brne	.-8      	; 0xf2 <__do_clear_bss>
  fa:	e8 3b       	cpi	r30, 0xB8	; 184
  fc:	f4 07       	cpc	r31, r20
  fe:	31 f7       	brne	.-52     	; 0xcc <__do_copy_data+0x8>
 100:	0e 94 c3 02 	call	0x586	; 0x586 <main>
 104:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>

Disassembly of section .text:

00000be8 <__bad_interrupt>:
 be8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text:

000007f6 <delay_1_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	RET
 802:	08 95       	ret

00000804 <delay_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	DEC R24
 81c:	8a 95       	dec	r24
	CPI R24, 0			; more loops to do?
 81e:	80 30       	cpi	r24, 0x00	; 0
	BRNE delay_micros	;	continue!
 820:	89 f7       	brne	.-30     	; 0x804 <delay_micros>
	RET
 822:	08 95       	ret

00000824 <delay_ms>:
; Delay of X ms
;	LDI + RCALL = 4 cycles
;==============================================================================
.global delay_ms	
delay_ms:
	MOV R18, R24
 824:	28 2f       	mov	r18, r24

00000826 <loop_dms>:
loop_dms:
	LDI R24, 250
 826:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 828:	ed df       	rcall	.-38     	; 0x804 <delay_micros>
	LDI R24, 250
 82a:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 82c:	eb df       	rcall	.-42     	; 0x804 <delay_micros>
	LDI R24, 250
 82e:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 830:	e9 df       	rcall	.-46     	; 0x804 <delay_micros>
	LDI R24, 250
 832:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 834:	e7 df       	rcall	.-50     	; 0x804 <delay_micros>
	DEC R18
 836:	2a 95       	dec	r18
	CPI R18, 0			; more loops to do?
 838:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 83a:	a9 f7       	brne	.-22     	; 0x826 <loop_dms>
	RET
 83c:	08 95       	ret

0000083e <delay_s>:
;==============================================================================
; Delay seconds. R24 input.
;==============================================================================
.global delay_s	
delay_s:
	MOV R19, R24
 83e:	38 2f       	mov	r19, r24

00000840 <loop_s>:
loop_s:
	LDI R24, 250
 840:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 842:	f0 df       	rcall	.-32     	; 0x824 <delay_ms>
	LDI R24, 250
 844:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 846:	ee df       	rcall	.-36     	; 0x824 <delay_ms>
	LDI R24, 250
 848:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 84a:	ec df       	rcall	.-40     	; 0x824 <delay_ms>
	LDI R24, 250
 84c:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 84e:	ea df       	rcall	.-44     	; 0x824 <delay_ms>
	DEC R19
 850:	3a 95       	dec	r19
	CPI R19, 0
 852:	30 30       	cpi	r19, 0x00	; 0
	BRNE loop_s
 854:	a9 f7       	brne	.-22     	; 0x840 <loop_s>
	RET
 856:	08 95       	ret

Disassembly of section .text.hmi_init:

00000bd6 <hmi_init>:
 *	- init numeric keyboard
 *	- init LCD
 */
void hmi_init(void)
{
	numkey_init();
 bd6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <numkey_init>
	lcd_init();
 bda:	0e 94 2c 04 	call	0x858	; 0x858 <lcd_init>
 bde:	08 95       	ret

Disassembly of section .text.output_msg:

0000090e <output_msg>:
			break;
		}
	}
	// return result from conversion
	*p_nr = result;
}
 90e:	6f 92       	push	r6
 910:	7f 92       	push	r7
 912:	8f 92       	push	r8
 914:	cf 92       	push	r12
 916:	df 92       	push	r13
 918:	ef 92       	push	r14
 91a:	0f 93       	push	r16
 91c:	3b 01       	movw	r6, r22
 91e:	88 2e       	mov	r8, r24
 920:	69 01       	movw	r12, r18
 922:	e4 2e       	mov	r14, r20
 924:	8c e0       	ldi	r24, 0x0C	; 12
 926:	0e 94 e5 05 	call	0xbca	; 0xbca <lcd_set_cursor_mode>
 92a:	0e 94 d6 05 	call	0xbac	; 0xbac <lcd_clear>
 92e:	88 2d       	mov	r24, r8
 930:	b3 01       	movw	r22, r6
 932:	0e 94 10 05 	call	0xa20	; 0xa20 <lcd_write_str>
 936:	60 e0       	ldi	r22, 0x00	; 0
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	0e 94 cc 05 	call	0xb98	; 0xb98 <lcd_set_cursor_pos>
 93e:	8e 2d       	mov	r24, r14
 940:	b6 01       	movw	r22, r12
 942:	0e 94 10 05 	call	0xa20	; 0xa20 <lcd_write_str>
 946:	00 23       	and	r16, r16
 948:	19 f0       	breq	.+6      	; 0x950 <output_msg+0x42>
 94a:	80 2f       	mov	r24, r16
 94c:	0e 94 1f 04 	call	0x83e	; 0x83e <delay_s>
 950:	0f 91       	pop	r16
 952:	ef 90       	pop	r14
 954:	df 90       	pop	r13
 956:	cf 90       	pop	r12
 958:	8f 90       	pop	r8
 95a:	7f 90       	pop	r7
 95c:	6f 90       	pop	r6
 95e:	08 95       	ret

Disassembly of section .text.init:

00000bbc <init>:
    }
}

int init()
{
	hmi_init();
 bbc:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <hmi_init>
	numkey_init();
 bc0:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <numkey_init>
	regulator_init();
 bc4:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <regulator_init>
 bc8:	08 95       	ret

Disassembly of section .text.main:

00000586 <main>:
char reg_str[17];


int main(void)
{
	init();
 586:	0e 94 de 05 	call	0xbbc	; 0xbbc <init>
	
    while(1)
    {
		
		key = numkey_read();
 58a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <numkey_read>
 58e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <key>
        switch(currentState)
 592:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <currentState>
 596:	91 30       	cpi	r25, 0x01	; 1
 598:	e9 f0       	breq	.+58     	; 0x5d4 <main+0x4e>
 59a:	18 f0       	brcs	.+6      	; 0x5a2 <main+0x1c>
 59c:	92 30       	cpi	r25, 0x02	; 2
 59e:	61 f1       	breq	.+88     	; 0x5f8 <main+0x72>
 5a0:	39 c0       	rjmp	.+114    	; 0x614 <main+0x8e>
		{
			///////////MOTOR ON/////////////
			case MOTOR_ON:
			if (regulator_read_power() > 0)
 5a2:	0e 94 c9 03 	call	0x792	; 0x792 <regulator_read_power>
 5a6:	88 23       	and	r24, r24
 5a8:	21 f0       	breq	.+8      	; 0x5b2 <main+0x2c>
			{
				nextState = MOTOR_RUNNING;
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <nextState>
 5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <main+0x3a>
			}
			else if (key == '1')
 5b2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <key>
 5b6:	81 33       	cpi	r24, 0x31	; 49
 5b8:	19 f4       	brne	.+6      	; 0x5c0 <main+0x3a>
			{
				nextState = MOTOR_OFF;
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <nextState>
			}
			sprintf(mode_str, "MOTOR ON");
 5c0:	29 e0       	ldi	r18, 0x09	; 9
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	4c e0       	ldi	r20, 0x0C	; 12
 5c6:	51 e0       	ldi	r21, 0x01	; 1
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	0e 94 7e 05 	call	0xafc	; 0xafc <memcpy>
			break;
 5d2:	20 c0       	rjmp	.+64     	; 0x614 <main+0x8e>
			////////////MOTOR OFF/////////////
			case MOTOR_OFF:
				if(key == '2' && regulator_read_power() == 0)
 5d4:	82 33       	cpi	r24, 0x32	; 50
 5d6:	31 f4       	brne	.+12     	; 0x5e4 <main+0x5e>
 5d8:	0e 94 c9 03 	call	0x792	; 0x792 <regulator_read_power>
 5dc:	81 11       	cpse	r24, r1
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <main+0x5e>
				nextState = MOTOR_ON;
 5e0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <nextState>
				sprintf(mode_str, "MOTOR OFF");
 5e4:	2a e0       	ldi	r18, 0x0A	; 10
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	45 e1       	ldi	r20, 0x15	; 21
 5ea:	51 e0       	ldi	r21, 0x01	; 1
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	91 e0       	ldi	r25, 0x01	; 1
 5f2:	0e 94 7e 05 	call	0xafc	; 0xafc <memcpy>
			break;
 5f6:	0e c0       	rjmp	.+28     	; 0x614 <main+0x8e>
			////////////MOTOR RUNNING/////////////
			case MOTOR_RUNNING:
			
			if (key == '1')
 5f8:	81 33       	cpi	r24, 0x31	; 49
 5fa:	19 f4       	brne	.+6      	; 0x602 <main+0x7c>
			nextState= MOTOR_OFF;
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <nextState>
			sprintf(mode_str, "MOTOR RUNNING");
 602:	2e e0       	ldi	r18, 0x0E	; 14
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	4f e1       	ldi	r20, 0x1F	; 31
 608:	51 e0       	ldi	r21, 0x01	; 1
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	91 e0       	ldi	r25, 0x01	; 1
 610:	0e 94 7e 05 	call	0xafc	; 0xafc <memcpy>
			break;
		}
		sprintf(reg_str,"%u/%",regulator_read_power());
 614:	0e 94 c9 03 	call	0x792	; 0x792 <regulator_read_power>
 618:	1f 92       	push	r1
 61a:	8f 93       	push	r24
 61c:	8d e2       	ldi	r24, 0x2D	; 45
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	a0 e0       	ldi	r26, 0x00	; 0
 622:	af 93       	push	r26
 624:	9f 93       	push	r25
 626:	8f 93       	push	r24
 628:	c2 e1       	ldi	r28, 0x12	; 18
 62a:	d1 e0       	ldi	r29, 0x01	; 1
 62c:	df 93       	push	r29
 62e:	cf 93       	push	r28
 630:	0e 94 b0 04 	call	0x960	; 0x960 <sprintf>
		output_msg(mode_str,reg_str,0);
 634:	9e 01       	movw	r18, r28
 636:	40 e8       	ldi	r20, 0x80	; 128
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	71 e0       	ldi	r23, 0x01	; 1
 63c:	80 e8       	ldi	r24, 0x80	; 128
 63e:	00 e0       	ldi	r16, 0x00	; 0
 640:	0e 94 87 04 	call	0x90e	; 0x90e <output_msg>
		currentState = nextState;
 644:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <nextState>
 648:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <currentState>
    }
 64c:	8d b7       	in	r24, 0x3d	; 61
 64e:	9e b7       	in	r25, 0x3e	; 62
 650:	07 96       	adiw	r24, 0x07	; 7
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	f8 94       	cli
 656:	9e bf       	out	0x3e, r25	; 62
 658:	0f be       	out	0x3f, r0	; 63
 65a:	8d bf       	out	0x3d, r24	; 61
 65c:	96 cf       	rjmp	.-212    	; 0x58a <main+0x4>

Disassembly of section .text.write_4bit_msb:

00000b7c <write_4bit_msb>:
*	data: 4 bits of data
*/
static void write_4bit_msb(uint8_t data)
{
	//write data
	SET_BIT_LEVELS(PORTF, 0x0F, data);
 b7c:	91 b3       	in	r25, 0x11	; 17
 b7e:	9f 70       	andi	r25, 0x0F	; 15
 b80:	80 7f       	andi	r24, 0xF0	; 240
 b82:	89 2b       	or	r24, r25
 b84:	81 bb       	out	0x11, r24	; 17
	// generate pulse on the Enable pin
	SET_BIT(PORTD, 7);
 b86:	8b b1       	in	r24, 0x0b	; 11
 b88:	80 68       	ori	r24, 0x80	; 128
 b8a:	8b b9       	out	0x0b, r24	; 11
	delay_1_micros();
 b8c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <delay_1_micros>
	CLR_BIT(PORTD, 7);
 b90:	8b b1       	in	r24, 0x0b	; 11
 b92:	8f 77       	andi	r24, 0x7F	; 127
 b94:	8b b9       	out	0x0b, r24	; 11
 b96:	08 95       	ret

Disassembly of section .text.lcd_write:

00000b2e <lcd_write>:
* parameter:
*	lcd_reg: register to communicate with (Instruction or Data register)
*	data: 8-bit instruction or data (character)
*/
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 b2e:	cf 93       	push	r28
 b30:	c6 2f       	mov	r28, r22
	// select register
	if (lcd_reg == INSTRUCTION) {
 b32:	81 11       	cpse	r24, r1
 b34:	04 c0       	rjmp	.+8      	; 0xb3e <lcd_write+0x10>
		CLR_BIT(PORTD, 6);	// Instruction Register
 b36:	8b b1       	in	r24, 0x0b	; 11
 b38:	8f 7b       	andi	r24, 0xBF	; 191
 b3a:	8b b9       	out	0x0b, r24	; 11
 b3c:	03 c0       	rjmp	.+6      	; 0xb44 <lcd_write+0x16>
		} else {
		SET_BIT(PORTD, 6);	// Data Register
 b3e:	8b b1       	in	r24, 0x0b	; 11
 b40:	80 64       	ori	r24, 0x40	; 64
 b42:	8b b9       	out	0x0b, r24	; 11
	}
	// write data
	write_4bit_msb(data);
 b44:	8c 2f       	mov	r24, r28
 b46:	0e 94 be 05 	call	0xb7c	; 0xb7c <write_4bit_msb>
	write_4bit_msb(data << 4);
 b4a:	8c 2f       	mov	r24, r28
 b4c:	82 95       	swap	r24
 b4e:	80 7f       	andi	r24, 0xF0	; 240
 b50:	0e 94 be 05 	call	0xb7c	; 0xb7c <write_4bit_msb>
	delay_micros(45);
 b54:	8d e2       	ldi	r24, 0x2D	; 45
 b56:	0e 94 02 04 	call	0x804	; 0x804 <delay_micros>
}
 b5a:	cf 91       	pop	r28
 b5c:	08 95       	ret

Disassembly of section .text.lcd_clear:

00000bac <lcd_clear>:
/*
* Clears the LCD and moves the cursor to position row 0, column 0.
*/
void lcd_clear(void)
{
	lcd_write(INSTRUCTION, 0x01);
 bac:	61 e0       	ldi	r22, 0x01	; 1
 bae:	80 e0       	ldi	r24, 0x00	; 0
 bb0:	0e 94 97 05 	call	0xb2e	; 0xb2e <lcd_write>
	delay_ms(2);
 bb4:	82 e0       	ldi	r24, 0x02	; 2
 bb6:	0e 94 12 04 	call	0x824	; 0x824 <delay_ms>
 bba:	08 95       	ret

Disassembly of section .text.lcd_set_cursor_mode:

00000bca <lcd_set_cursor_mode>:
*	mode: cursor mode
*/
void lcd_set_cursor_mode(enum lcd_cursor mode)
{
	uint8_t cursor_mode;
	cursor_mode = 0x0C | mode;
 bca:	68 2f       	mov	r22, r24
 bcc:	6c 60       	ori	r22, 0x0C	; 12
	lcd_write(INSTRUCTION, cursor_mode);
 bce:	80 e0       	ldi	r24, 0x00	; 0
 bd0:	0e 94 97 05 	call	0xb2e	; 0xb2e <lcd_write>
 bd4:	08 95       	ret

Disassembly of section .text.lcd_init:

00000858 <lcd_init>:
*	- configuration of LCD communication
*/
void lcd_init(void)
{
	// PF4-PF7 (A3-A0) as outputs (LCD D4-D7)
	DDRF = 0xF0;
 858:	80 ef       	ldi	r24, 0xF0	; 240
 85a:	80 bb       	out	0x10, r24	; 16
	// PD6 & PD7 (D12 & D6) as outputs (LCD RS & LCD E)
	DDRD = 0xC0;
 85c:	80 ec       	ldi	r24, 0xC0	; 192
 85e:	8a b9       	out	0x0a, r24	; 10
	
	// wait more than 15 ms after power-up!
	delay_ms(20);
 860:	84 e1       	ldi	r24, 0x14	; 20
 862:	0e 94 12 04 	call	0x824	; 0x824 <delay_ms>
	// select Instruction Register
	CLR_BIT(PORTD, 6);
 866:	8b b1       	in	r24, 0x0b	; 11
 868:	8f 7b       	andi	r24, 0xBF	; 191
 86a:	8b b9       	out	0x0b, r24	; 11

	// Function Set: 8 bit data interface
	write_4bit_msb(0x30);
 86c:	80 e3       	ldi	r24, 0x30	; 48
 86e:	0e 94 be 05 	call	0xb7c	; 0xb7c <write_4bit_msb>
	delay_ms(10);
 872:	8a e0       	ldi	r24, 0x0A	; 10
 874:	0e 94 12 04 	call	0x824	; 0x824 <delay_ms>
	write_4bit_msb(0x30);
 878:	80 e3       	ldi	r24, 0x30	; 48
 87a:	0e 94 be 05 	call	0xb7c	; 0xb7c <write_4bit_msb>
	delay_ms(10);
 87e:	8a e0       	ldi	r24, 0x0A	; 10
 880:	0e 94 12 04 	call	0x824	; 0x824 <delay_ms>
	write_4bit_msb(0x30);
 884:	80 e3       	ldi	r24, 0x30	; 48
 886:	0e 94 be 05 	call	0xb7c	; 0xb7c <write_4bit_msb>
	delay_ms(10);
 88a:	8a e0       	ldi	r24, 0x0A	; 10
 88c:	0e 94 12 04 	call	0x824	; 0x824 <delay_ms>

	// Function Set: switch to 4 bit data interface
	write_4bit_msb(0x20);
 890:	80 e2       	ldi	r24, 0x20	; 32
 892:	0e 94 be 05 	call	0xb7c	; 0xb7c <write_4bit_msb>
	delay_micros(45);
 896:	8d e2       	ldi	r24, 0x2D	; 45
 898:	0e 94 02 04 	call	0x804	; 0x804 <delay_micros>

	// Function Set: 4 bit data interface, 2 lines, font 5x10
	lcd_write(INSTRUCTION, 0x28);
 89c:	68 e2       	ldi	r22, 0x28	; 40
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	0e 94 97 05 	call	0xb2e	; 0xb2e <lcd_write>

	// Display on, no cursor
	lcd_set_cursor_mode(CURSOR_OFF);
 8a4:	8c e0       	ldi	r24, 0x0C	; 12
 8a6:	0e 94 e5 05 	call	0xbca	; 0xbca <lcd_set_cursor_mode>

	// clear display
	lcd_clear();
 8aa:	0e 94 d6 05 	call	0xbac	; 0xbac <lcd_clear>

	// Entry Mode Set: incremental cursor movement, no display shift
	lcd_write(INSTRUCTION, 0x06);
 8ae:	66 e0       	ldi	r22, 0x06	; 6
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	0e 94 97 05 	call	0xb2e	; 0xb2e <lcd_write>
 8b6:	08 95       	ret

Disassembly of section .text.lcd_set_cursor_pos:

00000b98 <lcd_set_cursor_pos>:
*	col: 0 is the first column, 15 is the last visible column
*/
void lcd_set_cursor_pos(uint8_t row, uint8_t col)
{
	uint8_t cursor_pos;
	cursor_pos = 0x80 | (row << 6) | col;
 b98:	20 e4       	ldi	r18, 0x40	; 64
 b9a:	82 9f       	mul	r24, r18
 b9c:	c0 01       	movw	r24, r0
 b9e:	11 24       	eor	r1, r1
 ba0:	68 2b       	or	r22, r24
 ba2:	60 68       	ori	r22, 0x80	; 128
	lcd_write(INSTRUCTION, cursor_pos);
 ba4:	80 e0       	ldi	r24, 0x00	; 0
 ba6:	0e 94 97 05 	call	0xb2e	; 0xb2e <lcd_write>
 baa:	08 95       	ret

Disassembly of section .text.lcd_write_str:

00000a20 <lcd_write_str>:
*
* parameter:
*	p_str: pointer to the string's first character
*/
void lcd_write_str(const char *p_str)
{
 a20:	cf 92       	push	r12
 a22:	df 92       	push	r13
 a24:	ef 92       	push	r14
 a26:	cf 93       	push	r28
 a28:	6b 01       	movw	r12, r22
 a2a:	e8 2e       	mov	r14, r24
	uint8_t i =0;
 a2c:	c0 e0       	ldi	r28, 0x00	; 0
	while (p_str[i] !='\0')
 a2e:	04 c0       	rjmp	.+8      	; 0xa38 <lcd_write_str+0x18>
	{
		lcd_write(DATA, p_str[i]);
 a30:	81 e0       	ldi	r24, 0x01	; 1
 a32:	0e 94 97 05 	call	0xb2e	; 0xb2e <lcd_write>
		i++;
 a36:	cf 5f       	subi	r28, 0xFF	; 255
*	p_str: pointer to the string's first character
*/
void lcd_write_str(const char *p_str)
{
	uint8_t i =0;
	while (p_str[i] !='\0')
 a38:	ae 2d       	mov	r26, r14
 a3a:	c6 01       	movw	r24, r12
 a3c:	8c 0f       	add	r24, r28
 a3e:	91 1d       	adc	r25, r1
 a40:	a1 1d       	adc	r26, r1
 a42:	fc 01       	movw	r30, r24
 a44:	64 91       	lpm	r22, Z
 a46:	a7 fd       	sbrc	r26, 7
 a48:	60 81       	ld	r22, Z
 a4a:	61 11       	cpse	r22, r1
 a4c:	f1 cf       	rjmp	.-30     	; 0xa30 <lcd_write_str+0x10>
	{
		lcd_write(DATA, p_str[i]);
		i++;
	}
 a4e:	cf 91       	pop	r28
 a50:	ef 90       	pop	r14
 a52:	df 90       	pop	r13
 a54:	cf 90       	pop	r12
 a56:	08 95       	ret

Disassembly of section .text.numkey_init:

00000be0 <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// PE6 (D7) as input (key pressed?)
	DDRE = 0x00;
 be0:	1d b8       	out	0x0d, r1	; 13
	// PB4-PB7 (D8-D11) as outputs (MUX and decoder)
	DDRB = 0xF0;
 be2:	80 ef       	ldi	r24, 0xF0	; 240
 be4:	84 b9       	out	0x04, r24	; 4
 be6:	08 95       	ret

Disassembly of section .text.numkey_read:

000008b8 <numkey_read>:
 * return:
 *	If a key is pressed, then a character that represents the key is returned.
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
 8b8:	0f 93       	push	r16
 8ba:	1f 93       	push	r17
 8bc:	cf 93       	push	r28
	uint8_t	i;
	for (i = 0; i < sizeof(key_map); i++)
 8be:	c0 e0       	ldi	r28, 0x00	; 0
 8c0:	1f c0       	rjmp	.+62     	; 0x900 <numkey_read+0x48>
	{
		SET_BIT_LEVELS(PORTB,0x0F, i << 4); // skickar till portb
 8c2:	25 b1       	in	r18, 0x05	; 5
 8c4:	0c 2f       	mov	r16, r28
 8c6:	10 e0       	ldi	r17, 0x00	; 0
 8c8:	c8 01       	movw	r24, r16
 8ca:	82 95       	swap	r24
 8cc:	92 95       	swap	r25
 8ce:	90 7f       	andi	r25, 0xF0	; 240
 8d0:	98 27       	eor	r25, r24
 8d2:	80 7f       	andi	r24, 0xF0	; 240
 8d4:	98 27       	eor	r25, r24
 8d6:	92 2f       	mov	r25, r18
 8d8:	9f 70       	andi	r25, 0x0F	; 15
 8da:	89 2b       	or	r24, r25
 8dc:	85 b9       	out	0x05, r24	; 5
		delay_ms(1);						// delay för knappstuds
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	0e 94 12 04 	call	0x824	; 0x824 <delay_ms>
		if (PINE & 0b01000000)				// kolla på PINE,6 om == 1
 8e4:	66 9b       	sbis	0x0c, 6	; 12
 8e6:	0b c0       	rjmp	.+22     	; 0x8fe <numkey_read+0x46>
		{
			return key_map[i];
 8e8:	c8 01       	movw	r24, r16
 8ea:	11 0f       	add	r17, r17
 8ec:	aa 0b       	sbc	r26, r26
 8ee:	8e 5c       	subi	r24, 0xCE	; 206
 8f0:	9e 4f       	sbci	r25, 0xFE	; 254
 8f2:	af 4f       	sbci	r26, 0xFF	; 255
 8f4:	fc 01       	movw	r30, r24
 8f6:	84 91       	lpm	r24, Z
 8f8:	a7 fd       	sbrc	r26, 7
 8fa:	80 81       	ld	r24, Z
 8fc:	04 c0       	rjmp	.+8      	; 0x906 <numkey_read+0x4e>
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
	uint8_t	i;
	for (i = 0; i < sizeof(key_map); i++)
 8fe:	cf 5f       	subi	r28, 0xFF	; 255
 900:	cc 30       	cpi	r28, 0x0C	; 12
 902:	f8 f2       	brcs	.-66     	; 0x8c2 <numkey_read+0xa>
			//}
	}
	
	
	// no key was pressed!
	return NO_KEY;
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	cf 91       	pop	r28
 908:	1f 91       	pop	r17
 90a:	0f 91       	pop	r16
 90c:	08 95       	ret

Disassembly of section .text.__vector_29:

000009e6 <__vector_29>:
/*
 * Interrupt Service Routine for the ADC.
 * The ISR will execute when a A/D conversion is complete.
 */
ISR(ADC_vect)
{
 9e6:	1f 92       	push	r1
 9e8:	0f 92       	push	r0
 9ea:	0f b6       	in	r0, 0x3f	; 63
 9ec:	0f 92       	push	r0
 9ee:	11 24       	eor	r1, r1
 9f0:	2f 93       	push	r18
 9f2:	8f 93       	push	r24
 9f4:	9f 93       	push	r25
	// read ADC value
	unsigned char low,high;

	low = ADCL;
 9f6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
 9fa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

	adc = (high << 8 ) + low;
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	98 2f       	mov	r25, r24
 a02:	88 27       	eor	r24, r24
 a04:	82 0f       	add	r24, r18
 a06:	91 1d       	adc	r25, r1
 a08:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <_end+0x1>
 a0c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_end>
}
 a10:	9f 91       	pop	r25
 a12:	8f 91       	pop	r24
 a14:	2f 91       	pop	r18
 a16:	0f 90       	pop	r0
 a18:	0f be       	out	0x3f, r0	; 63
 a1a:	0f 90       	pop	r0
 a1c:	1f 90       	pop	r1
 a1e:	18 95       	reti

Disassembly of section .text.regulator_init:

000009a6 <regulator_init>:
 */
void regulator_init(void)
{
	
	// UPPGIFT: konfigurera ADC-enheten genom ställa in ADMUX och ADCSRA enligt kommentarerna nedanför!
	ADMUX |= (1 << REFS0);		// set reference voltage (internal 5V)
 9a6:	ec e7       	ldi	r30, 0x7C	; 124
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	80 81       	ld	r24, Z
 9ac:	80 64       	ori	r24, 0x40	; 64
 9ae:	80 83       	st	Z, r24
	ADMUX |= 0b00001001;		// select diff.amp 10x on ADC0 & ADC1
 9b0:	80 81       	ld	r24, Z
 9b2:	89 60       	ori	r24, 0x09	; 9
 9b4:	80 83       	st	Z, r24
								// right adjustment of ADC value
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);				// prescaler 128
 9b6:	ea e7       	ldi	r30, 0x7A	; 122
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	80 81       	ld	r24, Z
 9bc:	87 60       	ori	r24, 0x07	; 7
 9be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE);		// enable Auto Trigger
 9c0:	80 81       	ld	r24, Z
 9c2:	80 62       	ori	r24, 0x20	; 32
 9c4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);		// enable Interrupt
 9c6:	80 81       	ld	r24, Z
 9c8:	88 60       	ori	r24, 0x08	; 8
 9ca:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);		// enable ADC
 9cc:	80 81       	ld	r24, Z
 9ce:	80 68       	ori	r24, 0x80	; 128
 9d0:	80 83       	st	Z, r24

	// disable digital input on ADC0 and ADC1
	DIDR0 = 3;
 9d2:	83 e0       	ldi	r24, 0x03	; 3
 9d4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
		
	// disable USB controller (to make interrupts possible)
	USBCON = 0;	
 9d8:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	// enable global interrupts
	sei();
 9dc:	78 94       	sei

	// start initial conversion
	ADCSRA |= (1 << ADSC);	// UPPGIFT: gör så att den initiala A/D-omvandlingen sker
 9de:	80 81       	ld	r24, Z
 9e0:	80 64       	ori	r24, 0x40	; 64
 9e2:	80 83       	st	Z, r24
 9e4:	08 95       	ret

Disassembly of section .text.regulator_read_power:

00000792 <regulator_read_power>:
	}
	return (uint8_t) temp;
}

uint8_t regulator_read_power(void)
{
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
	uint16_t adc_correction = adc * 100;
 796:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <_end>
 79a:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <_end+0x1>
 79e:	24 e6       	ldi	r18, 0x64	; 100
 7a0:	28 9f       	mul	r18, r24
 7a2:	a0 01       	movw	r20, r0
 7a4:	29 9f       	mul	r18, r25
 7a6:	50 0d       	add	r21, r0
 7a8:	11 24       	eor	r1, r1
	uint16_t regulator = adc_correction / 1000;
 7aa:	ea 01       	movw	r28, r20
 7ac:	d6 95       	lsr	r29
 7ae:	c7 95       	ror	r28
 7b0:	d6 95       	lsr	r29
 7b2:	c7 95       	ror	r28
 7b4:	d6 95       	lsr	r29
 7b6:	c7 95       	ror	r28
 7b8:	9e 01       	movw	r18, r28
 7ba:	a5 ec       	ldi	r26, 0xC5	; 197
 7bc:	b0 e2       	ldi	r27, 0x20	; 32
 7be:	0e 94 af 05 	call	0xb5e	; 0xb5e <__umulhisi3>
 7c2:	fc 01       	movw	r30, r24
 7c4:	f2 95       	swap	r31
 7c6:	e2 95       	swap	r30
 7c8:	ef 70       	andi	r30, 0x0F	; 15
 7ca:	ef 27       	eor	r30, r31
 7cc:	ff 70       	andi	r31, 0x0F	; 15
 7ce:	ef 27       	eor	r30, r31
	if((adc_correction % 1000) >= 500)
 7d0:	28 ee       	ldi	r18, 0xE8	; 232
 7d2:	33 e0       	ldi	r19, 0x03	; 3
 7d4:	e2 9f       	mul	r30, r18
 7d6:	c0 01       	movw	r24, r0
 7d8:	e3 9f       	mul	r30, r19
 7da:	90 0d       	add	r25, r0
 7dc:	f2 9f       	mul	r31, r18
 7de:	90 0d       	add	r25, r0
 7e0:	11 24       	eor	r1, r1
 7e2:	48 1b       	sub	r20, r24
 7e4:	59 0b       	sbc	r21, r25
 7e6:	44 3f       	cpi	r20, 0xF4	; 244
 7e8:	51 40       	sbci	r21, 0x01	; 1
 7ea:	08 f0       	brcs	.+2      	; 0x7ee <regulator_read_power+0x5c>
		regulator++;
 7ec:	31 96       	adiw	r30, 0x01	; 1
	return (uint8_t) regulator;
 7ee:	8e 2f       	mov	r24, r30
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000b5e <__umulhisi3>:
 b5e:	a2 9f       	mul	r26, r18
 b60:	b0 01       	movw	r22, r0
 b62:	b3 9f       	mul	r27, r19
 b64:	c0 01       	movw	r24, r0
 b66:	a3 9f       	mul	r26, r19
 b68:	70 0d       	add	r23, r0
 b6a:	81 1d       	adc	r24, r1
 b6c:	11 24       	eor	r1, r1
 b6e:	91 1d       	adc	r25, r1
 b70:	b2 9f       	mul	r27, r18
 b72:	70 0d       	add	r23, r0
 b74:	81 1d       	adc	r24, r1
 b76:	11 24       	eor	r1, r1
 b78:	91 1d       	adc	r25, r1
 b7a:	08 95       	ret

Disassembly of section .text.avrlibc:

00000afc <memcpy>:
 afc:	cf 92       	push	r12
 afe:	df 92       	push	r13
 b00:	ef 92       	push	r14
 b02:	dc 01       	movw	r26, r24
 b04:	6a 01       	movw	r12, r20
 b06:	e6 2e       	mov	r14, r22
 b08:	28 0f       	add	r18, r24
 b0a:	39 1f       	adc	r19, r25
 b0c:	a2 17       	cp	r26, r18
 b0e:	b3 07       	cpc	r27, r19
 b10:	51 f0       	breq	.+20     	; 0xb26 <__stack+0x27>
 b12:	f6 01       	movw	r30, r12
 b14:	44 91       	lpm	r20, Z
 b16:	e7 fc       	sbrc	r14, 7
 b18:	40 81       	ld	r20, Z
 b1a:	4d 93       	st	X+, r20
 b1c:	4f ef       	ldi	r20, 0xFF	; 255
 b1e:	c4 1a       	sub	r12, r20
 b20:	d4 0a       	sbc	r13, r20
 b22:	e4 0a       	sbc	r14, r20
 b24:	f3 cf       	rjmp	.-26     	; 0xb0c <__stack+0xd>
 b26:	ef 90       	pop	r14
 b28:	df 90       	pop	r13
 b2a:	cf 90       	pop	r12
 b2c:	08 95       	ret

Disassembly of section .text.avrlibc:

00000960 <sprintf>:
 960:	af e0       	ldi	r26, 0x0F	; 15
 962:	b0 e0       	ldi	r27, 0x00	; 0
 964:	e6 eb       	ldi	r30, 0xB6	; 182
 966:	f4 e0       	ldi	r31, 0x04	; 4
 968:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__prologue_saves__+0x1c>
 96c:	0e 89       	ldd	r16, Y+22	; 0x16
 96e:	1f 89       	ldd	r17, Y+23	; 0x17
 970:	86 e0       	ldi	r24, 0x06	; 6
 972:	8d 83       	std	Y+5, r24	; 0x05
 974:	1a 83       	std	Y+2, r17	; 0x02
 976:	09 83       	std	Y+1, r16	; 0x01
 978:	8f ef       	ldi	r24, 0xFF	; 255
 97a:	9f e7       	ldi	r25, 0x7F	; 127
 97c:	9f 83       	std	Y+7, r25	; 0x07
 97e:	8e 83       	std	Y+6, r24	; 0x06
 980:	9e 01       	movw	r18, r28
 982:	25 5e       	subi	r18, 0xE5	; 229
 984:	3f 4f       	sbci	r19, 0xFF	; 255
 986:	48 8d       	ldd	r20, Y+24	; 0x18
 988:	59 8d       	ldd	r21, Y+25	; 0x19
 98a:	6a 8d       	ldd	r22, Y+26	; 0x1a
 98c:	ce 01       	movw	r24, r28
 98e:	01 96       	adiw	r24, 0x01	; 1
 990:	0e 94 9f 00 	call	0x13e	; 0x13e <vfprintf>
 994:	e8 85       	ldd	r30, Y+8	; 0x08
 996:	f9 85       	ldd	r31, Y+9	; 0x09
 998:	e0 0f       	add	r30, r16
 99a:	f1 1f       	adc	r31, r17
 99c:	10 82       	st	Z, r1
 99e:	2f 96       	adiw	r28, 0x0f	; 15
 9a0:	e4 e0       	ldi	r30, 0x04	; 4
 9a2:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

0000013e <vfprintf>:
 13e:	2f 92       	push	r2
 140:	3f 92       	push	r3
 142:	4f 92       	push	r4
 144:	6f 92       	push	r6
 146:	7f 92       	push	r7
 148:	8f 92       	push	r8
 14a:	9f 92       	push	r9
 14c:	af 92       	push	r10
 14e:	bf 92       	push	r11
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	62 97       	sbiw	r28, 0x12	; 18
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
 170:	6c 01       	movw	r12, r24
 172:	3a 01       	movw	r6, r20
 174:	86 2e       	mov	r8, r22
 176:	79 01       	movw	r14, r18
 178:	fc 01       	movw	r30, r24
 17a:	10 86       	std	Z+8, r1	; 0x08
 17c:	17 82       	std	Z+7, r1	; 0x07
 17e:	84 81       	ldd	r24, Z+4	; 0x04
 180:	81 ff       	sbrs	r24, 1
 182:	e7 c1       	rjmp	.+974    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
 184:	9e 01       	movw	r18, r28
 186:	2f 5f       	subi	r18, 0xFF	; 255
 188:	3f 4f       	sbci	r19, 0xFF	; 255
 18a:	3d 87       	std	Y+13, r19	; 0x0d
 18c:	2c 87       	std	Y+12, r18	; 0x0c
 18e:	c9 01       	movw	r24, r18
 190:	a0 e8       	ldi	r26, 0x80	; 128
 192:	88 8b       	std	Y+16, r24	; 0x10
 194:	99 8b       	std	Y+17, r25	; 0x11
 196:	aa 8b       	std	Y+18, r26	; 0x12
 198:	9f e3       	ldi	r25, 0x3F	; 63
 19a:	99 2e       	mov	r9, r25
 19c:	f3 01       	movw	r30, r6
 19e:	84 91       	lpm	r24, Z
 1a0:	87 fc       	sbrc	r8, 7
 1a2:	80 81       	ld	r24, Z
 1a4:	88 23       	and	r24, r24
 1a6:	09 f4       	brne	.+2      	; 0x1aa <vfprintf+0x6c>
 1a8:	d0 c1       	rjmp	.+928    	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 1aa:	48 2d       	mov	r20, r8
 1ac:	93 01       	movw	r18, r6
 1ae:	2f 5f       	subi	r18, 0xFF	; 255
 1b0:	3f 4f       	sbci	r19, 0xFF	; 255
 1b2:	4f 4f       	sbci	r20, 0xFF	; 255
 1b4:	85 32       	cpi	r24, 0x25	; 37
 1b6:	19 f0       	breq	.+6      	; 0x1be <vfprintf+0x80>
 1b8:	39 01       	movw	r6, r18
 1ba:	84 2e       	mov	r8, r20
 1bc:	0a c0       	rjmp	.+20     	; 0x1d2 <vfprintf+0x94>
 1be:	f9 01       	movw	r30, r18
 1c0:	84 91       	lpm	r24, Z
 1c2:	47 fd       	sbrc	r20, 7
 1c4:	80 81       	ld	r24, Z
 1c6:	92 e0       	ldi	r25, 0x02	; 2
 1c8:	69 0e       	add	r6, r25
 1ca:	71 1c       	adc	r7, r1
 1cc:	81 1c       	adc	r8, r1
 1ce:	85 32       	cpi	r24, 0x25	; 37
 1d0:	29 f4       	brne	.+10     	; 0x1dc <vfprintf+0x9e>
 1d2:	b6 01       	movw	r22, r12
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 1da:	e0 cf       	rjmp	.-64     	; 0x19c <vfprintf+0x5e>
 1dc:	b1 2c       	mov	r11, r1
 1de:	00 e0       	ldi	r16, 0x00	; 0
 1e0:	10 e0       	ldi	r17, 0x00	; 0
 1e2:	10 32       	cpi	r17, 0x20	; 32
 1e4:	a0 f4       	brcc	.+40     	; 0x20e <vfprintf+0xd0>
 1e6:	8b 32       	cpi	r24, 0x2B	; 43
 1e8:	69 f0       	breq	.+26     	; 0x204 <vfprintf+0xc6>
 1ea:	30 f4       	brcc	.+12     	; 0x1f8 <vfprintf+0xba>
 1ec:	80 32       	cpi	r24, 0x20	; 32
 1ee:	59 f0       	breq	.+22     	; 0x206 <vfprintf+0xc8>
 1f0:	83 32       	cpi	r24, 0x23	; 35
 1f2:	69 f4       	brne	.+26     	; 0x20e <vfprintf+0xd0>
 1f4:	10 61       	ori	r17, 0x10	; 16
 1f6:	2c c0       	rjmp	.+88     	; 0x250 <vfprintf+0x112>
 1f8:	8d 32       	cpi	r24, 0x2D	; 45
 1fa:	39 f0       	breq	.+14     	; 0x20a <vfprintf+0xcc>
 1fc:	80 33       	cpi	r24, 0x30	; 48
 1fe:	39 f4       	brne	.+14     	; 0x20e <vfprintf+0xd0>
 200:	11 60       	ori	r17, 0x01	; 1
 202:	26 c0       	rjmp	.+76     	; 0x250 <vfprintf+0x112>
 204:	12 60       	ori	r17, 0x02	; 2
 206:	14 60       	ori	r17, 0x04	; 4
 208:	23 c0       	rjmp	.+70     	; 0x250 <vfprintf+0x112>
 20a:	18 60       	ori	r17, 0x08	; 8
 20c:	21 c0       	rjmp	.+66     	; 0x250 <vfprintf+0x112>
 20e:	17 fd       	sbrc	r17, 7
 210:	29 c0       	rjmp	.+82     	; 0x264 <vfprintf+0x126>
 212:	90 ed       	ldi	r25, 0xD0	; 208
 214:	98 0f       	add	r25, r24
 216:	9a 30       	cpi	r25, 0x0A	; 10
 218:	78 f4       	brcc	.+30     	; 0x238 <vfprintf+0xfa>
 21a:	16 ff       	sbrs	r17, 6
 21c:	06 c0       	rjmp	.+12     	; 0x22a <vfprintf+0xec>
 21e:	aa e0       	ldi	r26, 0x0A	; 10
 220:	ba 9e       	mul	r11, r26
 222:	90 0d       	add	r25, r0
 224:	11 24       	eor	r1, r1
 226:	b9 2e       	mov	r11, r25
 228:	13 c0       	rjmp	.+38     	; 0x250 <vfprintf+0x112>
 22a:	ea e0       	ldi	r30, 0x0A	; 10
 22c:	0e 9f       	mul	r16, r30
 22e:	90 0d       	add	r25, r0
 230:	11 24       	eor	r1, r1
 232:	09 2f       	mov	r16, r25
 234:	10 62       	ori	r17, 0x20	; 32
 236:	0c c0       	rjmp	.+24     	; 0x250 <vfprintf+0x112>
 238:	8e 32       	cpi	r24, 0x2E	; 46
 23a:	21 f4       	brne	.+8      	; 0x244 <vfprintf+0x106>
 23c:	16 fd       	sbrc	r17, 6
 23e:	85 c1       	rjmp	.+778    	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 240:	10 64       	ori	r17, 0x40	; 64
 242:	06 c0       	rjmp	.+12     	; 0x250 <vfprintf+0x112>
 244:	8c 36       	cpi	r24, 0x6C	; 108
 246:	11 f4       	brne	.+4      	; 0x24c <vfprintf+0x10e>
 248:	10 68       	ori	r17, 0x80	; 128
 24a:	02 c0       	rjmp	.+4      	; 0x250 <vfprintf+0x112>
 24c:	88 36       	cpi	r24, 0x68	; 104
 24e:	51 f4       	brne	.+20     	; 0x264 <vfprintf+0x126>
 250:	f3 01       	movw	r30, r6
 252:	84 91       	lpm	r24, Z
 254:	87 fc       	sbrc	r8, 7
 256:	80 81       	ld	r24, Z
 258:	ff ef       	ldi	r31, 0xFF	; 255
 25a:	6f 1a       	sub	r6, r31
 25c:	7f 0a       	sbc	r7, r31
 25e:	8f 0a       	sbc	r8, r31
 260:	81 11       	cpse	r24, r1
 262:	bf cf       	rjmp	.-130    	; 0x1e2 <vfprintf+0xa4>
 264:	98 2f       	mov	r25, r24
 266:	9f 7d       	andi	r25, 0xDF	; 223
 268:	95 54       	subi	r25, 0x45	; 69
 26a:	93 30       	cpi	r25, 0x03	; 3
 26c:	28 f4       	brcc	.+10     	; 0x278 <vfprintf+0x13a>
 26e:	24 e0       	ldi	r18, 0x04	; 4
 270:	e2 0e       	add	r14, r18
 272:	f1 1c       	adc	r15, r1
 274:	99 82       	std	Y+1, r9	; 0x01
 276:	0f c0       	rjmp	.+30     	; 0x296 <vfprintf+0x158>
 278:	83 36       	cpi	r24, 0x63	; 99
 27a:	31 f0       	breq	.+12     	; 0x288 <vfprintf+0x14a>
 27c:	83 37       	cpi	r24, 0x73	; 115
 27e:	91 f0       	breq	.+36     	; 0x2a4 <vfprintf+0x166>
 280:	83 35       	cpi	r24, 0x53	; 83
 282:	09 f0       	breq	.+2      	; 0x286 <vfprintf+0x148>
 284:	63 c0       	rjmp	.+198    	; 0x34c <vfprintf+0x20e>
 286:	27 c0       	rjmp	.+78     	; 0x2d6 <vfprintf+0x198>
 288:	f7 01       	movw	r30, r14
 28a:	80 81       	ld	r24, Z
 28c:	89 83       	std	Y+1, r24	; 0x01
 28e:	97 01       	movw	r18, r14
 290:	2e 5f       	subi	r18, 0xFE	; 254
 292:	3f 4f       	sbci	r19, 0xFF	; 255
 294:	79 01       	movw	r14, r18
 296:	28 88       	ldd	r2, Y+16	; 0x10
 298:	39 88       	ldd	r3, Y+17	; 0x11
 29a:	4a 88       	ldd	r4, Y+18	; 0x12
 29c:	aa 24       	eor	r10, r10
 29e:	a3 94       	inc	r10
 2a0:	b1 2c       	mov	r11, r1
 2a2:	17 c0       	rjmp	.+46     	; 0x2d2 <vfprintf+0x194>
 2a4:	a7 01       	movw	r20, r14
 2a6:	4d 5f       	subi	r20, 0xFD	; 253
 2a8:	5f 4f       	sbci	r21, 0xFF	; 255
 2aa:	5f 87       	std	Y+15, r21	; 0x0f
 2ac:	4e 87       	std	Y+14, r20	; 0x0e
 2ae:	f7 01       	movw	r30, r14
 2b0:	20 80       	ld	r2, Z
 2b2:	31 80       	ldd	r3, Z+1	; 0x01
 2b4:	42 80       	ldd	r4, Z+2	; 0x02
 2b6:	16 ff       	sbrs	r17, 6
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <vfprintf+0x182>
 2ba:	4b 2d       	mov	r20, r11
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <vfprintf+0x186>
 2c0:	4f ef       	ldi	r20, 0xFF	; 255
 2c2:	5f ef       	ldi	r21, 0xFF	; 255
 2c4:	84 2d       	mov	r24, r4
 2c6:	b1 01       	movw	r22, r2
 2c8:	0e 94 48 05 	call	0xa90	; 0xa90 <strnlen>
 2cc:	5c 01       	movw	r10, r24
 2ce:	ee 84       	ldd	r14, Y+14	; 0x0e
 2d0:	ff 84       	ldd	r15, Y+15	; 0x0f
 2d2:	1f 77       	andi	r17, 0x7F	; 127
 2d4:	18 c0       	rjmp	.+48     	; 0x306 <vfprintf+0x1c8>
 2d6:	97 01       	movw	r18, r14
 2d8:	2d 5f       	subi	r18, 0xFD	; 253
 2da:	3f 4f       	sbci	r19, 0xFF	; 255
 2dc:	3f 87       	std	Y+15, r19	; 0x0f
 2de:	2e 87       	std	Y+14, r18	; 0x0e
 2e0:	f7 01       	movw	r30, r14
 2e2:	20 80       	ld	r2, Z
 2e4:	31 80       	ldd	r3, Z+1	; 0x01
 2e6:	42 80       	ldd	r4, Z+2	; 0x02
 2e8:	16 ff       	sbrs	r17, 6
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <vfprintf+0x1b4>
 2ec:	4b 2d       	mov	r20, r11
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <vfprintf+0x1b8>
 2f2:	4f ef       	ldi	r20, 0xFF	; 255
 2f4:	5f ef       	ldi	r21, 0xFF	; 255
 2f6:	84 2d       	mov	r24, r4
 2f8:	b1 01       	movw	r22, r2
 2fa:	0e 94 48 05 	call	0xa90	; 0xa90 <strnlen>
 2fe:	5c 01       	movw	r10, r24
 300:	10 68       	ori	r17, 0x80	; 128
 302:	ee 84       	ldd	r14, Y+14	; 0x0e
 304:	ff 84       	ldd	r15, Y+15	; 0x0f
 306:	13 fd       	sbrc	r17, 3
 308:	1d c0       	rjmp	.+58     	; 0x344 <vfprintf+0x206>
 30a:	80 2f       	mov	r24, r16
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	a8 16       	cp	r10, r24
 310:	b9 06       	cpc	r11, r25
 312:	c0 f4       	brcc	.+48     	; 0x344 <vfprintf+0x206>
 314:	b6 01       	movw	r22, r12
 316:	80 e2       	ldi	r24, 0x20	; 32
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 31e:	01 50       	subi	r16, 0x01	; 1
 320:	f4 cf       	rjmp	.-24     	; 0x30a <vfprintf+0x1cc>
 322:	f1 01       	movw	r30, r2
 324:	84 91       	lpm	r24, Z
 326:	47 fc       	sbrc	r4, 7
 328:	80 81       	ld	r24, Z
 32a:	ff ef       	ldi	r31, 0xFF	; 255
 32c:	2f 1a       	sub	r2, r31
 32e:	3f 0a       	sbc	r3, r31
 330:	4f 0a       	sbc	r4, r31
 332:	b6 01       	movw	r22, r12
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 33a:	01 11       	cpse	r16, r1
 33c:	01 50       	subi	r16, 0x01	; 1
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	a2 1a       	sub	r10, r18
 342:	b1 08       	sbc	r11, r1
 344:	a1 14       	cp	r10, r1
 346:	b1 04       	cpc	r11, r1
 348:	61 f7       	brne	.-40     	; 0x322 <vfprintf+0x1e4>
 34a:	f5 c0       	rjmp	.+490    	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 34c:	84 36       	cpi	r24, 0x64	; 100
 34e:	11 f0       	breq	.+4      	; 0x354 <vfprintf+0x216>
 350:	89 36       	cpi	r24, 0x69	; 105
 352:	71 f5       	brne	.+92     	; 0x3b0 <vfprintf+0x272>
 354:	f7 01       	movw	r30, r14
 356:	17 ff       	sbrs	r17, 7
 358:	08 c0       	rjmp	.+16     	; 0x36a <vfprintf+0x22c>
 35a:	60 81       	ld	r22, Z
 35c:	71 81       	ldd	r23, Z+1	; 0x01
 35e:	82 81       	ldd	r24, Z+2	; 0x02
 360:	93 81       	ldd	r25, Z+3	; 0x03
 362:	97 01       	movw	r18, r14
 364:	2c 5f       	subi	r18, 0xFC	; 252
 366:	3f 4f       	sbci	r19, 0xFF	; 255
 368:	09 c0       	rjmp	.+18     	; 0x37c <vfprintf+0x23e>
 36a:	60 81       	ld	r22, Z
 36c:	71 81       	ldd	r23, Z+1	; 0x01
 36e:	07 2e       	mov	r0, r23
 370:	00 0c       	add	r0, r0
 372:	88 0b       	sbc	r24, r24
 374:	99 0b       	sbc	r25, r25
 376:	97 01       	movw	r18, r14
 378:	2e 5f       	subi	r18, 0xFE	; 254
 37a:	3f 4f       	sbci	r19, 0xFF	; 255
 37c:	79 01       	movw	r14, r18
 37e:	1f 76       	andi	r17, 0x6F	; 111
 380:	31 2e       	mov	r3, r17
 382:	97 ff       	sbrs	r25, 7
 384:	0a c0       	rjmp	.+20     	; 0x39a <vfprintf+0x25c>
 386:	90 95       	com	r25
 388:	80 95       	com	r24
 38a:	70 95       	com	r23
 38c:	61 95       	neg	r22
 38e:	7f 4f       	sbci	r23, 0xFF	; 255
 390:	8f 4f       	sbci	r24, 0xFF	; 255
 392:	9f 4f       	sbci	r25, 0xFF	; 255
 394:	31 2f       	mov	r19, r17
 396:	30 68       	ori	r19, 0x80	; 128
 398:	33 2e       	mov	r3, r19
 39a:	2a e0       	ldi	r18, 0x0A	; 10
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	ae 01       	movw	r20, r28
 3a0:	4f 5f       	subi	r20, 0xFF	; 255
 3a2:	5f 4f       	sbci	r21, 0xFF	; 255
 3a4:	0e 94 2f 03 	call	0x65e	; 0x65e <__ultoa_invert>
 3a8:	48 2e       	mov	r4, r24
 3aa:	4c 85       	ldd	r20, Y+12	; 0x0c
 3ac:	44 1a       	sub	r4, r20
 3ae:	4a c0       	rjmp	.+148    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 3b0:	85 37       	cpi	r24, 0x75	; 117
 3b2:	29 f4       	brne	.+10     	; 0x3be <vfprintf+0x280>
 3b4:	1f 7e       	andi	r17, 0xEF	; 239
 3b6:	a1 2e       	mov	r10, r17
 3b8:	2a e0       	ldi	r18, 0x0A	; 10
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	25 c0       	rjmp	.+74     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3be:	51 2f       	mov	r21, r17
 3c0:	59 7f       	andi	r21, 0xF9	; 249
 3c2:	a5 2e       	mov	r10, r21
 3c4:	8f 36       	cpi	r24, 0x6F	; 111
 3c6:	c1 f0       	breq	.+48     	; 0x3f8 <vfprintf+0x2ba>
 3c8:	18 f4       	brcc	.+6      	; 0x3d0 <vfprintf+0x292>
 3ca:	88 35       	cpi	r24, 0x58	; 88
 3cc:	79 f0       	breq	.+30     	; 0x3ec <vfprintf+0x2ae>
 3ce:	bd c0       	rjmp	.+378    	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 3d0:	80 37       	cpi	r24, 0x70	; 112
 3d2:	19 f0       	breq	.+6      	; 0x3da <vfprintf+0x29c>
 3d4:	88 37       	cpi	r24, 0x78	; 120
 3d6:	21 f0       	breq	.+8      	; 0x3e0 <vfprintf+0x2a2>
 3d8:	b8 c0       	rjmp	.+368    	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 3da:	85 2f       	mov	r24, r21
 3dc:	80 61       	ori	r24, 0x10	; 16
 3de:	a8 2e       	mov	r10, r24
 3e0:	a4 fe       	sbrs	r10, 4
 3e2:	0d c0       	rjmp	.+26     	; 0x3fe <vfprintf+0x2c0>
 3e4:	9a 2d       	mov	r25, r10
 3e6:	94 60       	ori	r25, 0x04	; 4
 3e8:	a9 2e       	mov	r10, r25
 3ea:	09 c0       	rjmp	.+18     	; 0x3fe <vfprintf+0x2c0>
 3ec:	14 ff       	sbrs	r17, 4
 3ee:	0a c0       	rjmp	.+20     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3f0:	a5 2f       	mov	r26, r21
 3f2:	a6 60       	ori	r26, 0x06	; 6
 3f4:	aa 2e       	mov	r10, r26
 3f6:	06 c0       	rjmp	.+12     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3f8:	28 e0       	ldi	r18, 0x08	; 8
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	05 c0       	rjmp	.+10     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3fe:	20 e1       	ldi	r18, 0x10	; 16
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	20 e1       	ldi	r18, 0x10	; 16
 406:	32 e0       	ldi	r19, 0x02	; 2
 408:	f7 01       	movw	r30, r14
 40a:	a7 fe       	sbrs	r10, 7
 40c:	08 c0       	rjmp	.+16     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 40e:	60 81       	ld	r22, Z
 410:	71 81       	ldd	r23, Z+1	; 0x01
 412:	82 81       	ldd	r24, Z+2	; 0x02
 414:	93 81       	ldd	r25, Z+3	; 0x03
 416:	a7 01       	movw	r20, r14
 418:	4c 5f       	subi	r20, 0xFC	; 252
 41a:	5f 4f       	sbci	r21, 0xFF	; 255
 41c:	07 c0       	rjmp	.+14     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 41e:	60 81       	ld	r22, Z
 420:	71 81       	ldd	r23, Z+1	; 0x01
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	a7 01       	movw	r20, r14
 428:	4e 5f       	subi	r20, 0xFE	; 254
 42a:	5f 4f       	sbci	r21, 0xFF	; 255
 42c:	7a 01       	movw	r14, r20
 42e:	ae 01       	movw	r20, r28
 430:	4f 5f       	subi	r20, 0xFF	; 255
 432:	5f 4f       	sbci	r21, 0xFF	; 255
 434:	0e 94 2f 03 	call	0x65e	; 0x65e <__ultoa_invert>
 438:	48 2e       	mov	r4, r24
 43a:	5c 85       	ldd	r21, Y+12	; 0x0c
 43c:	45 1a       	sub	r4, r21
 43e:	8a 2d       	mov	r24, r10
 440:	8f 77       	andi	r24, 0x7F	; 127
 442:	38 2e       	mov	r3, r24
 444:	36 fe       	sbrs	r3, 6
 446:	0d c0       	rjmp	.+26     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 448:	93 2d       	mov	r25, r3
 44a:	9e 7f       	andi	r25, 0xFE	; 254
 44c:	a9 2e       	mov	r10, r25
 44e:	4b 14       	cp	r4, r11
 450:	58 f4       	brcc	.+22     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 452:	34 fe       	sbrs	r3, 4
 454:	0b c0       	rjmp	.+22     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 456:	32 fc       	sbrc	r3, 2
 458:	09 c0       	rjmp	.+18     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 45a:	a3 2d       	mov	r26, r3
 45c:	ae 7e       	andi	r26, 0xEE	; 238
 45e:	aa 2e       	mov	r10, r26
 460:	05 c0       	rjmp	.+10     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 462:	14 2d       	mov	r17, r4
 464:	a3 2c       	mov	r10, r3
 466:	03 c0       	rjmp	.+6      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 468:	14 2d       	mov	r17, r4
 46a:	01 c0       	rjmp	.+2      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46c:	1b 2d       	mov	r17, r11
 46e:	a4 fe       	sbrs	r10, 4
 470:	0e c0       	rjmp	.+28     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 472:	fe 01       	movw	r30, r28
 474:	e4 0d       	add	r30, r4
 476:	f1 1d       	adc	r31, r1
 478:	80 81       	ld	r24, Z
 47a:	80 33       	cpi	r24, 0x30	; 48
 47c:	21 f4       	brne	.+8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 47e:	ea 2d       	mov	r30, r10
 480:	e9 7e       	andi	r30, 0xE9	; 233
 482:	ae 2e       	mov	r10, r30
 484:	08 c0       	rjmp	.+16     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 486:	a2 fe       	sbrs	r10, 2
 488:	05 c0       	rjmp	.+10     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 48a:	1e 5f       	subi	r17, 0xFE	; 254
 48c:	04 c0       	rjmp	.+8      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 48e:	8a 2d       	mov	r24, r10
 490:	86 78       	andi	r24, 0x86	; 134
 492:	09 f0       	breq	.+2      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 494:	1f 5f       	subi	r17, 0xFF	; 255
 496:	a3 fc       	sbrc	r10, 3
 498:	11 c0       	rjmp	.+34     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 49a:	a0 fe       	sbrs	r10, 0
 49c:	06 c0       	rjmp	.+12     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 49e:	10 17       	cp	r17, r16
 4a0:	88 f4       	brcc	.+34     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4a2:	04 0d       	add	r16, r4
 4a4:	b0 2e       	mov	r11, r16
 4a6:	b1 1a       	sub	r11, r17
 4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4aa:	10 17       	cp	r17, r16
 4ac:	60 f4       	brcc	.+24     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4ae:	b6 01       	movw	r22, r12
 4b0:	80 e2       	ldi	r24, 0x20	; 32
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 4b8:	1f 5f       	subi	r17, 0xFF	; 255
 4ba:	f7 cf       	rjmp	.-18     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4bc:	10 17       	cp	r17, r16
 4be:	18 f4       	brcc	.+6      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4c0:	01 1b       	sub	r16, r17
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4c4:	b4 2c       	mov	r11, r4
 4c6:	00 e0       	ldi	r16, 0x00	; 0
 4c8:	a4 fe       	sbrs	r10, 4
 4ca:	10 c0       	rjmp	.+32     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4cc:	b6 01       	movw	r22, r12
 4ce:	80 e3       	ldi	r24, 0x30	; 48
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 4d6:	a2 fe       	sbrs	r10, 2
 4d8:	17 c0       	rjmp	.+46     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 4da:	a1 fc       	sbrc	r10, 1
 4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4de:	88 e7       	ldi	r24, 0x78	; 120
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4e4:	88 e5       	ldi	r24, 0x58	; 88
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	b6 01       	movw	r22, r12
 4ea:	0c c0       	rjmp	.+24     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 4ec:	8a 2d       	mov	r24, r10
 4ee:	86 78       	andi	r24, 0x86	; 134
 4f0:	59 f0       	breq	.+22     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 4f2:	a1 fe       	sbrs	r10, 1
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4f6:	8b e2       	ldi	r24, 0x2B	; 43
 4f8:	01 c0       	rjmp	.+2      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4fa:	80 e2       	ldi	r24, 0x20	; 32
 4fc:	a7 fc       	sbrc	r10, 7
 4fe:	8d e2       	ldi	r24, 0x2D	; 45
 500:	b6 01       	movw	r22, r12
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 508:	4b 14       	cp	r4, r11
 50a:	38 f4       	brcc	.+14     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 50c:	b6 01       	movw	r22, r12
 50e:	80 e3       	ldi	r24, 0x30	; 48
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 516:	ba 94       	dec	r11
 518:	f7 cf       	rjmp	.-18     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 51a:	4a 94       	dec	r4
 51c:	e1 e0       	ldi	r30, 0x01	; 1
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	ec 0f       	add	r30, r28
 522:	fd 1f       	adc	r31, r29
 524:	e4 0d       	add	r30, r4
 526:	f1 1d       	adc	r31, r1
 528:	80 81       	ld	r24, Z
 52a:	b6 01       	movw	r22, r12
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 532:	41 10       	cpse	r4, r1
 534:	f2 cf       	rjmp	.-28     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 536:	00 23       	and	r16, r16
 538:	09 f4       	brne	.+2      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
 53a:	30 ce       	rjmp	.-928    	; 0x19c <vfprintf+0x5e>
 53c:	b6 01       	movw	r22, r12
 53e:	80 e2       	ldi	r24, 0x20	; 32
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 8d 03 	call	0x71a	; 0x71a <fputc>
 546:	01 50       	subi	r16, 0x01	; 1
 548:	f6 cf       	rjmp	.-20     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 54a:	f6 01       	movw	r30, r12
 54c:	87 81       	ldd	r24, Z+7	; 0x07
 54e:	90 85       	ldd	r25, Z+8	; 0x08
 550:	02 c0       	rjmp	.+4      	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
 552:	8f ef       	ldi	r24, 0xFF	; 255
 554:	9f ef       	ldi	r25, 0xFF	; 255
 556:	62 96       	adiw	r28, 0x12	; 18
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	f8 94       	cli
 55c:	de bf       	out	0x3e, r29	; 62
 55e:	0f be       	out	0x3f, r0	; 63
 560:	cd bf       	out	0x3d, r28	; 61
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	1f 91       	pop	r17
 568:	0f 91       	pop	r16
 56a:	ff 90       	pop	r15
 56c:	ef 90       	pop	r14
 56e:	df 90       	pop	r13
 570:	cf 90       	pop	r12
 572:	bf 90       	pop	r11
 574:	af 90       	pop	r10
 576:	9f 90       	pop	r9
 578:	8f 90       	pop	r8
 57a:	7f 90       	pop	r7
 57c:	6f 90       	pop	r6
 57e:	4f 90       	pop	r4
 580:	3f 90       	pop	r3
 582:	2f 90       	pop	r2
 584:	08 95       	ret

Disassembly of section .text.avrlibc:

00000a90 <strnlen>:
 a90:	cf 92       	push	r12
 a92:	df 92       	push	r13
 a94:	ef 92       	push	r14
 a96:	6b 01       	movw	r12, r22
 a98:	e8 2e       	mov	r14, r24
 a9a:	a8 2f       	mov	r26, r24
 a9c:	cb 01       	movw	r24, r22
 a9e:	41 15       	cp	r20, r1
 aa0:	51 05       	cpc	r21, r1
 aa2:	31 f4       	brne	.+12     	; 0xab0 <strnlen+0x20>
 aa4:	8c 19       	sub	r24, r12
 aa6:	9d 09       	sbc	r25, r13
 aa8:	ef 90       	pop	r14
 aaa:	df 90       	pop	r13
 aac:	cf 90       	pop	r12
 aae:	08 95       	ret
 ab0:	fc 01       	movw	r30, r24
 ab2:	24 91       	lpm	r18, Z
 ab4:	a7 fd       	sbrc	r26, 7
 ab6:	20 81       	ld	r18, Z
 ab8:	22 23       	and	r18, r18
 aba:	a1 f3       	breq	.-24     	; 0xaa4 <strnlen+0x14>
 abc:	01 96       	adiw	r24, 0x01	; 1
 abe:	a1 1d       	adc	r26, r1
 ac0:	41 50       	subi	r20, 0x01	; 1
 ac2:	51 09       	sbc	r21, r1
 ac4:	ec cf       	rjmp	.-40     	; 0xa9e <strnlen+0xe>

Disassembly of section .text.avrlibc:

0000071a <fputc>:
 71a:	0f 93       	push	r16
 71c:	1f 93       	push	r17
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
 722:	fb 01       	movw	r30, r22
 724:	24 81       	ldd	r18, Z+4	; 0x04
 726:	21 fd       	sbrc	r18, 1
 728:	03 c0       	rjmp	.+6      	; 0x730 <fputc+0x16>
 72a:	8f ef       	ldi	r24, 0xFF	; 255
 72c:	9f ef       	ldi	r25, 0xFF	; 255
 72e:	2c c0       	rjmp	.+88     	; 0x788 <fputc+0x6e>
 730:	22 ff       	sbrs	r18, 2
 732:	16 c0       	rjmp	.+44     	; 0x760 <fputc+0x46>
 734:	47 81       	ldd	r20, Z+7	; 0x07
 736:	50 85       	ldd	r21, Z+8	; 0x08
 738:	25 81       	ldd	r18, Z+5	; 0x05
 73a:	36 81       	ldd	r19, Z+6	; 0x06
 73c:	42 17       	cp	r20, r18
 73e:	53 07       	cpc	r21, r19
 740:	44 f4       	brge	.+16     	; 0x752 <fputc+0x38>
 742:	a0 81       	ld	r26, Z
 744:	b1 81       	ldd	r27, Z+1	; 0x01
 746:	9d 01       	movw	r18, r26
 748:	2f 5f       	subi	r18, 0xFF	; 255
 74a:	3f 4f       	sbci	r19, 0xFF	; 255
 74c:	31 83       	std	Z+1, r19	; 0x01
 74e:	20 83       	st	Z, r18
 750:	8c 93       	st	X, r24
 752:	27 81       	ldd	r18, Z+7	; 0x07
 754:	30 85       	ldd	r19, Z+8	; 0x08
 756:	2f 5f       	subi	r18, 0xFF	; 255
 758:	3f 4f       	sbci	r19, 0xFF	; 255
 75a:	30 87       	std	Z+8, r19	; 0x08
 75c:	27 83       	std	Z+7, r18	; 0x07
 75e:	14 c0       	rjmp	.+40     	; 0x788 <fputc+0x6e>
 760:	8b 01       	movw	r16, r22
 762:	ec 01       	movw	r28, r24
 764:	fb 01       	movw	r30, r22
 766:	01 84       	ldd	r0, Z+9	; 0x09
 768:	f2 85       	ldd	r31, Z+10	; 0x0a
 76a:	e0 2d       	mov	r30, r0
 76c:	09 95       	icall
 76e:	89 2b       	or	r24, r25
 770:	e1 f6       	brne	.-72     	; 0x72a <fputc+0x10>
 772:	d8 01       	movw	r26, r16
 774:	17 96       	adiw	r26, 0x07	; 7
 776:	8d 91       	ld	r24, X+
 778:	9c 91       	ld	r25, X
 77a:	18 97       	sbiw	r26, 0x08	; 8
 77c:	01 96       	adiw	r24, 0x01	; 1
 77e:	18 96       	adiw	r26, 0x08	; 8
 780:	9c 93       	st	X, r25
 782:	8e 93       	st	-X, r24
 784:	17 97       	sbiw	r26, 0x07	; 7
 786:	ce 01       	movw	r24, r28
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	1f 91       	pop	r17
 78e:	0f 91       	pop	r16
 790:	08 95       	ret

Disassembly of section .text.avrlibc:

0000065e <__ultoa_invert>:
 65e:	fa 01       	movw	r30, r20
 660:	aa 27       	eor	r26, r26
 662:	28 30       	cpi	r18, 0x08	; 8
 664:	51 f1       	breq	.+84     	; 0x6ba <__ultoa_invert+0x5c>
 666:	20 31       	cpi	r18, 0x10	; 16
 668:	81 f1       	breq	.+96     	; 0x6ca <__ultoa_invert+0x6c>
 66a:	e8 94       	clt
 66c:	6f 93       	push	r22
 66e:	6e 7f       	andi	r22, 0xFE	; 254
 670:	6e 5f       	subi	r22, 0xFE	; 254
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	8f 4f       	sbci	r24, 0xFF	; 255
 676:	9f 4f       	sbci	r25, 0xFF	; 255
 678:	af 4f       	sbci	r26, 0xFF	; 255
 67a:	b1 e0       	ldi	r27, 0x01	; 1
 67c:	3e d0       	rcall	.+124    	; 0x6fa <__ultoa_invert+0x9c>
 67e:	b4 e0       	ldi	r27, 0x04	; 4
 680:	3c d0       	rcall	.+120    	; 0x6fa <__ultoa_invert+0x9c>
 682:	67 0f       	add	r22, r23
 684:	78 1f       	adc	r23, r24
 686:	89 1f       	adc	r24, r25
 688:	9a 1f       	adc	r25, r26
 68a:	a1 1d       	adc	r26, r1
 68c:	68 0f       	add	r22, r24
 68e:	79 1f       	adc	r23, r25
 690:	8a 1f       	adc	r24, r26
 692:	91 1d       	adc	r25, r1
 694:	a1 1d       	adc	r26, r1
 696:	6a 0f       	add	r22, r26
 698:	71 1d       	adc	r23, r1
 69a:	81 1d       	adc	r24, r1
 69c:	91 1d       	adc	r25, r1
 69e:	a1 1d       	adc	r26, r1
 6a0:	20 d0       	rcall	.+64     	; 0x6e2 <__ultoa_invert+0x84>
 6a2:	09 f4       	brne	.+2      	; 0x6a6 <__ultoa_invert+0x48>
 6a4:	68 94       	set
 6a6:	3f 91       	pop	r19
 6a8:	2a e0       	ldi	r18, 0x0A	; 10
 6aa:	26 9f       	mul	r18, r22
 6ac:	11 24       	eor	r1, r1
 6ae:	30 19       	sub	r19, r0
 6b0:	30 5d       	subi	r19, 0xD0	; 208
 6b2:	31 93       	st	Z+, r19
 6b4:	de f6       	brtc	.-74     	; 0x66c <__ultoa_invert+0xe>
 6b6:	cf 01       	movw	r24, r30
 6b8:	08 95       	ret
 6ba:	46 2f       	mov	r20, r22
 6bc:	47 70       	andi	r20, 0x07	; 7
 6be:	40 5d       	subi	r20, 0xD0	; 208
 6c0:	41 93       	st	Z+, r20
 6c2:	b3 e0       	ldi	r27, 0x03	; 3
 6c4:	0f d0       	rcall	.+30     	; 0x6e4 <__ultoa_invert+0x86>
 6c6:	c9 f7       	brne	.-14     	; 0x6ba <__ultoa_invert+0x5c>
 6c8:	f6 cf       	rjmp	.-20     	; 0x6b6 <__ultoa_invert+0x58>
 6ca:	46 2f       	mov	r20, r22
 6cc:	4f 70       	andi	r20, 0x0F	; 15
 6ce:	40 5d       	subi	r20, 0xD0	; 208
 6d0:	4a 33       	cpi	r20, 0x3A	; 58
 6d2:	18 f0       	brcs	.+6      	; 0x6da <__ultoa_invert+0x7c>
 6d4:	49 5d       	subi	r20, 0xD9	; 217
 6d6:	31 fd       	sbrc	r19, 1
 6d8:	40 52       	subi	r20, 0x20	; 32
 6da:	41 93       	st	Z+, r20
 6dc:	02 d0       	rcall	.+4      	; 0x6e2 <__ultoa_invert+0x84>
 6de:	a9 f7       	brne	.-22     	; 0x6ca <__ultoa_invert+0x6c>
 6e0:	ea cf       	rjmp	.-44     	; 0x6b6 <__ultoa_invert+0x58>
 6e2:	b4 e0       	ldi	r27, 0x04	; 4
 6e4:	a6 95       	lsr	r26
 6e6:	97 95       	ror	r25
 6e8:	87 95       	ror	r24
 6ea:	77 95       	ror	r23
 6ec:	67 95       	ror	r22
 6ee:	ba 95       	dec	r27
 6f0:	c9 f7       	brne	.-14     	; 0x6e4 <__ultoa_invert+0x86>
 6f2:	00 97       	sbiw	r24, 0x00	; 0
 6f4:	61 05       	cpc	r22, r1
 6f6:	71 05       	cpc	r23, r1
 6f8:	08 95       	ret
 6fa:	9b 01       	movw	r18, r22
 6fc:	ac 01       	movw	r20, r24
 6fe:	0a 2e       	mov	r0, r26
 700:	06 94       	lsr	r0
 702:	57 95       	ror	r21
 704:	47 95       	ror	r20
 706:	37 95       	ror	r19
 708:	27 95       	ror	r18
 70a:	ba 95       	dec	r27
 70c:	c9 f7       	brne	.-14     	; 0x700 <__ultoa_invert+0xa2>
 70e:	62 0f       	add	r22, r18
 710:	73 1f       	adc	r23, r19
 712:	84 1f       	adc	r24, r20
 714:	95 1f       	adc	r25, r21
 716:	a0 1d       	adc	r26, r0
 718:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000a58 <__prologue_saves__>:
 a58:	2f 92       	push	r2
 a5a:	3f 92       	push	r3
 a5c:	4f 92       	push	r4
 a5e:	5f 92       	push	r5
 a60:	6f 92       	push	r6
 a62:	7f 92       	push	r7
 a64:	8f 92       	push	r8
 a66:	9f 92       	push	r9
 a68:	af 92       	push	r10
 a6a:	bf 92       	push	r11
 a6c:	cf 92       	push	r12
 a6e:	df 92       	push	r13
 a70:	ef 92       	push	r14
 a72:	ff 92       	push	r15
 a74:	0f 93       	push	r16
 a76:	1f 93       	push	r17
 a78:	cf 93       	push	r28
 a7a:	df 93       	push	r29
 a7c:	cd b7       	in	r28, 0x3d	; 61
 a7e:	de b7       	in	r29, 0x3e	; 62
 a80:	ca 1b       	sub	r28, r26
 a82:	db 0b       	sbc	r29, r27
 a84:	0f b6       	in	r0, 0x3f	; 63
 a86:	f8 94       	cli
 a88:	de bf       	out	0x3e, r29	; 62
 a8a:	0f be       	out	0x3f, r0	; 63
 a8c:	cd bf       	out	0x3d, r28	; 61
 a8e:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00000ac6 <__epilogue_restores__>:
 ac6:	2a 88       	ldd	r2, Y+18	; 0x12
 ac8:	39 88       	ldd	r3, Y+17	; 0x11
 aca:	48 88       	ldd	r4, Y+16	; 0x10
 acc:	5f 84       	ldd	r5, Y+15	; 0x0f
 ace:	6e 84       	ldd	r6, Y+14	; 0x0e
 ad0:	7d 84       	ldd	r7, Y+13	; 0x0d
 ad2:	8c 84       	ldd	r8, Y+12	; 0x0c
 ad4:	9b 84       	ldd	r9, Y+11	; 0x0b
 ad6:	aa 84       	ldd	r10, Y+10	; 0x0a
 ad8:	b9 84       	ldd	r11, Y+9	; 0x09
 ada:	c8 84       	ldd	r12, Y+8	; 0x08
 adc:	df 80       	ldd	r13, Y+7	; 0x07
 ade:	ee 80       	ldd	r14, Y+6	; 0x06
 ae0:	fd 80       	ldd	r15, Y+5	; 0x05
 ae2:	0c 81       	ldd	r16, Y+4	; 0x04
 ae4:	1b 81       	ldd	r17, Y+3	; 0x03
 ae6:	aa 81       	ldd	r26, Y+2	; 0x02
 ae8:	b9 81       	ldd	r27, Y+1	; 0x01
 aea:	ce 0f       	add	r28, r30
 aec:	d1 1d       	adc	r29, r1
 aee:	0f b6       	in	r0, 0x3f	; 63
 af0:	f8 94       	cli
 af2:	de bf       	out	0x3e, r29	; 62
 af4:	0f be       	out	0x3f, r0	; 63
 af6:	cd bf       	out	0x3d, r28	; 61
 af8:	ed 01       	movw	r28, r26
 afa:	08 95       	ret
